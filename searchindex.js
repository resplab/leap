Search.setIndex({"titles": ["1. Run the Simulation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">config.json</span></code>", "Running LEAP", "LEAP Model Validation", "Data Generation", "Antibiotic Data", "Birth Data", "Control Data", "Death Data", "Exacerbation Calibration Data", "Incidence Calibration", "Migration Data", "Occurrence Calibration Data", "Occurrence Data", "Prevalence Calibration", "Reassessment Data", "Utility Data", "leap.data_generation.utils module", "API", "LEAP", "leap.agent module", "leap.antibiotic_exposure module", "leap.birth module", "leap.census_division module", "leap.control module", "leap.cost module", "leap.death module", "leap.emigration module", "leap.exacerbation module", "leap.family_history module", "leap.immigration module", "leap.logger module", "leap.main module", "leap.occurrence module", "leap.outcome_matrix module", "leap.pollution module", "leap.reassessment module", "leap.severity module", "leap.simulation module", "leap.utility module", "leap.utils module", "Sphinx Documentation", "Installation", "Releases", "Testing", "Developers", "LEAP: Lifetime Exposures and Asthma outcomes Projection", "Installation", "Model", "Antibiotic Exposure Model", "Asthma Control Model", "Generalized Linear Models", "Asthma Occurrence Model", "Utility Model", "References"], "terms": {"The": [0, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 44, 49, 50, 51, 52, 53, 54], "default": [0, 2, 3, 9, 12, 16, 40, 51], "configur": [0, 2, 32], "option": [0, 5, 13], "ar": [0, 6, 9, 10, 11, 12, 13, 14, 20, 22, 24, 31, 33, 34, 37, 38, 40, 41, 43, 44, 49, 50, 51, 52], "found": [0, 3, 8, 41, 43, 47, 52], "leap": [0, 4, 18, 41, 43, 44, 50, 53, 54], "processed_data": [0, 2, 3, 6, 8, 11, 12, 13, 21, 24, 27, 30, 35, 36, 38, 39, 44, 50], "config": [0, 2, 3, 13, 21, 23, 24, 25, 28, 29, 33, 37, 38, 39, 47, 50], "json": [0, 2, 12, 21, 24, 32, 38, 40, 50], "file": [0, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 21, 23, 32, 34, 35, 40, 41, 42, 50], "you": [0, 2, 12, 13, 41, 42, 43, 44, 46, 47, 49, 52], "can": [0, 2, 6, 8, 9, 12, 15, 17, 35, 36, 41, 43, 44, 46, 47, 49, 51, 52, 53, 54], "modifi": [0, 31, 41], "creat": [0, 6, 17, 32, 34, 40, 41], "your": [0, 3, 41, 43, 44, 47], "own": 0, "pass": [0, 8], "model": [0, 4, 5, 9, 12, 13, 14, 15, 20, 25, 26, 28, 33, 34, 36, 38, 39, 54], "To": [0, 3, 6, 8, 9, 11, 12, 13, 16, 30, 37, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52], "from": [0, 3, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 49, 50, 51, 52, 53, 54], "command": [0, 2, 3, 32, 41, 46, 47], "line": [0, 2, 3, 32, 44, 46, 47, 51], "us": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 17, 20, 21, 24, 28, 29, 31, 32, 35, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54], "set": [0, 2, 3, 8, 11, 14, 16, 21, 22, 26, 27, 28, 30, 31, 32, 36, 47, 53], "flag": [0, 12, 44], "descript": [0, 12, 49, 50, 52, 53], "path": [0, 3, 13, 23, 32, 34, 35, 38, 40, 43], "If": [0, 5, 9, 12, 13, 14, 17, 21, 23, 28, 31, 32, 34, 35, 36, 38, 39, 40, 42, 44, 47, 50], "none": [0, 3, 5, 8, 9, 12, 13, 14, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 52], "i": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 23, 24, 28, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 44, 47, 49, 50, 51, 52, 53], "provid": [0, 5, 8, 14, 20, 23, 32], "provinc": [0, 1, 3, 5, 6, 8, 9, 11, 12, 15, 17, 20, 22, 23, 26, 27, 28, 30, 36, 38, 40], "bc": [0, 1, 3, 5, 6, 8, 11, 12, 13, 14, 17, 20, 21, 22, 26, 27, 28, 30, 36, 49, 50, 52], "which": [0, 5, 8, 9, 12, 13, 15, 16, 20, 22, 24, 28, 31, 33, 35, 36, 41, 42, 44, 49, 50, 51, 52], "must": [0, 5, 9, 12, 13, 16, 17, 22, 27, 30, 34, 40, 49, 52], "2": [0, 1, 3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 20, 22, 24, 25, 27, 30, 33, 35, 37, 38, 40, 44, 49, 50, 51, 54], "letter": [0, 6, 8, 9, 11, 12, 15, 20, 23, 38], "abbrevi": [0, 8, 9, 11, 17, 20, 22, 26, 27, 28, 30, 36, 38, 40], "One": [0, 5, 8, 9, 11, 12, 13, 16, 33, 38], "ca": [0, 3, 8, 9, 11, 12, 15, 20, 22, 23, 26, 27, 28, 30, 36], "all": [0, 3, 5, 6, 8, 9, 11, 16, 20, 22, 26, 27, 28, 30, 31, 34, 35, 36, 38, 43, 44, 47, 49], "canada": [0, 3, 8, 9, 11, 20, 22, 23, 26, 27, 28, 30, 34, 35, 36, 38, 53, 54], "ab": [0, 20], "alberta": [0, 20], "british": [0, 17, 20, 52], "columbia": [0, 17, 20, 52], "mb": [0, 20], "manitoba": [0, 20], "nb": [0, 20], "new": [0, 4, 20, 30, 33, 34, 35, 38, 41, 47], "brunswick": [0, 20], "nl": [0, 20], "newfoundland": [0, 20], "labrador": [0, 20], "n": [0, 3, 6, 9, 11, 12, 14, 16, 20, 22, 40, 50, 51, 52], "nova": [0, 20], "scotia": [0, 20], "nt": [0, 20], "northwest": [0, 20], "territori": [0, 20], "nu": [0, 20], "nunavut": [0, 20], "ON": [0, 20], "ontario": [0, 20], "pe": [0, 20], "princ": [0, 20], "edward": [0, 20], "island": [0, 20], "qc": [0, 20], "quebec": [0, 20], "sk": [0, 20], "saskatchewan": [0, 20], "yt": [0, 20], "yukon": [0, 20], "max": [0, 3, 37, 49], "ag": [0, 3, 6, 8, 9, 11, 12, 13, 15, 16, 17, 20, 22, 24, 25, 26, 27, 28, 30, 33, 34, 36, 37, 38, 39, 50, 51, 52, 53], "111": [0, 1, 16, 22, 30, 39], "maximum": [0, 5, 9, 12, 13, 15, 16, 22, 33, 34, 38, 50, 52], "person": [0, 5, 8, 9, 11, 12, 20, 21, 24, 25, 26, 27, 28, 33, 36, 37, 38, 39, 47, 52, 53], "For": [0, 2, 3, 5, 6, 8, 9, 10, 11, 13, 20, 22, 23, 26, 27, 28, 30, 35, 36, 37, 38, 40, 44, 46, 47, 49, 50, 51, 52, 53], "100": [0, 1, 3, 9, 11, 13, 17, 22, 37, 40, 51, 52], "min": [0, 3, 12, 33, 52], "year": [0, 1, 3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 52, 53], "2024": [0, 1, 20, 21, 28, 36, 54], "start": [0, 3, 6, 8, 9, 13, 15, 20, 22, 26, 27, 30, 36, 38, 40, 43, 47, 51, 52], "2001": [0, 3, 12, 22, 27, 28, 30], "time": [0, 3, 9, 20, 31, 36, 41, 44, 49, 50, 51, 52], "horizon": [0, 3], "13": [0, 1, 3, 8, 51, 52, 54], "number": [0, 3, 5, 6, 9, 11, 12, 13, 17, 20, 21, 22, 23, 24, 28, 30, 33, 34, 35, 37, 38, 40, 49, 50, 51, 52, 53], "popul": [0, 6, 9, 10, 11, 17, 22, 23, 27, 30, 38, 49, 52, 53, 54], "growth": [0, 3, 6, 9, 22, 27, 30, 38], "type": [0, 3, 5, 9, 10, 12, 13, 22, 23, 24, 27, 30, 35, 37, 38, 40, 44, 47, 49, 50, 51, 52, 53], "lg": [0, 1, 6, 9, 22, 27, 30, 38], "scenario": [0, 3, 6, 8, 9, 11, 20, 22, 27, 30, 35, 40], "past": [0, 6, 8, 10, 22, 27, 30, 38, 47, 50], "histor": [0, 22, 27, 30, 38], "data": [0, 10, 14, 18, 20, 21, 22, 23, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 49, 51, 52, 53], "low": [0, 6, 8, 9, 22, 27, 30, 35, 38, 52], "project": [0, 3, 6, 8, 9, 11, 22, 23, 27, 30, 35, 38, 40, 49, 52, 54], "hg": [0, 6, 9, 22, 27, 30, 38], "high": [0, 6, 8, 9, 22, 27, 30, 35, 38], "m1": [0, 6, 9, 22, 27, 30, 38], "medium": [0, 6, 8, 9, 22, 27, 30, 35, 38, 40], "m2": [0, 6, 9, 22, 27, 30, 38], "m3": [0, 3, 6, 8, 9, 22, 27, 30, 38], "3": [0, 1, 3, 6, 8, 9, 10, 12, 13, 15, 20, 22, 24, 25, 27, 30, 33, 36, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54], "m4": [0, 6, 9, 22, 27, 30, 38], "4": [0, 1, 3, 6, 9, 10, 12, 15, 17, 20, 22, 25, 27, 30, 33, 37, 38, 39, 40, 42, 50, 51, 52, 54], "m5": [0, 6, 9, 22, 27, 30, 38], "5": [0, 1, 3, 6, 8, 9, 12, 17, 22, 24, 25, 27, 30, 33, 35, 38, 40, 49, 50, 51, 52, 54], "m6": [0, 6, 9, 22, 27, 30, 38], "6": [0, 1, 3, 6, 9, 20, 22, 25, 27, 30, 33, 35, 37, 38, 42, 50, 51, 52, 54], "fa": [0, 6, 9, 22, 27, 30, 38], "fast": [0, 6, 9, 22, 27, 30, 38], "sa": [0, 6, 9, 22, 27, 30, 38], "slow": [0, 6, 9, 12, 22, 27, 30, 38], "see": [0, 2, 5, 9, 10, 13, 22, 23, 24, 27, 28, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 49, 51, 52], "statcan": [0, 3, 5, 6, 8, 9, 11, 22, 27, 30, 38, 49], "num": [0, 3], "birth": [0, 3, 4, 5, 11, 12, 19, 21, 30, 38, 44, 49], "initi": [0, 3, 6, 8, 12, 17, 22, 24, 28, 34, 38, 40, 41], "babi": [0, 38], "born": [0, 8, 21, 22, 38, 50], "first": [0, 3, 5, 8, 10, 11, 12, 17, 21, 22, 23, 33, 35, 38, 43, 44, 49, 50, 51, 52], "10": [0, 1, 3, 6, 8, 11, 17, 23, 24, 33, 37, 40, 41, 43, 44, 47, 51, 54], "ignor": [0, 3, 4, 44], "pollut": [0, 1, 3, 19, 20, 44, 52], "fals": [0, 6, 12, 14, 20, 23, 24, 26, 27, 28, 31, 33, 35, 36, 38, 40, 43, 44, 50], "thi": [0, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 21, 24, 28, 34, 36, 37, 38, 40, 41, 42, 43, 44, 47, 49, 50, 51, 52], "includ": [0, 3, 16, 22, 40, 44, 49, 50, 52], "air": [0, 35], "factor": [0, 3, 10, 11, 12, 14, 21, 25, 33, 35, 49], "affect": 0, "output": [0, 3, 32, 33, 37, 43, 47, 51, 52], "max_ag": [0, 1, 3, 9, 12, 13, 15, 16, 17, 22, 30, 33, 34, 38, 51], "min_year": [0, 1, 3, 5, 6, 11, 12, 13, 28, 33, 34, 38], "time_horizon": [0, 1, 3, 38], "population_growth_typ": [0, 1, 3, 22, 27, 30, 38], "num_births_initi": [0, 1, 3, 22, 38], "name": [0, 3, 5, 13, 17, 23, 31, 32, 34, 35, 41, 43, 44, 51], "directori": [0, 32, 35, 44], "where": [0, 8, 9, 10, 12, 14, 20, 24, 32, 33, 34, 40, 47, 49, 50, 51, 52, 53], "result": [0, 3, 38, 51, 52], "save": [0, 3, 5, 6, 8, 12, 13, 34, 35, 50], "simulation1": 0, "forc": 0, "path_output": 0, "destin": 0, "folder": [0, 3, 4, 32, 34, 35, 40, 41], "without": [0, 32, 52, 53], "prompt": [0, 32], "confirm": [0, 32], "overwrit": [0, 32], "ani": [0, 13, 32, 36, 43, 44, 47, 49, 52], "exist": [0, 3, 28, 32, 41], "locat": [0, 2, 44], "verbos": [0, 14], "print": [0, 3, 14, 25, 30, 36, 51], "out": [0, 3, 6, 31, 46, 47], "more": [0, 2, 5, 9, 10, 12, 13, 23, 33, 40, 46, 47, 49, 50, 52], "inform": [0, 2, 5, 9, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 46, 49, 51, 52], "about": [0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 44], "debug": [0, 44], "purpos": 0, "cpu": [0, 38], "minu": [0, 38], "one": [0, 6, 8, 12, 13, 15, 22, 27, 30, 33, 34, 35, 36, 38, 40, 44, 50, 51, 52], "By": 0, "multiprocess": [0, 38], "avail": [0, 8, 16, 38, 47, 49], "core": [0, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 22, 23, 34, 35, 38, 40], "specifi": [0, 13, 31, 34, 35, 38], "agent": [0, 19, 21, 22, 24, 25, 26, 27, 28, 29, 33, 36, 37, 38, 39, 44, 50], "mp": 0, "500": [0, 21, 38, 50], "threshold": [0, 3, 17, 24, 40, 49, 50], "ha": [0, 9, 11, 12, 20, 29, 33, 36, 37, 38, 44, 47, 49, 50, 51, 52, 53], "some": [0, 3, 49, 51, 52], "overhead": 0, "so": [0, 3, 8, 9, 11, 12, 16, 36, 44, 47, 49, 51, 52], "worth": 0, "small": 0, "less": [0, 38, 44, 49, 50], "than": [0, 3, 38, 47, 49, 50, 52], "singl": [0, 8, 11, 17, 21, 34, 40], "process": [0, 6, 13, 16, 38, 40, 53], "greater": [0, 49], "equal": [0, 49], "0": [0, 1, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 43, 49, 50, 51, 52, 53], "alwai": [0, 49, 52], "veri": [0, 9, 11, 20, 35, 37, 52], "larg": [0, 3, 44], "e": [0, 6, 8, 9, 11, 12, 15, 17, 20, 21, 22, 26, 27, 28, 30, 33, 36, 38, 39, 40, 41, 42, 44, 49, 50, 51, 52, 54], "g": [0, 6, 8, 11, 12, 15, 17, 20, 21, 22, 26, 27, 28, 30, 36, 38, 40, 49, 51, 52, 54], "1e6": 0, "never": 0, "TO": [0, 3], "would": [0, 3, 13, 17, 47, 49, 51, 52], "like": [0, 47, 49, 51, 52], "instead": [0, 3, 11, 44], "simul": [1, 2, 19, 20, 22, 30, 34, 37, 44, 46, 50, 54], "antibiotic_exposur": [1, 19, 20, 34, 44], "paramet": [1, 2, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51], "\u03b20": [1, 21, 24, 28, 33], "110": [1, 3, 12, 13, 15, 17, 33, 53, 54], "000442": 1, "\u03b2year": [1, 13, 21, 33], "055100": 1, "\u03b22005": [1, 21], "55": [1, 16], "033675": 1, "\u03b2sex": [1, 21, 24, 28, 33], "249033": 1, "\u03b8": [1, 21, 24, 40], "727": 1, "383": 1, "\u03b22005_year": [1, 21], "027437": 1, "fixyear": [1, 21], "null": 1, "\u03b2floor": [1, 21], "05": [1, 3, 8, 40, 49, 51], "census_t": [1, 23], "2021": [1, 5, 6, 8, 23, 49], "control": [1, 4, 5, 9, 19, 20, 25, 28, 34, 37, 38, 39, 44, 49, 53], "hyperparamet": [1, 24, 28, 37], "\u03b20_\u03bc": [1, 24, 28], "\u03b20_\u03c3": [1, 24, 28], "1": [1, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 24, 25, 27, 28, 29, 30, 33, 34, 36, 37, 38, 40, 43, 44, 49, 50, 53, 54], "678728": 1, "\u03b2age": [1, 24, 28, 33], "5430381": 1, "\u03b2age2": [1, 24], "4980710": 1, "\u03b2sexag": [1, 24, 33], "8161495": 1, "\u03b2sexage2": [1, 24], "1654264": 1, "2347807": 1, "3950": 1, "754": 1, "cost": [1, 19, 34, 44, 51, 54], "2372": [1, 25], "2965": [1, 25], "3127": [1, 25], "exac": [1, 9, 25], "130": [1, 25], "594": [1, 25], "2425": [1, 25], "9900": [1, 25], "exchange_rate_usd_cad": [1, 25], "66": 1, "death": [1, 4, 11, 19, 34, 38, 44], "exacerb": [1, 4, 19, 20, 25, 34, 37, 38, 39, 44, 50, 53], "0000001": 1, "\u03b20_calibr": [1, 28], "\u03b2control": [1, 28, 39], "\u03b2control_c": [1, 28], "6712824655642424": 1, "\u03b2control_pc": [1, 28], "978135285004297": 1, "\u03b2control_uc": [1, 28], "5726701768961326": 1, "initial_r": [1, 28], "347": 1, "exacerbation_sever": [1, 37], "\u03b1": [1, 12, 37], "495": [1, 3], "195": [1, 3], "283": [1, 3], "026": [1, 3, 9], "k": [1, 9, 24, 33, 37, 40, 44, 49, 50, 52], "p": [1, 8, 9, 12, 14, 16, 24, 37, 40, 49, 50, 51, 52], "25": [1, 16, 25, 31, 40, 52, 54], "\u03b2prev_hosp_p": [1, 37], "79": [1, 37, 50, 51], "\u03b2prev_hosp_adult": [1, 37], "88": [1, 37], "family_histori": [1, 19, 20, 34, 44], "2927242": 1, "incid": [1, 3, 4, 12, 13, 15, 33, 54], "00000001": 1, "34": [1, 16], "63398846": 1, "9": [1, 3, 11, 12, 17, 33, 40, 47, 51], "52017810": 1, "64423331": 1, "7": [1, 3, 12, 25, 33, 40, 51, 52, 53, 54], "73720625": 1, "63121394": 1, "90920803": 1, "39497027": 1, "01967344": 1, "45607619": 1, "70483885": 1, "61760564": 1, "79555703": 1, "95476291": 1, "\u03b2sexyear": [1, 33], "00461397": 1, "\u03b2fam_hist": 1, "12221763272424911": [1, 12], "3619942": 1, "\u03b2abx_exp": 1, "826": 1, "2920745": 1, "053": [1, 12], "63": [1, 12, 40, 51], "ssp": [1, 20, 35], "ssp1_2": [1, 20, 35], "preval": [1, 3, 4, 10, 12, 13, 15, 33, 50], "28093577": 1, "10755806": 1, "79932480805632": 1, "17989374225804": 1, "64152189395539": 1, "91796538427475": 1, "43423653685647": 1, "83586405": 1, "18097542": 1, "69209530818354": 1, "68306716462003": 1, "865308192929771": 1, "656000992252807": 1, "0270826201453694": 1, "29279956487906": 1, "036861276364171": 1, "\u03b2yearag": [1, 33], "50": [1, 3, 52], "610032709273": 1, "51236955045884": 1, "39": [1, 51], "4569160874519": 1, "69176099747937": 1, "15": [1, 3, 51], "9637932343298": 1, "79271775804693": 1, "14281869955998": 1, "18656498490802": 1, "88274672641455": 1, "3603262281752": 1, "\u03b2sexyearag": [1, 33], "19896302105009": 1, "24422362459046": 1, "7979736592919": 1, "253623898303176": 1, "11": [1, 3, 51, 54], "3848773603672": 1, "57625491419054": 1, "61284030050534": 1, "17111534541718": 1, "2128066205219": 1, "70514542334455": 1, "37662555231482536": [1, 12], "225": [1, 12], "util": [1, 3, 4, 10, 19, 20, 21, 22, 24, 34, 38, 44], "06": [1, 51], "09": [1, 17], "\u03b2exac_sev_hist": [1, 39], "006153846153846154": 1, "016923076923076923": 1, "019230769230769232": 1, "02153846153846154": 1, "main": [2, 19, 40, 41, 44], "function": [2, 5, 8, 10, 11, 14, 16, 17, 33, 37, 38, 40, 41, 44, 50], "via": [2, 34, 42, 44], "present": [3, 9, 13, 21, 34], "lifetim": [3, 54], "outcom": [3, 17, 34, 38, 52, 54], "object": [3, 10, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40], "compar": 3, "kei": [3, 12, 13, 21, 24, 28, 33, 35, 37, 39], "current": [3, 8, 10, 11, 12, 15, 20, 25, 28, 32, 33, 34, 37, 38, 39, 41, 44], "python": [3, 31, 40, 41, 42, 43, 44, 50, 51, 52], "version": [3, 41, 42, 43, 44, 47], "observ": [3, 9, 50, 51, 52], "target": [3, 10, 12, 14, 51, 52], "taregt": 3, "demograph": 3, "trend": [3, 21], "risk": [3, 10, 12, 14, 33, 49], "distribut": [3, 9, 21, 24, 28, 29, 37, 50], "relat": [3, 49, 52, 53], "health": [3, 5, 9, 12, 14, 49, 52, 53, 54], "A": [3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 52, 53, 54], "sampl": [3, 17, 50, 51], "wa": [3, 8, 9, 12, 16, 20, 21, 23, 32, 35, 36, 50, 53], "gener": [3, 5, 8, 9, 11, 12, 13, 15, 16, 18, 38, 40, 41, 42, 44, 47, 50], "load_ext": [3, 51], "autoreload": [3, 51], "import": [3, 17, 21, 22, 23, 24, 25, 29, 30, 36, 37, 38, 50, 51], "plotli": [3, 51], "io": [3, 51], "pio": [3, 51], "render": [3, 51], "sphinx_galleri": [3, 51], "comment": 3, "vscode": 3, "express": [3, 12, 51], "px": [3, 51], "o": [3, 41], "panda": [3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 22, 23, 34, 35, 38, 40, 51], "pd": [3, 11, 22, 51], "pathlib": [3, 13, 32, 34, 35, 38, 40], "data_gener": [3, 4, 42], "exacerbation_data": 3, "load_population_data": [3, 9], "get_data_path": [3, 21, 22, 24, 38, 40], "plot": [3, 13], "templat": 3, "plotly_whit": 3, "toimagebuttonopt": 3, "format": [3, 9, 12, 16, 17, 23, 31, 40, 43, 49, 52, 53], "png": [3, 13], "scale": [3, 35, 51], "suffici": 3, "size": [3, 10, 17, 40], "get": [3, 5, 8, 11, 13, 17, 22, 30, 32, 34, 38, 40, 42, 47], "meaning": [3, 51], "take": [3, 12, 35, 52], "too": 3, "long": [3, 6], "practic": [3, 49], "call": [3, 8, 10, 31, 32, 39, 49, 51, 52], "jupyt": [3, 42], "outcome_matrix": [3, 19, 38, 44], "analysi": [3, 13, 49, 50, 52, 54], "infeas": 3, "seper": 3, "csv": [3, 5, 6, 8, 11, 12, 13, 22, 27, 28, 30, 33, 34, 35, 36, 39, 40], "open": [3, 21, 24, 35, 41, 47], "termin": [3, 44, 47], "starting_year": [3, 9, 13, 15, 22, 26, 27, 30, 36], "simulation_length": 3, "growth_typ": 3, "n_birth": [3, 5, 6, 22, 49], "note": [3, 49], "scheme": 3, "leap_output": [3, 32], "instanc": [3, 34], "follow": [3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 26, 28, 33, 35, 36, 37, 38, 39, 42, 44, 49, 50, 52, 53], "5000": [3, 5], "true": [3, 6, 8, 12, 20, 21, 23, 25, 26, 27, 29, 31, 33, 35, 37, 38, 40, 41, 43, 44, 50, 51], "max_year": [3, 5, 9, 12, 13, 15, 33, 34], "2015": 3, "Then": [3, 11, 17, 43, 50], "deafult": 3, "notebook_path": 3, "getcwd": 3, "leap_root": 3, "parent": [3, 12, 33, 52], "run_bundle_nam": 3, "sample_leap_output": 3, "30": [3, 25, 51, 53], "replac": [3, 21], "contain": [3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 52], "run_bundle_fold": 3, "f": [3, 5, 8, 9, 11, 12, 13, 15, 16, 17, 24, 25, 26, 27, 30, 33, 36, 38, 39, 40, 42, 49, 51, 52, 53], "bundl": 3, "relative_to": 3, "els": [3, 17], "rais": [3, 34, 40], "filenotfounderror": 3, "doe": [3, 8, 9, 11, 36, 38, 50], "across": [3, 15, 34], "select": [3, 8, 28], "grei": 3, "solid": [3, 51], "statist": [3, 8, 23, 54], "black": 3, "dash": [3, 51], "read": [3, 35], "target_pop_df_raw": 3, "projection_scenario": [3, 6, 8, 9, 11, 22, 40], "min_ag": [3, 9, 11, 13, 15, 51], "model_pop_df_raw": 3, "read_csv": 3, "outcome_matrix_al": 3, "renam": [3, 50], "column": [3, 5, 6, 8, 9, 11, 12, 13, 15, 16, 21, 22, 23, 26, 28, 33, 34, 35, 36, 38, 39, 49, 50, 51, 52, 53], "clariti": 3, "target_pop_df": 3, "n_alive_target": 3, "filter": [3, 6, 31, 34], "onli": [3, 4, 8, 12, 16, 23, 35, 44, 50, 52], "date": [3, 35, 47, 50, 51], "after": [3, 10, 36, 49, 51, 53], "chosen": 3, "model_pop_df": 3, "n_aliv": 3, "n_alive_model": 3, "merg": 3, "population_df": 3, "sex": [3, 5, 8, 9, 11, 12, 13, 15, 16, 17, 20, 21, 24, 25, 26, 27, 28, 30, 33, 34, 36, 38, 39, 40, 49, 50, 51, 52, 53], "calcul": [3, 8, 9, 10, 11, 12, 15, 33, 50, 52], "match": [3, 8], "total_target": 3, "groupbi": 3, "agg": 3, "sum": [3, 10, 34, 38, 50], "reset_index": 3, "valu": [3, 6, 9, 10, 11, 12, 13, 16, 17, 21, 24, 28, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 52, 53], "total_model": 3, "scale_factor": 3, "inplac": [3, 51], "drop": [3, 51], "over": [3, 6, 17, 49, 50], "df": [3, 5, 11, 12, 13, 35, 40, 51], "copi": [3, 21, 23, 29, 35, 47, 51], "2010": [3, 38], "2020": [3, 8, 11, 50, 54], "2025": [3, 12, 15, 51], "2030": 3, "isin": 3, "fig": [3, 51], "x": [3, 9, 17, 40, 47, 49, 50, 51, 52], "y": [3, 8, 9, 13, 17, 24, 40, 43, 47, 49, 50, 51, 52, 54], "facet_col": [3, 51], "facet_col_wrap": 3, "titl": [3, 13, 51], "comparison": 3, "br": 3, "label": [3, 10, 50], "color_discrete_sequ": 3, "999999": 3, "height": [3, 13], "1000": [3, 5, 13, 30, 37], "width": [3, 13], "850": 3, "facet_row_spac": 3, "facet_col_spac": 3, "fig_target": 3, "line_dash_sequ": 3, "add_trac": [3, 51], "updat": [3, 4, 6, 8, 12, 38, 41, 42, 52], "showlegend": [3, 51], "len": [3, 51], "update_xax": [3, 51], "title_text": [3, 51], "ntick": 3, "update_layout": [3, 51], "legend_title_text": 3, "title_x": 3, "title_i": 3, "95": [3, 40], "margin": [3, 17, 37, 52], "dict": [3, 10, 12, 13, 21, 23, 24, 25, 28, 29, 32, 33, 34, 37, 38, 39], "t": [3, 8, 13, 21, 32, 33, 39, 44, 47, 49, 51, 52, 53, 54], "150": [3, 37, 52], "adjust": 3, "top": 3, "show": [3, 40, 51], "left": [3, 8, 12, 49, 52], "male": [3, 5, 6, 8, 9, 11, 12, 13, 16, 17, 21, 22, 24, 26, 27, 28, 30, 33, 36, 49, 50, 52, 53], "right": [3, 8, 12, 49, 52], "femal": [3, 5, 8, 9, 11, 12, 13, 16, 17, 21, 24, 25, 26, 27, 28, 30, 33, 36, 49, 50, 52, 53], "target_mortality_df_raw": 3, "life_t": [3, 8, 11, 26], "model_mortality_df_raw": 3, "outcome_matrix_death": 3, "model_alive_df_raw": 3, "8": [3, 10, 12, 33, 40, 50, 51, 52, 54], "under": [3, 17, 41], "80": 3, "target_mortality_df": 3, "model_mortality_df": 3, "model_alive_df": 3, "each": [3, 6, 8, 10, 11, 12, 14, 17, 21, 22, 23, 24, 26, 28, 33, 34, 35, 36, 37, 39, 40, 41, 50, 52], "row": [3, 12, 21], "rate": [3, 9, 10, 21, 22, 25], "n_death": 3, "prob_death": [3, 8, 11], "df_target": 3, "facet_row": 3, "graph": 3, "probabl": [3, 8, 9, 10, 11, 12, 14, 15, 17, 21, 24, 25, 26, 27, 29, 30, 36, 37, 40, 50, 51], "dy": 3, "between": [3, 8, 9, 10, 11, 13, 14, 22, 27, 30, 35, 50, 51, 52], "800": [3, 13], "df_emigration_model": 3, "outcome_matrix_emigr": 3, "df_immigration_model": 3, "outcome_matrix_immigr": 3, "df_im": 3, "n_emigr": [3, 11], "migrat": [3, 4, 27, 30], "blue": 3, "fig_im": 3, "n_immigr": [3, 11, 30], "orang": [3, 51], "update_yax": 3, "total": [3, 5, 6, 10, 11, 16, 17, 20, 25, 30, 35, 38, 40, 49, 52], "col": 3, "prescript": [3, 5, 12, 49], "red": 3, "dot": 3, "base": [3, 10, 11, 12, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 52, 54], "administr": [3, 23, 52], "databas": [3, 9], "respect": [3, 52], "floor": 3, "per": [3, 5, 9, 13, 23, 49, 52], "purpl": 3, "12": [3, 51], "ministri": [3, 5, 12, 14, 49, 52], "target_abx_df": 3, "infantabxbc": 3, "map": [3, 13, 35, 49, 52], "m": [3, 5, 8, 9, 11, 12, 13, 15, 16, 17, 26, 27, 33, 36, 38, 39, 40, 43, 44, 47, 49, 51, 52, 53, 54], "model_abx_df_raw": 3, "outcome_matrix_antibiotic_exposur": 3, "addit": [3, 49, 50, 52], "comparisson": 3, "model_infant_alive_df_raw": 3, "model_infant_death_df_raw": 3, "model_infant_emigration_df_raw": 3, "dataset": [3, 4, 50, 51], "model_abx_df": 3, "n_antibiotic_exposur": 3, "comput": [3, 9, 10, 11, 12, 14, 17, 21, 24, 25, 28, 30, 31, 33, 35, 37, 39, 40, 44, 50, 52, 53], "14": [3, 51, 52], "color_map": 3, "09bfc4": 3, "f39c12": 3, "cours": [3, 5, 12, 21, 33, 49, 52], "life": [3, 5, 8, 12, 21, 26, 33, 38, 39, 49, 52, 53], "color": [3, 31, 51], "color_discrete_map": 3, "600": 3, "for_each_trac": 3, "lambda": [3, 9, 12, 14, 33, 51, 52], "add_hlin": 3, "line_dash": 3, "line_color": 3, "well": [3, 20, 24, 49, 51, 52], "partial": [3, 9, 20, 24, 28, 50], "uncontrol": [3, 9, 20, 24, 28, 39, 50], "df_model_control": 3, "outcome_matrix_control": 3, "16": 3, "target_control": 3, "18": [3, 16, 50, 53], "partially_control": [3, 24, 39], "47": 3, "well_control": 3, "35": [3, 16], "categori": [3, 6, 11, 22], "aggreg": [3, 35], "prob": [3, 8, 12, 15, 36], "pivot": 3, "index": [3, 10, 12, 35, 38, 41, 50, 51, 52], "rename_axi": 3, "axi": [3, 51], "normal": [3, 24, 28, 33, 50], "appli": [3, 17, 40, 50, 51], "melt": 3, "datafram": [3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 21, 22, 23, 27, 28, 30, 33, 34, 35, 36, 38, 40, 51], "id_var": 3, "value_var": 3, "var_nam": [3, 17], "control_level": [3, 20, 24, 25, 28, 38, 50], "value_nam": 3, "17": [3, 6, 16, 40], "darkorang": 3, "_": [3, 9, 52], "proport": [3, 6, 10, 11, 17, 22, 30, 50, 52], "spent": [3, 9, 50], "rang": [3, 5, 8, 10, 12, 15, 16, 22, 27, 30, 39, 49, 51, 52, 53], "mild": [3, 20, 37, 39], "green": [3, 35], "moder": [3, 20, 37, 39], "df_model_exac_sever": 3, "outcome_matrix_exacerbation_by_sever": 3, "19": [3, 51], "target_exac_sever": 3, "very_sever": [3, 37, 39], "p_exacerb": 3, "20": [3, 11, 40, 51, 54], "admiss": 3, "000": [3, 9, 51], "21": [3, 51], "cihi": [3, 9], "target_hosp_df_raw": 3, "original_data": [3, 6, 8], "asthma_hosp": 3, "tab1_rat": 3, "model_hosp_df_raw": 3, "outcome_matrix_exacerbation_hospit": 3, "22": [3, 51], "target_hosp_df": 3, "fiscal_year": 3, "fo": 3, "larger": 3, "combin": [3, 5, 10, 12, 33, 34, 49, 52], "miss": [3, 16], "non": [3, 40, 49, 52], "posit": [3, 40, 52], "dropna": 3, "subset": 3, "model_hosp_df": 3, "group": [3, 6, 11, 13, 16, 17, 21, 22, 23, 26, 27, 28, 30, 33, 34, 35, 36, 39, 44, 52], "h_rate": 3, "n_hospit": 3, "100000": [3, 21], "23": 3, "due": [3, 9, 11, 25, 34, 35, 37, 39, 53], "In": [4, 5, 9, 12, 38, 42, 44, 47, 49, 50, 51, 52, 53], "modul": [4, 19, 41, 44, 49], "we": [4, 5, 6, 8, 9, 10, 11, 12, 14, 17, 23, 38, 40, 41, 43, 44, 47, 49, 50, 51, 52, 53], "need": [4, 8, 12, 41, 42, 43, 44, 47, 49, 50, 52], "run": [4, 6, 8, 9, 11, 12, 13, 16, 34, 38, 41, 42, 43, 44, 46], "onc": [4, 8, 46, 47, 50], "user": [4, 23, 32], "mai": [4, 31, 49, 50, 51, 52], "It": [4, 10, 12, 14, 22, 40, 44, 49, 53], "mainli": 4, "develop": [4, 35, 42, 46, 49, 54], "refer": [4, 20, 23, 24], "ad": [4, 13, 21, 35, 37, 49], "antibiot": [4, 10, 12, 17, 20, 21, 33, 34, 54], "calibr": [4, 8, 28, 52], "occurr": [4, 15, 19, 44], "reassess": [4, 10, 12, 19, 38, 44], "estimate_alpha": 5, "frame": [5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 21, 22, 23, 26, 34, 35, 36, 38, 39, 40], "formula": [5, 8, 9, 13, 51, 53], "str": [5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 20, 22, 23, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 52, 53], "offset": [5, 40], "numpi": [5, 8, 10, 12, 13, 14, 17, 24, 25, 35, 37, 40], "ndarrai": [5, 8, 10, 12, 13, 14, 17, 24, 25, 35, 37, 40], "maxit": [5, 13, 51], "int": [5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 20, 21, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 52, 53], "float": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 23, 24, 25, 26, 28, 29, 33, 34, 35, 36, 37, 39, 40, 50, 52, 53], "sourc": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47], "estim": [5, 22, 50, 51], "alpha": [5, 9, 12, 13, 14, 33, 40, 52], "neg": [5, 12, 21], "binomi": [5, 12, 21, 51], "dispers": 5, "dfrac": [5, 8, 9, 17, 49, 50, 51, 52], "theta": [5, 49, 51], "sigma": [5, 8, 12, 14, 33, 49, 50, 51, 52], "mu": [5, 49, 50, 51, 52], "fit": [5, 12, 13, 49, 51, 52], "glm": [5, 13, 49, 52], "statsmodel": [5, 12, 13, 51], "document": [5, 13, 45, 47, 52], "desir": [5, 8], "iter": [5, 13, 20, 35, 38, 51], "perform": [5, 9, 13], "while": [5, 13], "return": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 49], "load_birth_data": 5, "2000": [5, 9, 12, 13, 21, 22, 26, 27, 30, 36, 49, 52], "2018": [5, 49], "load": [5, 6, 8, 9, 12, 13, 15, 16, 21, 22, 23, 24, 26, 27, 28, 30, 33, 35, 36, 51], "minimum": [5, 9, 11, 12, 13, 15, 21, 28, 34, 38, 40, 50], "an": [5, 9, 10, 12, 17, 20, 21, 24, 26, 27, 29, 33, 34, 35, 36, 37, 38, 40, 47, 49, 50, 51, 52, 53, 54], "integ": [5, 8, 9, 11, 12, 17, 20, 21, 22, 23, 27, 28, 30, 33, 36, 37, 39, 52], "1999": [5, 6, 15, 49], "stratifi": 5, "calendar": [5, 6, 8, 11, 13, 15, 20, 21, 22, 26, 27, 28, 30, 33, 38], "given": [5, 6, 8, 9, 11, 12, 15, 16, 17, 21, 22, 23, 24, 26, 27, 28, 30, 33, 34, 35, 36, 37, 38, 40, 49, 50, 51, 52, 53], "load_antibiotic_data": 5, "dose": [5, 12, 33, 52], "dispens": 5, "infant": [5, 12, 49, 54], "censu": [5, 20, 23, 35, 40, 49], "n_abx": [5, 12, 21, 49], "generate_antibiotic_model": 5, "df_abx": 5, "heavisid": [5, 17, 49], "2005": [5, 21, 49], "genmod": [5, 12, 13], "generalized_linear_model": [5, 12, 13], "glmresultswrapp": [5, 12, 13], "linear": 5, "famili": [5, 10, 12, 20, 29, 33, 34, 51], "predict": [5, 6, 8, 9, 12, 13, 14, 15, 49, 51, 52], "detail": [5, 10, 12, 23, 51], "exposur": [5, 10, 12, 17, 21, 33, 54], "varianc": [5, 49, 50], "get_predicted_abx_data": 5, "2019": [5, 11, 13, 52, 54], "dure": [5, 11, 12, 21, 33, 36, 49, 50, 52], "prescrib": [5, 49], "infanc": [5, 12, 17, 52], "n_abx_\u03bc": 5, "generate_antibiotic_data": 5, "return_typ": 5, "otherwis": [5, 6, 12, 13, 26, 27, 31, 33, 50, 52], "obtain": [6, 8, 9, 11, 33, 49, 50, 52, 53], "two": [6, 8, 11, 12, 20, 23, 24, 34, 44, 50, 52], "tabl": [6, 8, 10, 17, 21, 22, 23, 26, 27, 28, 30, 33, 34, 36, 39, 51, 53, 54], "00005": 6, "01": [6, 8, 16, 21, 23, 40], "download": [6, 8, 23, 42, 47], "here": [6, 8, 9, 17, 43, 51], "17100005": 6, "eng": [6, 8], "zip": [6, 8, 43, 51], "2065": [6, 9, 12, 15, 22, 27, 30], "futur": [6, 8, 35, 49, 52], "0057": 6, "17100057": 6, "cd": [6, 8, 9, 11, 12, 13, 16, 41, 42, 44, 47], "python3": [6, 8, 9, 11, 12, 13, 16, 47], "py": [6, 8, 9, 10, 11, 12, 13, 14, 16, 43, 44], "birth_estim": [6, 22], "initial_pop_distribution_prop": [6, 11, 22], "get_projection_scenario_id": 6, "convert": [6, 10, 17, 35, 40, 42, 49, 50], "form": [6, 9, 49, 52], "id": [6, 23, 38, 43, 50], "filter_age_group": 6, "age_group": [6, 13, 17], "bool": [6, 8, 12, 14, 20, 21, 23, 24, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 40], "median": 6, "averag": [6, 9, 13, 35], "string": [6, 8, 9, 11, 17, 22, 26, 27, 28, 30, 31, 36, 40], "load_past_births_population_data": 6, "prop_mal": [6, 22], "load_projected_births_population_data": 6, "load_past_initial_population_data": 6, "n_age": [6, 11], "peopl": [6, 9, 11, 17, 22, 34, 52], "prop": [6, 22], "load_projected_initial_population_data": 6, "generate_birth_estimate_data": 6, "generate_initial_population_data": 6, "mortal": 8, "1996": 8, "00837": 8, "13100837": 8, "2068": 8, "doesn": [8, 32, 39, 52], "annual": 8, "specif": [8, 44, 47, 49, 50], "2043": 8, "equat": [8, 9, 10, 12, 14, 33, 49, 51], "": [8, 9, 17, 20, 21, 31, 33, 34, 38, 39, 47, 49, 51, 52, 53, 54], "y_0": [8, 23], "beta": [8, 12, 13, 14, 51], "invers": 8, "sigmoid": [8, 40], "also": [8, 12, 13, 17, 42, 49, 50, 52], "known": 8, "logit": [8, 14], "ln": [8, 9], "collect": [8, 9, 23, 35, 40, 52], "end": [8, 9, 12, 15, 33, 40, 50, 52], "our": [8, 12, 49, 50, 51, 52, 53], "case": [8, 10, 12, 33, 38, 40, 49, 50, 51, 52], "unknown": [8, 52], "do": [8, 9, 11, 12, 17, 44, 47, 49, 50, 51, 52], "text": [8, 9, 12, 31, 33, 49, 50, 51, 52, 53], "calibration_year": 8, "brent": 8, "root": [8, 44], "find": [8, 12, 14, 23, 35, 36, 51, 52], "algorithm": [8, 14, 52], "optim": [8, 12, 14, 51], "expect": [8, 9, 50, 51], "have": [8, 10, 11, 12, 13, 15, 17, 34, 36, 37, 38, 39, 40, 46, 47, 49, 51, 52, 53], "calculate_life_expect": 8, "determin": [8, 12, 17, 20, 23, 26, 27, 29, 31, 33, 36, 37, 50, 52], "delin": 8, "definit": 8, "indic": [8, 11, 12, 13, 14, 22, 23, 26, 27, 28, 30, 33, 34, 36, 37, 38, 40, 50, 51, 52, 53], "get_prob_death_project": 8, "year_initi": 8, "beta_year": 8, "_0": 8, "last": [8, 47, 50], "get_projected_life_table_single_year": 8, "beta_year_optim": 8, "df_calibr": 8, "differ": [8, 9, 10, 12, 14, 15, 40, 44, 49, 50, 51, 52], "scipi": [8, 40], "brentq": 8, "want": [8, 12, 13, 14, 17, 23, 44, 47, 49, 51, 52], "close": [8, 52], "possibl": [8, 52], "leastsq": 8, "requir": [8, 9, 41, 42, 43, 44, 49], "1d": 8, "arrai": [8, 17, 24, 33, 35, 37, 40], "1988": 8, "2073": 8, "mortality_scenario": 8, "lm": 8, "mm": 8, "hm": 8, "life_expect": 8, "load_past_death_data": 8, "standard": [8, 16, 23, 24, 28, 39, 53], "error": [8, 44], "die": [8, 11, 38], "se": 8, "load_projected_death_data": 8, "get_projected_death_data": 8, "past_life_t": 8, "x0": 8, "02": 8, "xtol": 8, "1e": 8, "guess": 8, "toler": 8, "generate_death_data": 8, "to_csv": 8, "poisson": [9, 49, 51], "begin": [9, 12, 33, 50, 52], "align": [9, 50], "n_": [9, 17], "sim": [9, 54], "regress": [9, 14, 24, 40, 49, 52], "assum": [9, 11, 32, 49, 50, 51], "interest": [9, 35, 52], "approxim": 9, "beta_0": [9, 12, 14, 49, 50, 51], "beta_": [9, 12, 14, 33, 49, 50, 51, 52], "sum_": [9, 12, 14, 33, 50, 52], "beta_i": 9, "c_i": 9, "multipli": [9, 21, 25, 30, 33, 39, 52], "beta_a": 9, "constant": [9, 12, 21, 24, 28, 33, 52], "rel": [9, 11, 22, 30], "level": [9, 10, 12, 14, 20, 24, 25, 28, 31, 34, 35, 37, 39, 50, 53], "rewrit": [9, 52], "mean": [9, 12, 24, 28, 35, 49, 50, 51, 52], "becom": 9, "appar": 9, "cdot": [9, 12, 14, 33, 49, 50, 52, 53], "prod_": 9, "how": [9, 20, 24, 49, 51, 52, 53], "again": [9, 47, 52], "same": [9, 11, 13, 34, 49, 50], "lambda_": 9, "c": [9, 10, 17, 51, 54], "gamma_i": 9, "lambda_c": 9, "abov": [9, 12, 16, 47, 49, 52], "were": [9, 17, 50, 52, 53], "econom": [9, 53, 54], "burden": [9, 54], "asthma": [9, 10, 12, 13, 14, 15, 17, 20, 24, 25, 28, 29, 33, 34, 36, 37, 38, 39, 49, 53, 54], "eba": 9, "studi": [9, 12, 50, 51, 52, 54], "gamma_1": 9, "1880058": 9, "fulli": [9, 20, 24, 50], "gamma_2": 9, "3760116": 9, "gamma_3": 9, "5640174": 9, "pred": 9, "hospit": [9, 20, 34, 37], "hosp": 9, "patient": [9, 37, 50, 52], "final": [9, 12, 50, 52], "exacerbation_predict": 9, "gamma_control": 9, "list": [9, 10, 12, 13, 14, 17, 22, 24, 25, 33, 34, 35, 38, 40, 51], "90": [9, 11], "three": [9, 10, 20, 24, 40, 50], "parse_sex": 9, "reformat": 9, "exampl": [9, 10, 11, 13, 17, 20, 21, 22, 24, 25, 27, 29, 30, 32, 35, 36, 37, 38, 40, 44, 47, 49, 53], "either": [9, 13, 17, 32, 35, 38, 39, 40, 52], "np": [9, 12, 24, 40], "nan": 9, "parse_ag": 9, "pars": [9, 17], "f_90": 9, "m_1": 9, "load_hospitalization_data": 9, "morbid": 9, "hmdb": 9, "canadian": [9, 20, 23, 25], "institut": 9, "diagnos": [9, 10, 12, 15, 20, 33, 34, 36, 50, 52], "made": 9, "older": 9, "hospitalization_r": 9, "birth_data": [9, 11], "script": 9, "exacerbation_calibr": [9, 28], "prob_hosp": 9, "ratio": [9, 10, 12, 14, 17, 22, 33, 52, 54], "sever": [9, 19, 20, 25, 34, 39, 44], "defin": [9, 11, 50, 51, 52], "calibrator_multipli": [9, 28], "generate_exacerbation_calibration_data": 9, "helper": [10, 14, 47], "occurrence_calibration_data": [10, 14], "compute_contingency_t": 10, "risk_factor_prob": [10, 12, 14], "odds_ratio_target": [10, 12, 14], "asthma_prev_calibr": 10, "sample_s": 10, "10000000000": 10, "contingencyt": [10, 17], "conting": [10, 17], "histori": [10, 12, 20, 28, 29, 33, 34, 37, 39, 50], "metafor": [10, 17], "packag": [10, 40, 41, 42, 43, 46, 47], "odd": [10, 12, 14, 17, 33, 52, 54], "vector": [10, 12, 14, 17, 25, 33, 37, 39, 40, 52], "\u03bb": [10, 12, 14, 23, 52], "dictionari": [10, 12, 13, 21, 24, 28, 31, 32, 33, 34, 37, 39], "repres": [10, 12, 17, 20, 33, 50, 52, 53], "correspond": [10, 23, 34, 35], "risk_set": [10, 12], "special": 10, "entri": [10, 17, 21, 28, 32], "b": [10, 17, 51, 54], "d": [10, 12, 17, 33, 44, 52, 54], "compute_odds_ratio": 10, "contingency_table_past": 10, "asthma_incidence_0": 10, "asthma_incidence_\u03bb": 10, "ra_target": 10, "individu": [10, 12, 16, 33, 50, 53], "previous": [10, 12, 36, 37], "maintain": [10, 12, 15, 36], "diagnosi": [10, 12, 15, 17, 33, 36, 38, 50], "mis_dx": 10, "numer": 10, "misdiagnosi": [10, 36], "dx": [10, 52], "compute_odds_ratio_differ": 10, "risk_factor_prob_past": 10, "odds_ratio_target_past": 10, "asthma_prev_calibrated_past": 10, "asthma_inc_calibr": 10, "log": [10, 12, 14, 31, 33, 49, 51, 52], "inc_correction_calcul": 10, "asthma_inc_target": 10, "asthma_prev_target_past": 10, "tupl": [10, 11, 12, 13, 17, 23, 38, 40], "correct": [10, 12, 14, 33, 40, 47, 51], "previou": [10, 11, 12, 15, 20, 28, 37, 44, 52], "asthma_inc_correct": 10, "immigr": [11, 19, 34, 38, 44], "emigr": [11, 19, 34, 38, 44], "broken": 11, "down": [11, 52], "necessari": [11, 44], "etc": [11, 20, 38, 51], "exact": 11, "death_data": 11, "along": [11, 52], "net": [11, 52, 53], "anyon": 11, "chang": [11, 43, 44, 49, 50, 52], "subtract": [11, 53], "who": [11, 17, 22, 34, 38, 50, 52], "di": [11, 17, 26, 34, 54], "delta_n": 11, "n_prev": 11, "get_prev_year_popul": 11, "seri": [11, 17, 34], "within": [11, 23, 44], "get_delta_n": 11, "live": [11, 23], "get_n_migr": 11, "todo": [11, 20, 21, 28, 34, 50], "wrong": 11, "led": 11, "being": [11, 24, 37, 50], "inaccur": 11, "appear": 11, "though": 11, "lot": 11, "remedi": [11, 37], "separ": [11, 41, 44, 47, 52], "pr": 11, "load_migration_data": 11, "prop_immigrants_birth": [11, 30], "prop_immigrants_year": [11, 30], "second": [11, 13, 17, 23, 44, 51, 52], "prop_emigrants_birth": 11, "prop_emigrants_year": 11, "generate_migration_data": 11, "asthma_occurrence_correct": [12, 33], "xxxx": [12, 49, 52], "2026": 12, "term": [12, 14, 24, 28, 33, 51], "rerun": [12, 41], "add": [12, 13, 35, 38, 41, 43, 44], "retrain": 12, "describ": [12, 49, 51, 52], "occurrence_calibration_paramet": 12, "\u03b2_fhx_age": 12, "6445257": 12, "\u03b2_abx_ag": 12, "2968535": 12, "could": [12, 35, 36], "up": [12, 41, 47, 50], "24": [12, 16], "hour": 12, "get_asthma_occurrence_predict": 12, "occurrence_typ": [12, 33], "max_asthma_ag": [12, 15, 33], "62": [12, 15, 25, 54], "stabilization_year": [12, 15], "when": [12, 15, 21, 37, 38, 41, 43, 44, 47, 49, 50, 52], "stabil": [12, 15], "occur": [12, 15, 49], "load_occurrence_data": 12, "load_reassessment_data": 12, "code": [12, 15, 41, 42], "someon": [12, 15, 52], "load_family_history_data": 12, "\u03b2_fam_histori": 12, "\u03b2_fhx_0": 12, "fam_histori": 12, "whether": [12, 20, 23, 24, 26, 29, 32, 33, 34, 36, 37, 38, 40, 50, 53], "neither": [12, 33, 52], "odds_ratio": 12, "child": [12, 52], "load_abx_exposure_data": 12, "\u03b2_abx": [12, 33], "\u03b2_abx_0": 12, "\u03b2_abx_dos": 12, "taken": [12, 33, 50, 52], "abx_dos": [12, 33, 52], "compute_antibiotic_dose_prob": 12, "model_abx": 12, "calculate_odds_ratio_abx": [12, 33], "omega": [12, 33, 52], "d_": [12, 17, 33, 52, 53], "abx_0": [12, 33, 52], "abx_ag": [12, 33, 52], "leq": [12, 33, 49, 50, 52], "abx_xxx": [12, 33, 52], "coeffici": [12, 33, 50, 51, 52], "calculate_odds_ratio_fam_histori": [12, 33], "fam_hist": [12, 33], "\u03b2_fam_hist": [12, 33], "calculate_odds_ratio_risk_factor": 12, "\u03b2_risk_factor": 12, "abx": [12, 52], "risk_factor_gener": 12, "abx_exposur": 12, "odds_ratio_abx": 12, "odds_ratio_fam_histori": 12, "class": [12, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44], "resultspreval": 12, "\u03b2": 12, "\u03b6_\u03bb": 12, "\u03b6": 12, "calibrate_asthma_preval": 12, "df_preval": 12, "goal": [12, 50, 51], "asthma_prev_risk_factor_param": [12, 14], "order": [12, 42, 44, 50], "minim": [12, 14, 52], "delta": 12, "zeta": [12, 14, 52], "eta": [12, 14, 33, 49, 51, 52], "asthma_prev_target": [12, 14], "write": [12, 51], "zeta_": [12, 14, 33, 52], "alreadi": [12, 47], "know": [12, 17, 50], "omega_": [12, 14, 33, 52], "put": 12, "everyth": 12, "togeth": 12, "gamma": [12, 51], "resultsincid": 12, "\u03b6_prev_\u03bb": 12, "liter": 12, "inc": [12, 52], "past_prev": 12, "calibrate_asthma_incid": 12, "df_incid": 12, "82581": [12, 52], "float64": [12, 24, 40, 51], "consid": [12, 16, 50, 52], "compute_mean_diff_log_or": 12, "\u03b2_risk_factors_ag": 12, "df_reassess": 12, "beta_params_age_optim": 12, "baseline_year": 12, "baselin": [12, 39, 51, 53], "generate_occurrence_calibration_data": 12, "retrain_beta": 12, "re": 12, "load_asthma_df": 13, "befor": [13, 31, 47, 49, 50, 51, 52], "exclud": [13, 44, 50], "generate_occurrence_model": 13, "df_asthma": [13, 15], "occ_typ": 13, "generate_incidence_model": 13, "generate_prevalence_model": 13, "polynomi": [13, 33, 40, 51], "norm2": [13, 40], "get_predicted_data": 13, "pred_col": 13, "store": [13, 32, 44], "plot_occurr": 13, "file_path": [13, 35, 40], "year_interv": 13, "argument": [13, 38], "y_pred": 13, "alongsid": 13, "actual": 13, "_pred": 13, "append": [13, 31], "incidence_pr": 13, "displai": [13, 40, 52], "interv": [13, 49, 50, 52], "don": [13, 47, 52], "everi": [13, 44, 50], "add_beta_paramet": 13, "parameter_map": 13, "field": 13, "param": [13, 17], "access": [13, 47], "iloc": 13, "generate_occurrence_data": 13, "asthma_occurrence_predict": 13, "figur": [13, 40], "asthma_incidence_predict": 13, "asthma_prevalence_predict": 13, "get_asthma_prevalence_correct": 14, "shape": [14, 23], "compute_asthma_prevalence_\u03bb": 14, "\u03b2_0": 14, "intercept": [14, 50, 51], "logist": [14, 50, 52], "compute_asthma_preval": 14, "asthma_prev_\u03bb": 14, "compute_asthma_prevalence_differ": 14, "absolut": [14, 52], "optimize_prevalence_\u03b2_paramet": 14, "bfg": [14, 52], "boolean": [14, 34, 53], "trace": 14, "should": [14, 15, 31, 34, 44, 49, 52], "get_asthma_df": 15, "accur": 15, "make": [15, 41, 44, 47, 50, 52], "calculate_reassessment_prob": 15, "prevalence_past": 15, "prevalence_curr": 15, "incidence_curr": 15, "get_reassessment_data": 15, "generate_reassessment_data": 15, "load_eq5d_data": 16, "eq": [16, 39, 53, 54], "5d": [16, 39, 53, 54], "origin": [16, 35, 43, 44, 51], "excel": 16, "variabl": [16, 17, 37, 40, 49, 50, 51, 52], "1207": 16, "662": 16, "545": 16, "eq5d": [16, 39], "sd": [16, 39, 53], "44": [16, 17], "45": [16, 24], "54": [16, 40], "64": 16, "65": [16, 17], "74": [16, 50], "75": [16, 40], "lt": [16, 53], "educ": [16, 54], "deviat": [16, 24, 28, 39, 53], "interpolate_eq5d": 16, "eq5d_upp": 16, "age_upp": 16, "interpol": [16, 53], "below": [16, 44, 49], "upper": [16, 17, 49, 52], "limit": [16, 37, 49, 50], "interpolate_eq5d_data": 16, "df_util": 16, "fill": 16, "now": [16, 47, 49, 51, 52], "sinc": [16, 49, 50, 52, 53], "generate_eq5d_data": 16, "get_province_id": 17, "full": [17, 23, 34, 35, 40, 54], "length": [17, 33, 37, 51], "get_sex_id": 17, "charact": 17, "parse_age_group": 17, "lower": [17, 47], "format_age_group": 17, "upper_age_group": 17, "step": [17, 31, 41, 42, 43, 44, 49], "input": [17, 32], "__init__": [17, 34, 40], "to_list": 17, "func": 17, "conv_2x2": [17, 52], "ori": 17, "ni": 17, "n1i": 17, "n2i": 17, "ai": 17, "bi": 17, "ci": [17, 44], "2x2": 17, "contig": 17, "off": 17, "r": [17, 21, 41, 43, 44, 49, 51, 52, 54], "conv": 17, "or_": 17, "count": [17, 23, 49, 50, 52], "1i": 17, "2i": 17, "a_": [17, 52], "b_": [17, 52], "c_": [17, 52], "cell": [17, 54], "frequenc": [17, 52, 54], "let": [17, 31, 49, 51, 52], "suppos": [17, 51, 52, 53], "52": 17, "87": 17, "4343": 17, "43": 17, "expos": 17, "divid": [17, 52], "them": [17, 44, 50], "04": 17, "census_divis": [19, 20, 44], "logger": 19, "year_index": [20, 25, 36, 38], "month": [20, 35, 38, 50], "uuid": [20, 40], "uuid4": [20, 38, 40], "aliv": [20, 34], "num_antibiotic_us": [20, 25, 36], "has_asthma": [20, 25, 36], "asthma_ag": 20, "asthma_statu": [20, 34], "controllevel": [20, 24, 25, 28], "exacerbation_histori": [20, 38], "exacerbationhistori": [20, 28], "exacerbation_severity_histori": [20, 25], "exacerbationseverityhistori": [20, 25, 37], "total_hosp": 20, "has_family_histori": [20, 25, 33, 36], "familyhistori": [20, 29], "antibioticexposur": [20, 21], "censusdivis": [20, 23], "2027": [20, 25, 38], "2023": 20, "properti": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39], "still": [20, 36, 52], "divis": [20, 23, 35, 40], "resid": [20, 23], "condit": [20, 24, 52], "manag": [20, 24], "There": [20, 24, 33, 37, 44, 49, 50, 52], "num_current_year": [20, 28, 37], "num_previous_year": 20, "current_year": [20, 25, 37], "previous_year": 20, "round": [20, 34, 40], "share": [20, 35], "socioeconom": [20, 35], "pathwai": [20, 35], "lead": [20, 34], "uniqu": [20, 23, 40, 51], "identifi": [20, 23, 35, 40], "mid_trend": 21, "dataframegroupbi": [21, 22, 26, 27, 28, 30, 33, 35, 36, 39], "\u03bc": 21, "stewardship": 21, "program": [21, 49, 54], "introduc": [21, 49], "success": [21, 49], "deep": [21, 23, 29, 35], "load_abx_mid_trend": 21, "mid": [21, 52], "compute_num_antibiotic_us": 21, "birth_year": 21, "compute_prob": [21, 27], "isn": 21, "exactli": [21, 37], "initial_popul": 22, "give": [22, 27, 30, 35, 36, 37, 49], "n_rel": 22, "newborn": [22, 38], "master_population_initial_distribut": 22, "load_birth_estim": 22, "load_population_initial_distribut": 22, "get_initial_population_indic": 22, "num_birth": 22, "weight": [22, 40], "get_num_newborn": 22, "97": 22, "censust": 23, "pleas": [23, 47], "98": 23, "0007": 23, "dwell": 23, "census_division_nam": 23, "feder": 23, "cduid": [23, 35, 40], "dguid": 23, "dissemin": 23, "geographi": 23, "0003": [23, 54], "statscan": 23, "schema": 23, "geographic_area_typ": 23, "region": [23, 35], "area_km2": 23, "area": 23, "kilometr": 23, "squar": [23, 51], "population_density_per_square_km": 23, "densiti": [23, 51], "load_census_data": 23, "randomli": [23, 28, 50], "assign": [23, 24, 28, 50], "censusboundari": 23, "shapefile_data": 23, "geopanda": 23, "geodatafram": 23, "shapefile_path": 23, "metadata_path": 23, "reference_longitud": 23, "reference_latitud": 23, "first_standard_parallel": 23, "second_standard_parallel": 23, "false_east": 23, "false_north": 23, "boundari": 23, "cartograph": 23, "cbf": 23, "shapefil": 23, "shp": [23, 44], "lambert": 23, "conform": 23, "conic": 23, "guid": 23, "geometri": 23, "polygon": 23, "cdname": 23, "cdtype": 23, "landarea": 23, "pruid": 23, "longitud": [23, 35], "latitud": [23, 35], "parallel": 23, "degre": [23, 33, 35, 40], "east": [23, 35], "north": 23, "load_census_boundari": 23, "get_census_division_from_lat_lon": 23, "point_in_polygon": 23, "point": [23, 32, 51], "multipolygon": 23, "check": [23, 31, 32, 38, 40, 46, 47], "its": 23, "get_lambert_conformal_from_lat_lon": 23, "\u03c6": 23, "\u03bb_0": 23, "\u03c6_0": 23, "\u03c6_1": 23, "\u03c6_2": 23, "x_0": 23, "coordin": 23, "transform": [23, 51, 54], "wikipedia": 23, "geodet": 23, "system": [23, 31, 42, 47], "1980": 23, "fully_control": [24, 39], "as_arrai": [24, 37], "ordin": [24, 40], "assign_random_\u03b20": [24, 28], "random": [24, 28, 38, 51, 52], "compute_control_level": 24, "\u03c3": [24, 40], "\u03b8_k": [24, 40], "\u03b7": [24, 40], "\u03b8_": [24, 40], "asthmacost": 25, "control_prob": 25, "dollar": 25, "exchang": 25, "usd": 25, "cad": 25, "compute_cost": 25, "prev_year": [25, 37], "asthma_cost": 25, "2f": 25, "93922": 25, "load_life_t": 26, "agent_di": 26, "emigration_t": 27, "load_emigration_t": 27, "2022": [27, 30], "num_prev_year": 28, "calibration_t": 28, "load_exacerbation_calibr": 28, "compute_num_exacerb": 28, "has_family_history_of_asthma": 29, "bernoulli": 29, "immigration_t": 30, "load_immigration_t": 30, "get_num_new_immigr": 30, "num_new_born": [30, 38], "974": 30, "custom": 31, "stackoverflow": 31, "github": [31, 42, 43, 47], "logfilt": 31, "through": [31, 32, 35], "messag": [31, 43, 44], "record": [31, 35], "deem": 31, "appropri": 31, "place": [31, 40, 44], "msg": 31, "arg": [31, 34], "kwarg": [31, 34], "coloredformatt": 31, "fmt_prefix": 31, "fmt_msg": 31, "formatt": 31, "attribut": [31, 38], "operand": 31, "oper": 31, "yield": 31, "coupl": 31, "preparatori": 31, "carri": 31, "logrecord": 31, "getmessag": 31, "usestim": 31, "formattim": 31, "event": 31, "except": [31, 38, 44], "formatexcept": 31, "supports_color": 31, "support": 31, "ansi": 31, "get_logg": 31, "module_nam": 31, "set_logging_level": 31, "get_pars": 32, "argpars": 32, "argumentpars": 32, "interfac": [32, 42, 46, 47], "parser": 32, "get_config": 32, "path_config": 32, "handle_output_path": 32, "dir_nam": 32, "handl": [32, 40], "cli": [32, 46], "workspac": 32, "continu": [32, 44], "signifi": 32, "abort": 32, "home": [32, 35], "currect": 32, "work": [32, 35, 42, 47], "mydir1": 32, "did": [32, 50, 52], "mydir2": 32, "force_output_path": 32, "dir": 32, "mydir": 32, "run_main": 32, "poly_paramet": 33, "correction_t": 33, "load_occurrence_correction_t": 33, "abstract": 33, "crude_occurr": 33, "f_": [33, 52], "fhx_0": 33, "fhx_age": 33, "fhx_xxx": 33, "least": [33, 50, 51, 52], "sexyear": 33, "power": 33, "sexag": [33, 50], "alpha_ag": 33, "train": [33, 51], "poli": [33, 40], "norm2_ag": 33, "norm": [33, 53, 54], "crude": 33, "01m": [33, 52], "k0m": [33, 52], "ell": [33, 52], "featur": [33, 49, 51, 52], "yearag": 33, "sexyearag": 33, "alpha_year": 33, "norm2_year": 33, "36": [33, 52], "compute_asthma_ag": 33, "current_ag": 33, "agent_has_asthma": [33, 36], "outcomet": 34, "group_bi": 34, "increment": 34, "filter_column": 34, "amount": [34, 49], "outcome_t": 34, "summat": 34, "method": [34, 40, 51, 52], "anoth": 34, "structur": 34, "These": 34, "both": [34, 38], "valueerror": [34, 40], "outcomematrix": [34, 38], "until_all_di": [34, 38], "until": [34, 38], "asthma_incid": 34, "asthma_preval": 34, "asthma_incidence_contingency_t": 34, "asthma_prevalence_contingency_t": 34, "statu": [34, 38], "exacerbation_by_sever": [34, 38], "exacerbation_hospit": [34, 38], "create_t": 34, "matric": [34, 38], "those": [34, 50, 52, 53], "value_column": 34, "matrix": [34, 38], "combine_outcome_t": 34, "combine_outcome_matric": 34, "outcome_matric": 34, "pollutiont": 35, "pm": 35, "background_pm25": 35, "background": 35, "pm2": 35, "wildfire_pm25": 35, "wildfir": 35, "climat": 35, "wildfire_pm25_sc": 35, "total_pm25": 35, "ipcc": 35, "sustain": 35, "road": 35, "ghg": 35, "emiss": 35, "ssp2_4": 35, "middl": 35, "ssp3_7": 35, "rivalri": 35, "rocki": 35, "ssp5_8": 35, "fossil": 35, "driven": 35, "load_pollution_data": 35, "pm25_data_path": 35, "posixpath": 35, "runner": 35, "pollution_t": 35, "gribdata": 35, "dai": [35, 54], "grib": 35, "gridtyp": 35, "page": [35, 42], "concentr": 35, "load_fil": 35, "grib2": 35, "amalgam": 35, "add_record_to_df": 35, "value_": 35, "loop": 35, "get_data_averag": 35, "invert_longitud": 35, "prime": 35, "meridian": 35, "west": 35, "360": 35, "load_grib_fil": 35, "recurs": 35, "multipl": [35, 52], "subdirectori": 35, "asthma_reassess": 36, "load_reassessment_t": 36, "been": [36, 37, 44, 50, 51], "curabl": 36, "mistaken": 36, "other": [36, 40, 49, 50, 51], "respiratori": [36, 54], "diseas": [36, 51, 53], "later": [36, 49, 52], "addition": 36, "go": [36, 42, 43, 47], "period": [36, 50], "dormanc": 36, "symptom": [36, 50], "severitylevel": 37, "exacerbationsever": 37, "four": [37, 50, 54], "dirichlet": 37, "multinomi": 37, "trial": [37, 53], "childhood": 37, "adulthood": 37, "severity_level": 37, "assign_random_p": 37, "compute_distribut": 37, "prev_hosp": 37, "http": [37, 40, 42, 47, 54], "juliastat": 37, "org": [37, 54], "jl": 37, "stabl": 37, "multivari": 37, "might": 37, "had": [37, 50, 52], "Will": 37, "00001": 37, "85": [37, 50], "compute_hospitalization_prob": 37, "stat": [37, 40], "stackexchang": 37, "com": [37, 40, 42, 47], "question": 37, "174952": 37, "\u03b3": 37, "z": [37, 43, 47, 51], "approach": 37, "infin": 37, "inf": 37, "empir": 37, "total_r": 37, "around": 37, "likewis": 37, "binari": [37, 43, 50], "ignore_pollution_flag": 38, "max_time_horizon": 38, "get_num_new_ag": 38, "num_immigr": 38, "subsequ": 38, "move": 38, "get_new_ag": 38, "thei": [38, 50, 52], "part": [38, 52], "config_path": 38, "new_agents_df": 38, "2028": 38, "generate_initial_asthma": [38, 44], "mutat": 38, "reassess_asthma_diagnosi": 38, "update_asthma_effect": 38, "effect": [38, 52], "check_if_agent_gets_new_asthma_diagnosi": 38, "worker": 38, "process_id": 38, "queue": 38, "context": [38, 53], "basecontext": 38, "2011": 38, "progress": [38, 40, 44, 51], "bar": [38, 40], "simulate_ag": 38, "is_immigr": 38, "seed": 38, "n_cpu": 38, "min_agents_mp": 38, "sequenti": 38, "disutil": [39, 53], "\u03b2control1": 39, "\u03b2control2": 39, "\u03b2control3": 39, "\u03b2exac_sev_hist1": 39, "\u03b2exac_sev_hist2": 39, "\u03b2exac_sev_hist3": 39, "\u03b2exac_sev_hist4": 39, "euroqol": 39, "qualiti": [39, 53], "metric": 39, "eq5d_canada": 39, "load_eq5d": 39, "compute_util": 39, "get_chunk_indic": 40, "chunk_siz": 40, "chunk": 40, "item": 40, "create_process_bar": 40, "chunk_indic": 40, "position_offset": 40, "tqdm": 40, "std": [40, 51], "job": [40, 41, 43, 44], "sub": 40, "96": 40, "240": 40, "250": 40, "60": 40, "89": 40, "61": 40, "timer": 40, "log_level": 40, "abc": 40, "callabl": 40, "short": [40, 50], "round_numb": 40, "digit": [40, 50], "sigdigit": 40, "signific": 40, "mattgosden": 40, "2415661b94c3": 40, "decim": 40, "932": 40, "93": [40, 51], "compute_ordinal_regress": 40, "prob_funct": 40, "bound": [40, 49], "rv_continu": 40, "cdf": 40, "_continuous_distn": 40, "logistic_gen": 40, "6224593312018546": 40, "3775406687981454": 40, "19511514499178906": 40, "18242552380635635": 40, "data_path": 40, "check_fil": 40, "ext": 40, "valid": [40, 51, 54], "extens": [40, 41], "check_cduid": 40, "check_year": 40, "check_provinc": 40, "check_projection_scenario": 40, "orthogon": 40, "basi": 40, "2d": 40, "07106781e": 40, "08248290e": 40, "55111512e": 40, "16496581e": 40, "66666667": 40, "convert_non_serializ": 40, "obj": 40, "serializ": 40, "friendli": 40, "intend": 40, "dump": 40, "cannot": 40, "directli": 40, "serial": 40, "unsupport": 40, "represent": 40, "equival": [40, 50], "site": 41, "view": 41, "doc": [41, 42, 44], "build": [41, 43, 44], "clean": 41, "html": 41, "browser": 41, "automat": [41, 43, 44], "docstr": [41, 44], "As": 41, "accordingli": [41, 44], "howev": [41, 44, 49, 52], "apidoc": 41, "dev": [41, 42], "api": [41, 45, 51], "delet": [41, 44], "automati": 41, "rst": [41, 42], "style": [41, 51], "host": 41, "done": 41, "action": [41, 43], "push": [41, 43, 44], "gh": 41, "branch": [41, 44], "workflow": [41, 43], "docs_pages_workflow": 41, "yml": [41, 43], "execut": [41, 43, 44], "ubuntu": [41, 43, 44], "latest": [41, 42, 43, 44], "checkout": [41, 43, 44], "v4": [41, 43, 44], "setup": [41, 43, 44], "v5": [41, 43, 44], "instal": [41, 43, 44, 45, 46], "depend": [41, 44, 50, 52], "pip": [41, 42, 43, 44], "txt": [41, 42, 43, 44], "_build": [41, 44], "deploi": 41, "peaceiri": 41, "v3": 41, "event_nam": [41, 43], "ref": [41, 43, 44], "head": [41, 51], "publish_branch": 41, "github_token": [41, 43], "secret": [41, 43], "publish_dir": 41, "force_orphan": 41, "plan": 42, "submodul": 42, "rpy2": 42, "allow": [42, 44, 49, 50], "instruct": [42, 44, 47], "sudo": 42, "apt": 42, "notebook": 42, "brew": 42, "wget": 42, "jgm": 42, "releas": [42, 45, 47], "amd64": 42, "deb": 42, "dpkg": 42, "clone": 42, "resplab": [42, 47], "tag": [43, 44], "commit": [43, 44], "vx": [43, 47], "git": [43, 44], "v": [43, 44], "release_workflow": 43, "publish_releas": 43, "publish": 43, "lf": 43, "create_releas": 43, "v1": 43, "env": [43, 47], "tag_nam": 43, "release_nam": 43, "draft": 43, "prereleas": 43, "wheel": 43, "bdist_wheel": 43, "archiv": 43, "upload": 43, "artifact": 43, "dist": 43, "linux": 43, "asset": 43, "token": 43, "upload_url": 43, "asset_path": 43, "py3": 43, "whl": 43, "asset_nam": 43, "asset_content_typ": 43, "applic": 43, "shell": 44, "pytest": 44, "test_simul": 44, "tests_workflow": 44, "tests_workflow_lf": 44, "reason": [44, 49], "reli": 44, "census_division_boundari": 44, "lcd_000b21a_e": 44, "few": 44, "quit": 44, "rest": 44, "won": [44, 47], "worri": 44, "just": [44, 51, 52], "my": 44, "my_branch": 44, "trigger": 44, "sure": [44, 47], "most": 44, "recent": 44, "test_new_fil": 44, "new_fil": 44, "alphabet": 44, "exit": 44, "soon": 44, "fail": 44, "resourc": 44, "easier": 44, "test_ag": 44, "test_antibiotic_exposur": 44, "test_birth": 44, "test_census_divis": 44, "test_census_boundari": 44, "test_control": 44, "test_cost": 44, "test_death": 44, "test_emigr": 44, "test_exacerb": 44, "test_family_histori": 44, "test_immigr": 44, "test_occurr": 44, "test_outcome_matrix": 44, "test_pollut": 44, "test_reassess": 44, "test_sever": 44, "test_util": 44, "sphinx": [44, 45], "concurr": 44, "cancel": 44, "conserv": [44, 49], "bandwidth": 44, "enabl": 44, "test": 45, "skip": 47, "mac": 47, "finish": 47, "ll": 47, "my_fold": 47, "mkdir": 47, "best": 47, "keep": [47, 50], "venv": 47, "bin": 47, "activ": [47, 50, 53], "haven": 47, "click": 47, "classic": 47, "expir": 47, "No": [47, 51], "secur": 47, "earlier": [47, 50], "tick": 47, "box": 47, "shown": 47, "global": 47, "credenti": 47, "osxkeychain": 47, "pip3": 47, "ask": 47, "usernam": 47, "password": 47, "your_git_usernam": 47, "email": 47, "address": [47, 52], "your_token": 47, "ve": 47, "successfulli": 47, "deactiv": 47, "section": 49, "incorpor": [49, 52], "u": [49, 50, 52, 53], "abl": [49, 52], "extend": [49, 50, 52], "beyond": [49, 52], "choos": [49, 52], "respons": [49, 50, 51, 52], "discret": [49, 52], "good": [49, 52], "choic": [49, 52], "common": 49, "problem": 49, "overdispers": 49, "extra": 49, "typic": [49, 51], "written": 49, "binom": 49, "failur": 49, "reparametr": 49, "algebra": 49, "prevent": 49, "unrealist": 49, "extrapol": 49, "word": [49, 51], "sai": 49, "recal": [49, 52], "free": [49, 52], "constraint": [49, 52], "real": [49, 52], "therefor": [49, 52], "decid": [49, 52], "permit": [49, 52], "infect": 49, "regul": 49, "govern": 49, "reduc": 49, "stand": 49, "account": [49, 50, 53], "beta_t": 49, "beta_h": 49, "h": 49, "th": [49, 50, 51], "prospect": [50, 54], "618": 50, "particip": 50, "old": [50, 53], "self": [50, 53], "report": 50, "physician": 50, "measur": [50, 53], "among": 50, "613": 50, "lost": 50, "cohort": [50, 54], "adult": 50, "gina": 50, "guidelin": 50, "ye": 50, "daili": 50, "nocturn": 50, "inhal": 50, "zero": 50, "treat": 50, "treatment": [50, 53], "nor": 50, "experienc": 50, "visit": 50, "whose": 50, "studyid": 50, "schedul": 50, "daytimesymptom": 50, "nocturnalsymptom": 50, "inhalerus": 50, "limitedact": 50, "ageatasthmadx": 50, "time_since_dx": 50, "time_since_dx_cat": 50, "convent": 50, "snake": 50, "patient_id": 50, "fact": 50, "control_scor": 50, "daytime_symptom": 50, "nocturnal_symptom": 50, "inhaler_us": 50, "limited_act": 50, "geq": 50, "age_at_asthma_dx": 50, "asthmat": 50, "spend": 50, "arbitrari": 50, "matter": 50, "distanc": 50, "theta_k": 50, "x_n": [50, 51], "covari": [50, 51], "beta_n": [50, 51], "age2": 50, "sexage2": 50, "correl": [50, 54], "becaus": 50, "repeatedli": 50, "similar": 50, "assumpt": 50, "cycl": 50, "virtual": 50, "sklearn": 51, "sm": 51, "smf": 51, "beta_1": 51, "x_1": 51, "beta_2": 51, "x_2": 51, "ldot": 51, "look": 51, "diabet": 51, "load_diabet": 51, "x_data": 51, "feature_nam": 51, "y_data": 51, "disease_progress": 51, "concat": 51, "sort_valu": 51, "somewhat": 51, "meaningless": 51, "04464164": 51, "05068012": 51, "10722563": 51, "10359309": 51, "09996055": 51, "09632802": 51, "09269548": 51, "08906294": 51, "0854304": 51, "08179786": 51, "07816532": 51, "07453279": 51, "07090025": 51, "06726771": 51, "06363517": 51, "06000263": 51, "05637009": 51, "05273755": 51, "04910502": 51, "04547248": 51, "04183994": 51, "0382074": 51, "03457486": 51, "03094232": 51, "02730979": 51, "02367725": 51, "02004471": 51, "01641217": 51, "01277963": 51, "00914709": 51, "00551455": 51, "00188202": 51, "00175052": 51, "00538306": 51, "0090156": 51, "01264814": 51, "01628068": 51, "01991321": 51, "02354575": 51, "02717829": 51, "03081083": 51, "03444337": 51, "03807591": 51, "04170844": 51, "04534098": 51, "04897352": 51, "05260606": 51, "0562386": 51, "05987114": 51, "06350368": 51, "06713621": 51, "07076875": 51, "07440129": 51, "07803383": 51, "08166637": 51, "08529891": 51, "08893144": 51, "09256398": 51, "09619652": 51, "11072668": 51, "angl": 51, "ages_orig": 51, "age_map": 51, "age_orig": 51, "sexes_orig": 51, "sex_map": 51, "sex_orig": 51, "bmi": 51, "bp": 51, "s1": 51, "s2": 51, "s3": 51, "s4": 51, "s5": 51, "s6": 51, "26": 51, "077342": 51, "026328": 51, "089630": 51, "096198": 51, "026550": 51, "076395": 51, "042571": 51, "005220": 51, "137": 51, "344": 51, "011595": 51, "040099": 51, "049341": 51, "064447": 51, "013948": 51, "034309": 51, "007027": 51, "030072": 51, "200": 51, "374": 51, "034229": 51, "067642": 51, "063487": 51, "070520": 51, "008142": 51, "039493": 51, "000612": 51, "079778": 51, "140": 51, "037463": 51, "002559": 51, "019980": 51, "011824": 51, "002592": 51, "068332": 51, "025930": 51, "113": 51, "226": 51, "046085": 51, "024960": 51, "024800": 51, "030232": 51, "039809": 51, "054925": 51, "77": 51, "x_": 51, "beta_3": 51, "try": 51, "relationship": 51, "themselv": 51, "aren": 51, "necessarili": 51, "superscript": 51, "readabl": 51, "31": 51, "x_3": 51, "32": 51, "41": 51, "x_4": 51, "42": 51, "perhap": 51, "interact": 51, "mayb": 51, "what": [51, 52], "beta_5": 51, "compon": 51, "come": 51, "gaussian": 51, "q": 51, "explanatori": 51, "natur": 51, "third": 51, "differenti": 51, "think": 51, "canon": 51, "simpli": 51, "sqrt": 51, "pi": 51, "frac": 51, "summari": 51, "dep": 51, "442": 51, "residu": 51, "438": 51, "3885": 51, "irl": 51, "likelihood": [51, 52], "2451": 51, "sat": 51, "aug": 51, "devianc": 51, "7017e": 51, "59": 51, "pearson": 51, "chi2": 51, "70e": 51, "pseudo": 51, "squ": 51, "4146": 51, "nonrobust": 51, "coef": 51, "err": 51, "gt": 51, "025": 51, "975": 51, "132": 51, "8957": 51, "567": 51, "795": 51, "106": 51, "304": 51, "159": 51, "487": 51, "4998": 51, "234": 51, "136": 51, "033": 51, "041": 51, "958": 51, "927": 51, "0815": 51, "541": 51, "590": 51, "802": 51, "543": 51, "1051": 51, "620": 51, "4098": 51, "043": 51, "564": 51, "573": 51, "253": 51, "433": 51, "technic": 51, "disease_progression_pr": 51, "67": 51, "280918": 51, "128": 51, "233317": 51, "107": 51, "249704": 51, "104": 51, "751886": 51, "348294": 51, "211": 51, "689430": 51, "311": 51, "204": 51, "186929": 51, "321": 51, "215": 51, "178345": 51, "170": 51, "301126": 51, "402": 51, "133": 51, "329999": 51, "dtype": 51, "px_data": 51, "legendgroup": 51, "layout": 51, "yaxi": 51, "midpoint": 52, "next": 52, "henc": 52, "bmatrix": 52, "break": 52, "lee": [52, 54], "et": [52, 54], "al": [52, 54], "meta": [52, 54], "2253": 52, "0531475": 52, "paper": [52, 53], "patrick": [52, 54], "hx_0": 52, "hx_age": 52, "hx_xxx": 52, "122": 52, "377": 52, "prev": 52, "broyden": 52, "fletcher": 52, "goldfarb": 52, "shanno": 52, "joint": 52, "fhx": 52, "categor": 52, "smoke": 52, "lung": 52, "cancer": 52, "300": 52, "smoker": 52, "a0": 52, "b0": 52, "n1": 52, "c0": 52, "d0": 52, "125": 52, "n2": 52, "n_1": 52, "a_0": 52, "b_0": 52, "n_2": 52, "c_0": 52, "d_0": 52, "implement": 52, "accord": 52, "static": 52, "a1_ra": 52, "b1_ra": 52, "c1_ra": 52, "d1_ra": 52, "ra": 52, "rho": 52, "longer": 52, "a1_dx": 52, "b1_dx": 52, "c1_dx": 52, "d1_dx": 52, "didn": [52, 53], "rightarrow": 52, "a1": 52, "b1": 52, "c1": 52, "d1": 52, "a_1": 52, "b_1": 52, "c_1": 52, "d_1": 52, "satisfi": 53, "certain": 53, "situat": 53, "quantifi": 53, "instrument": 53, "consist": 53, "five": 53, "dimens": 53, "mobil": 53, "care": 53, "usual": 53, "pain": 53, "discomfort": 53, "anxieti": 53, "depress": 53, "wide": 53, "clinic": 53, "assess": 53, "impact": [53, 54], "her": 53, "she": 53, "loss": 53, "5l": [53, 54], "uncertainti": 53, "u_": 53, "bonett": 54, "analyt": 54, "research": 54, "american": 54, "psychologist": 54, "254": 54, "255": 54, "2007": 54, "url": 54, "doi": 54, "1037": 54, "066x": 54, "pietrantonj": 54, "fold": 54, "imput": 54, "medicin": 54, "2299": 54, "2322": 54, "2006": 54, "1002": 54, "2287": 54, "tae": 54, "yoon": 54, "john": 54, "petkau": 54, "kate": 54, "johnson": 54, "stuart": 54, "turvei": 54, "amin": 54, "adibi": 54, "padmaja": 54, "subbarao": 54, "mohsen": 54, "sadatsafavi": 54, "polici": 54, "medrxiv": 54, "www": 54, "content": 54, "earli": 54, "03": 54, "24304122": 54, "arxiv": 54, "pdf": 54, "1101": 54, "ariana": 54, "saatchi": 54, "fawziah": 54, "marra": 54, "hannah": 54, "lishman": 54, "david": 54, "jacquelyn": 54, "j": 54, "cragg": 54, "frontier": 54, "allergi": 54, "frontiersin": 54, "journal": 54, "articl": 54, "3389": 54, "falgi": 54, "1491985": 54, "mamun": 54, "zhao": 54, "mccabe": 54, "benefit": 54, "wise": 54, "public": 54, "732": 54, "740": 54, "17269": 54, "s41997": 54, "019": 54, "00245": 54, "w": 54, "hind": 54, "sbihi": 54, "darlen": 54, "l": 54, "abdullah": 54, "drona": 54, "rasali": 54, "caren": 54, "rose": 54, "rozlyn": 54, "boutin": 54, "chariss": 54, "petersen": 54, "leah": 54, "stiemsma": 54, "geoffrei": 54, "winsor": 54, "fiona": 54, "brinkman": 54, "anita": 54, "kozyrskyj": 54, "meghan": 54, "azad": 54, "allan": 54, "becker": 54, "piush": 54, "mandhan": 54, "theo": 54, "mora": 54, "malcolm": 54, "sear": 54, "brett": 54, "finlai": 54, "decreas": 54, "gut": 54, "microbiota": 54, "children": 54, "evid": 54, "lancet": 54, "1094": 54, "1105": 54, "1016": 54, "s2213": 54, "2600": 54, "30052": 54, "jiajun": 54, "yan": 54, "shitong": 54, "xie": 54, "jeffrei": 54, "eleanor": 54, "pullenayegum": 54, "arto": 54, "ohinmaa": 54, "bryan": 54, "stirl": 54, "feng": 54, "european": 54, "147": 54, "155": 54, "1007": 54, "s10198": 54, "023": 54, "01570": 54}, "objects": {"leap": [[20, 0, 0, 1, "agent", ""], [21, 0, 0, 1, "antibiotic_exposure", ""], [22, 0, 0, 1, "birth", ""], [23, 0, 0, 1, "census_division", ""], [24, 0, 0, 1, "control", ""], [25, 0, 0, 1, "cost", ""], [26, 0, 0, 1, "death", ""], [27, 0, 0, 1, "emigration", ""], [28, 0, 0, 1, "exacerbation", ""], [29, 0, 0, 1, "family_history", ""], [30, 0, 0, 1, "immigration", ""], [31, 0, 0, 1, "logger", ""], [32, 0, 0, 1, "main", ""], [33, 0, 0, 1, "occurrence", ""], [34, 0, 0, 1, "outcome_matrix", ""], [35, 0, 0, 1, "pollution", ""], [36, 0, 0, 1, "reassessment", ""], [37, 0, 0, 1, "severity", ""], [38, 0, 0, 1, "simulation", ""], [39, 0, 0, 1, "utility", ""], [40, 0, 0, 1, "utils", ""]], "leap.agent": [[20, 1, 1, 0, "Agent", "Bases: object"]], "leap.agent.Agent.__init__": [[20, 2, 2, "leap.agent.Agent", "age: int", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "alive: bool = True", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "antibiotic_exposure: AntibioticExposure | None = None", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "asthma_age: int | None = None", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "asthma_status: bool = False", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "census_division: CensusDivision | None = None", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "family_history: FamilyHistory | None = None", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "has_asthma: bool = False", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "has_family_history: bool | None = None", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "month: int = 1", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "num_antibiotic_use: int | None = None", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "pollution: Pollution | None = None", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "province: str = &#x27;CA&#x27;", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "sex: str | int | bool | Sex", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "total_hosp: int = 0", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "uuid: UUID4 | None = None", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "year: int", "Bases: object"], [20, 2, 2, "leap.agent.Agent", "year_index: int", "Bases: object"]], "leap.agent.Agent.__init__.control_levels: ControlLevels = &lt;leap.control": [[20, 2, 2, "leap.agent.Agent", "ControlLevels object&gt;", "Bases: object"]], "leap.agent.Agent.__init__.exacerbation_history: ExacerbationHistory = &lt;leap.exacerbation": [[20, 2, 2, "leap.agent.Agent", "ExacerbationHistory object&gt;", "Bases: object"]], "leap.agent.Agent.__init__.exacerbation_severity_history: ExacerbationSeverityHistory = &lt;leap.severity": [[20, 2, 2, "leap.agent.Agent", "ExacerbationSeverityHistory object&gt;", "Bases: object"]], "leap.agent.Agent.__init__.ssp: str = &#x27;SSP1_2": [[20, 2, 2, "leap.agent.Agent", "6&#x27;", "Bases: object"]], "leap.agent.Agent": [[20, 3, 1, 0, "age", "The age of the person in years."], [20, 3, 1, 0, "alive", "Whether or not the person is still alive."], [20, 3, 1, 0, "asthma_age", "The age at which the person was diagnosed with asthma."], [20, 3, 1, 0, "asthma_status", "TODO."], [20, 3, 1, 0, "census_division", "The Canadian census division where the person resides."], [20, 3, 1, 0, "control_levels", "The control levels for the person's asthma."], [20, 3, 1, 0, "exacerbation_history", "The asthma exacerbation history of the person."], [20, 3, 1, 0, "exacerbation_severity_history", "The number of asthma exacerbations by severity."], [20, 3, 1, 0, "has_asthma", "Whether or not the person has asthma."], [20, 3, 1, 0, "has_family_history", "Whether or not the person has a family history of asthma."], [20, 3, 1, 0, "num_antibiotic_use", "The number of times the person has used a round of antibiotics."], [20, 3, 1, 0, "pollution", "The pollution data for the person's census division."], [20, 3, 1, 0, "province", "The province where the person resides."], [20, 3, 1, 0, "sex", "The sex of the person."], [20, 3, 1, 0, "ssp", "The shared socioeconomic pathway (SSP) scenario."], [20, 3, 1, 0, "total_hosp", "The total number of very severe asthma exacerbations leading to hospitalization."], [20, 3, 1, 0, "uuid", "A unique identifier for the agent."], [20, 4, 1, 0, "year", "The calendar year of the current iteration, e.g. 2027."], [20, 4, 1, 0, "year_index", "An integer representing the year of the simulation. For example, if the simulation starts in 2023, then the year_index for 2023 is 1, for 2024 is 2, etc."]], "leap.antibiotic_exposure": [[21, 1, 1, 0, "AntibioticExposure", "Bases: object"]], "leap.antibiotic_exposure.AntibioticExposure.__init__": [[21, 2, 2, "leap.antibiotic_exposure.AntibioticExposure", "config", "Bases: object"], [21, 2, 2, "leap.antibiotic_exposure.AntibioticExposure", "mid_trends", "Bases: object"], [21, 2, 2, "leap.antibiotic_exposure.AntibioticExposure", "parameters", "Bases: object"]], "leap.antibiotic_exposure.AntibioticExposure": [[21, 5, 1, 0, "compute_num_antibiotic_use", "Compute the number of courses of antibiotics used during the first year of life."], [21, 5, 1, 0, "compute_probability", "Compute the probability of antibiotic exposure for a given year and sex."], [21, 5, 1, 0, "copy", ""], [21, 5, 1, 0, "load_abx_mid_trends", "Load the antibiotic mid trends table."], [21, 3, 1, 0, "mid_trends", "A set of dataframes grouped by year and sex."], [21, 3, 1, 0, "parameters", "A dictionary containing the following keys:"]], "leap.antibiotic_exposure.AntibioticExposure.compute_num_antibiotic_use": [[21, 2, 2, 0, "birth_year", "The year the agent (person) was born."], [21, 2, 2, 0, "sex", "Sex of agent, 1 = male, 0 = female."]], "leap.antibiotic_exposure.AntibioticExposure.compute_probability": [[21, 2, 2, 0, "sex", "Sex of agent, 1 = male, 0 = female."], [21, 2, 2, 0, "year", "The calendar year, e.g."]], "leap.antibiotic_exposure.AntibioticExposure.copy": [[21, 2, 2, "leap.antibiotic_exposure.AntibioticExposure.copy", "deep", ""]], "leap.birth": [[22, 1, 1, 0, "Birth", "Bases: object"]], "leap.birth.Birth.__init__": [[22, 2, 2, "leap.birth.Birth", "estimate", "Bases: object"], [22, 2, 2, "leap.birth.Birth", "initial_population", "Bases: object"], [22, 2, 2, "leap.birth.Birth", "max_age", "Bases: object"], [22, 2, 2, "leap.birth.Birth", "population_growth_type", "Bases: object"], [22, 2, 2, "leap.birth.Birth", "province", "Bases: object"], [22, 2, 2, "leap.birth.Birth", "starting_year", "Bases: object"]], "leap.birth.Birth": [[22, 3, 1, 0, "estimate", "A grouped data frame giving the number of births in a given province, grouped by year."], [22, 5, 1, 0, "get_initial_population_indices", "Get the indices for the agents from the initial population table, weighted by age."], [22, 5, 1, 0, "get_num_newborn", "Get the number of births in a given year."], [22, 3, 1, 0, "initial_population", "A data frame giving the population for the first year of the simulation."], [22, 5, 1, 0, "load_birth_estimate", "Load the data from birth_estimate.csv."], [22, 5, 1, 0, "load_population_initial_distribution", "Load the data from initial_pop_distribution_prop.csv."]], "leap.birth.Birth.get_initial_population_indices": [[22, 2, 2, 0, "num_births", "Number of births."]], "leap.birth.Birth.get_num_newborn": [[22, 2, 2, 0, "num_births_initial", "Number of births in the initial year of the simulation."], [22, 2, 2, 0, "year", "The calendar year."]], "leap.birth.Birth.load_birth_estimate": [[22, 2, 2, 0, "population_growth_type", "Population growth type, one of:"], [22, 2, 2, 0, "province", "A string indicating the province abbreviation, e.g."], [22, 2, 2, 0, "starting_year", "The year for the data to start at."]], "leap.birth.Birth.load_population_initial_distribution": [[22, 2, 2, 0, "max_age", "The maximum age to include in the data."], [22, 2, 2, 0, "population_growth_type", "Population growth type, one of:"], [22, 2, 2, 0, "province", "A string indicating the province abbreviation, e.g."], [22, 2, 2, 0, "starting_year", "The year for the data to start at."]], "leap.census_division": [[23, 1, 1, 0, "CensusBoundaries", "Bases: object"], [23, 1, 1, 0, "CensusDivision", "Bases: object"], [23, 1, 1, 0, "CensusTable", "Bases: object"]], "leap.census_division.CensusBoundaries.__init__": [[23, 2, 2, "leap.census_division.CensusBoundaries", "false_easting", "Bases: object"], [23, 2, 2, "leap.census_division.CensusBoundaries", "false_northing", "Bases: object"], [23, 2, 2, "leap.census_division.CensusBoundaries", "first_standard_parallel", "Bases: object"], [23, 2, 2, "leap.census_division.CensusBoundaries", "metadata_path", "Bases: object"], [23, 2, 2, "leap.census_division.CensusBoundaries", "reference_latitude", "Bases: object"], [23, 2, 2, "leap.census_division.CensusBoundaries", "reference_longitude", "Bases: object"], [23, 2, 2, "leap.census_division.CensusBoundaries", "second_standard_parallel", "Bases: object"], [23, 2, 2, "leap.census_division.CensusBoundaries", "shapefile_data", "Bases: object"], [23, 2, 2, "leap.census_division.CensusBoundaries", "shapefile_path", "Bases: object"], [23, 2, 2, "leap.census_division.CensusBoundaries", "year", "Bases: object"]], "leap.census_division.CensusBoundaries": [[23, 4, 1, 0, "false_easting", "false easting."], [23, 4, 1, 0, "false_northing", "false northing."], [23, 4, 1, 0, "first_standard_parallel", "the first standard parallel in degrees."], [23, 5, 1, 0, "get_census_division_from_lat_lon", "Given a latitude and longitude, find the corresponding census division."], [23, 5, 1, 0, "get_lambert_conformal_from_lat_lon", "Given a latitude and longitude, find the Lambert Conformal Conic projection coordinates."], [23, 5, 1, 0, "load_census_boundaries", "Load the data from the census boundaries shapefile."], [23, 5, 1, 0, "point_in_polygon", "Determine whether or not a given point is within a polygon."], [23, 4, 1, 0, "reference_latitude", "the reference latitude."], [23, 4, 1, 0, "reference_longitude", "the reference longitude."], [23, 4, 1, 0, "second_standard_parallel", "the second standard parallel in degrees."], [23, 4, 1, 0, "shapefile_data", "A grouped data frame grouped by province. Each data frame contains the following columns:"], [23, 4, 1, 0, "year", "the year the census population data was collected."]], "leap.census_division.CensusBoundaries.get_census_division_from_lat_lon": [[23, 2, 2, 0, "latitude", "the latitude."], [23, 2, 2, 0, "longitude", "the longitude."]], "leap.census_division.CensusBoundaries.get_lambert_conformal_from_lat_lon": [[23, 2, 2, 0, "x_0", "false easting."], [23, 2, 2, 0, "y_0", "false northing."], [23, 2, 2, "leap.census_division.CensusBoundaries.get_lambert_conformal_from_lat_lon.", "\u03bb", "the longitude."], [23, 2, 2, "leap.census_division.CensusBoundaries.get_lambert_conformal_from_lat_lon._0", "\u03bb_0", "the reference longitude."], [23, 2, 2, "leap.census_division.CensusBoundaries.get_lambert_conformal_from_lat_lon.", "\u03c6", "the longitude."], [23, 2, 2, "leap.census_division.CensusBoundaries.get_lambert_conformal_from_lat_lon._0", "\u03c6_0", "the reference longitude."], [23, 2, 2, "leap.census_division.CensusBoundaries.get_lambert_conformal_from_lat_lon._1", "\u03c6_1", "the first standard parallel in degrees."], [23, 2, 2, "leap.census_division.CensusBoundaries.get_lambert_conformal_from_lat_lon._2", "\u03c6_2", "the second standard parallel in degrees."]], "leap.census_division.CensusBoundaries.load_census_boundaries": [[23, 2, 2, 0, "shapefile_path", "Full path for the shapefile containing the census division boundaries."]], "leap.census_division.CensusBoundaries.point_in_polygon": [[23, 2, 2, 0, "point", "The point we want to check."], [23, 2, 2, 0, "polygon", "A polygon object containing the points of its boundary."]], "leap.census_division.CensusDivision.__init__": [[23, 2, 2, "leap.census_division.CensusDivision", "cduid", "Bases: object"], [23, 2, 2, "leap.census_division.CensusDivision", "census_table", "Bases: object"], [23, 2, 2, "leap.census_division.CensusDivision", "name", "Bases: object"], [23, 2, 2, "leap.census_division.CensusDivision", "province", "Bases: object"], [23, 2, 2, "leap.census_division.CensusDivision", "year", "Bases: object"]], "leap.census_division.CensusDivision": [[23, 3, 1, 0, "cduid", "The census division identifier."], [23, 3, 1, 0, "name", "The census division name."], [23, 3, 1, 0, "year", "The year the census population data was collected."]], "leap.census_division.CensusTable.__init__": [[23, 2, 2, "leap.census_division.CensusTable", "config", "Bases: object"], [23, 2, 2, "leap.census_division.CensusTable", "year", "Bases: object"]], "leap.census_division.CensusTable": [[23, 5, 1, 0, "copy", ""], [23, 3, 1, 0, "data", "A grouped data frame grouped by province containing census population data."], [23, 5, 1, 0, "load_census_data", "Load the census data."], [23, 3, 1, 0, "year", "The year the census population data was collected."]], "leap.census_division.CensusTable.copy": [[23, 2, 2, "leap.census_division.CensusTable.copy", "deep", ""]], "leap.control": [[24, 1, 1, 0, "Control", "Bases: object"], [24, 1, 1, 0, "ControlLevels", "Bases: object"]], "leap.control.Control.__init__": [[24, 2, 2, "leap.control.Control", "config", "Bases: object"], [24, 2, 2, "leap.control.Control", "hyperparameters", "Bases: object"], [24, 2, 2, "leap.control.Control", "parameters", "Bases: object"]], "leap.control.Control": [[24, 5, 1, "leap.control.Control.assign_random_0", "assign_random_\u03b20", "Assign the parameter \u03b20 a random value from a normal distribution."], [24, 5, 1, 0, "compute_control_levels", "Compute the probability that the control level = k for each value of k."], [24, 3, 1, 0, "hyperparameters", "Hyperparameters used to compute \u03b20 from a normal distribution: * \u03b20_\u03bc: float, the mean of the normal distribution. * \u03b20_\u03c3: float, the standard deviation of the normal distribution."], [24, 3, 1, 0, "parameters", "A dictionary containing the following keys: * \u03b20: float, a constant parameter. See hyperparameters. * \u03b2age: float, the parameter for the age term. * \u03b2sex: float, the parameter for the sex term. * \u03b2sexage: float, the parameter for the sex * age term. * \u03b2sexage2: float, the parameter for the sex * age^2 term. * \u03b2age2: float, the parameter for the age^2 term. * \u03b8: list of two numbers, which are used as the thresholds to compute the ordinal"]], "leap.control.Control.compute_control_levels": [[24, 2, 2, 0, "age", "The age of the person (agent) in years."], [24, 2, 2, 0, "initial", "Whether or not this is the initial computation."], [24, 2, 2, 0, "sex", "Sex of person, 1 = male, 0 = female."]], "leap.control.ControlLevels.__init__": [[24, 2, 2, "leap.control.ControlLevels", "fully_controlled", "Bases: object"], [24, 2, 2, "leap.control.ControlLevels", "partially_controlled", "Bases: object"], [24, 2, 2, "leap.control.ControlLevels", "uncontrolled", "Bases: object"]], "leap.control.ControlLevels": [[24, 5, 1, 0, "as_array", "Return the control levels as an array."], [24, 4, 1, 0, "fully_controlled", "The probability of being fully controlled."], [24, 4, 1, 0, "partially_controlled", "The probability of being partially controlled."], [24, 4, 1, 0, "uncontrolled", "The probability of being uncontrolled."]], "leap.cost": [[25, 1, 1, 0, "AsthmaCost", "Bases: object"]], "leap.cost.AsthmaCost.__init__": [[25, 2, 2, "leap.cost.AsthmaCost", "config", "Bases: object"], [25, 2, 2, "leap.cost.AsthmaCost", "control_probs", "Bases: object"], [25, 2, 2, "leap.cost.AsthmaCost", "exac", "Bases: object"], [25, 2, 2, "leap.cost.AsthmaCost", "exchange_rate_usd_cad", "Bases: object"]], "leap.cost.AsthmaCost": [[25, 5, 1, 0, "compute_cost", "Compute the cost in dollars for the current year due to asthma exacerbations and control."], [25, 3, 1, 0, "control_probs", "A vector of 3 factors to multiply by the 3 control level probabilities."], [25, 3, 1, 0, "exac", "A vector of 4 factors to multiply by the 4 exacerbation severity levels."], [25, 3, 1, 0, "exchange_rate_usd_cad", "The exchange rate from USD to CAD."]], "leap.cost.AsthmaCost.compute_cost": [[25, 2, 2, 0, "agent", "A person in the model."]], "leap.data_generation": [[5, 0, 0, 1, "antibiotic_data", ""], [6, 0, 0, 1, "birth_data", ""], [8, 0, 0, 1, "death_data", ""], [9, 0, 0, 1, "exacerbation_data", ""], [10, 0, 0, 1, "incidence_calibration", ""], [11, 0, 0, 1, "migration_data", ""], [12, 0, 0, 1, "occurrence_calibration_data", ""], [13, 0, 0, 1, "occurrence_data", ""], [14, 0, 0, 1, "prevalence_calibration", ""], [15, 0, 0, 1, "reassessment_data", ""], [16, 0, 0, 1, "utility_data", ""], [17, 0, 0, 1, "utils", ""]], "leap.data_generation.antibiotic_data": [[5, 6, 1, 0, "estimate_alpha", "Estimate the alpha parameter for the negative binomial model."], [5, 6, 1, 0, "generate_antibiotic_data", "Fit a GLM for antibiotic prescriptions in the first year of life and generate data."], [5, 6, 1, 0, "generate_antibiotic_model", "Generate a generalized linear model for antibiotic dose."], [5, 6, 1, 0, "get_predicted_abx_data", "Get predicted data from a GLM model."], [5, 6, 1, 0, "load_antibiotic_data", "Load the antibiotic dose data."], [5, 6, 1, 0, "load_birth_data", "Load the StatCan birth data."]], "leap.data_generation.antibiotic_data.estimate_alpha": [[5, 2, 2, 0, "df", "A Pandas dataframe with data to be fitted."], [5, 2, 2, 0, "formula", "The formula for the GLM model."], [5, 2, 2, 0, "maxiter", "The maximum number of iterations to perform while fitting the model."], [5, 2, 2, 0, "offset", "The offset to use in the model, if desired."]], "leap.data_generation.antibiotic_data.generate_antibiotic_data": [[5, 2, 2, 0, "return_type", "The type of data to return."]], "leap.data_generation.antibiotic_data.generate_antibiotic_model": [[5, 2, 2, 0, "alpha", "The alpha parameter for the negative binomial model."], [5, 2, 2, 0, "df_abx", "The antibiotic prescription data."], [5, 2, 2, 0, "formula", "Duplicate explicit target name: \"statsmodels documentation\"."], [5, 2, 2, 0, "maxiter", "The maximum number of iterations to perform while fitting the model."]], "leap.data_generation.antibiotic_data.get_predicted_abx_data": [[5, 2, 2, 0, "df", "(optional) If provided, the function will use this dataframe to predict the data."], [5, 2, 2, 0, "max_year", "The maximum year to predict."], [5, 2, 2, 0, "min_year", "The minimum year to predict."], [5, 2, 2, 0, "model", "The fitted GLM model for predicting the number of courses of antibiotics during the first year of life, given year and sex."]], "leap.data_generation.antibiotic_data.load_birth_data": [[5, 2, 2, 0, "max_year", "The maximum year to load the data for."], [5, 2, 2, 0, "min_year", "The minimum year to load the data for."], [5, 2, 2, 0, "province", "The province to load the data for."]], "leap.data_generation.birth_data": [[6, 6, 1, 0, "filter_age_group", "Filter out grouped categories such as \"Median\", \"Average\", \"All\", \"to\", \"over\"."], [6, 6, 1, 0, "generate_birth_estimate_data", "Create/update the birth_estimate.csv file."], [6, 6, 1, 0, "generate_initial_population_data", "Create/update the initial_pop_distribution_prop.csv file."], [6, 6, 1, 0, "get_projection_scenario_id", "Convert the long form of the projection scenario to the 2-letter ID."], [6, 6, 1, 0, "load_past_births_population_data", "Load the past birth data from the CSV file."], [6, 6, 1, 0, "load_past_initial_population_data", "Load the past initial population data from the CSV file."], [6, 6, 1, 0, "load_projected_births_population_data", "Load the projected births data from the CSV file from StatCan."], [6, 6, 1, 0, "load_projected_initial_population_data", "Load the projected initial population data from the CSV file."]], "leap.data_generation.birth_data.filter_age_group": [[6, 2, 2, 0, "age_group", "The age group string."]], "leap.data_generation.birth_data.get_projection_scenario_id": [[6, 2, 2, 0, "projection_scenario", "The long form of the projection scenario, e.g. Projection scenario M1."]], "leap.data_generation.birth_data.load_projected_births_population_data": [[6, 2, 2, 0, "min_year", "The starting year for the projected data."]], "leap.data_generation.birth_data.load_projected_initial_population_data": [[6, 2, 2, 0, "min_year", "The starting year for the projected data."]], "leap.data_generation.death_data": [[8, 6, 1, 0, "beta_year_optimizer", "Calculate the difference between the projected life expectancy and desired life expectancy."], [8, 6, 1, 0, "calculate_life_expectancy", "Determine the life expectancy for a person born in a given year."], [8, 6, 1, 0, "generate_death_data", "Generate the mortality data CSV."], [8, 6, 1, 0, "get_prob_death_projected", "Given the (known) prob death for a past year, calculate the prob death in a future year."], [8, 6, 1, 0, "get_projected_death_data", "Load the projected death data from StatCan CSV file."], [8, 6, 1, 0, "get_projected_life_table_single_year", "Get the life table for a single year."], [8, 6, 1, 0, "load_past_death_data", "Load the past death data from the StatCan CSV file."], [8, 6, 1, 0, "load_projected_death_data", "Load the projected death data from the StatCan CSV files."]], "leap.data_generation.death_data.beta_year_optimizer": [[8, 2, 2, 0, "beta_year", "The beta parameter for the given year."], [8, 2, 2, 0, "df_calibration", "A dataframe containing the life expectancy projections for the calibration years."], [8, 2, 2, 0, "life_table", "A dataframe containing the projected probability of death for the calibration year, for a given sex and province."], [8, 2, 2, 0, "projection_scenario", "The projection scenario, e.g."], [8, 2, 2, 0, "province", "A 2-letter string indicating the province abbreviation, e.g."], [8, 2, 2, 0, "sex", "one of M = male, F = female."], [8, 2, 2, 0, "year_initial", "The initial year with a known probability of death."]], "leap.data_generation.death_data.calculate_life_expectancy": [[8, 2, 2, 0, "life_table", "A dataframe containing the probability of death for a single year, province and sex, for each age."]], "leap.data_generation.death_data.generate_death_data": [[8, 2, 2, "leap.data_generation.death_data.generate_death_data", "to_csv", "Generate the mortality data CSV."]], "leap.data_generation.death_data.get_prob_death_projected": [[8, 2, 2, 0, "beta_year", "The beta parameter for the given sex, province, and projection scenario."], [8, 2, 2, 0, "prob_death", "The probability of death for year_initial, the last year that past data was collected, for a given age, sex, province, and projection scenario."], [8, 2, 2, 0, "year", "The current year."], [8, 2, 2, 0, "year_initial", "The initial year with a known probability of death."]], "leap.data_generation.death_data.get_projected_death_data": [[8, 2, 2, 0, "df_calibration", "A dataframe containing the life expectancy projections for the calibration years."], [8, 2, 2, 0, "past_life_table", "A dataframe containing the probability of death and the standard error for each year, province, age, and sex."], [8, 2, 2, "leap.data_generation.death_data.get_projected_death_data", "projection_scenario", "Load the projected death data from StatCan CSV file."], [8, 2, 2, 0, "x0", "The initial guess for the beta parameter."], [8, 2, 2, 0, "xtol", "The tolerance for the beta parameter."]], "leap.data_generation.death_data.get_projected_life_table_single_year": [[8, 2, 2, 0, "beta_year", "The beta parameter for the given year."], [8, 2, 2, 0, "life_table", "A dataframe containing the projected probability of death for the starting year, for a given sex and province."], [8, 2, 2, 0, "province", "a string indicating the province abbreviation, e.g."], [8, 2, 2, 0, "sex", "One of M = male, F = female."], [8, 2, 2, 0, "year", "The current year."], [8, 2, 2, 0, "year_initial", "The initial year with a known probability of death."]], "leap.data_generation.exacerbation_data": [[9, 6, 1, 0, "exacerbation_calibrator", "Compute the ratio between the observed and predicted hospitalization rates."], [9, 6, 1, 0, "exacerbation_prediction", "Calculate the mean number of exacerbations for a given age and sex."], [9, 6, 1, 0, "generate_exacerbation_calibration_data", "Generate the exacerbation calibration data for all provinces."], [9, 6, 1, 0, "load_hospitalization_data", "Load the hospitalization data for the given province and starting year."], [9, 6, 1, 0, "load_population_data", "Load the population data for the given province, starting year, and projection scenario."], [9, 6, 1, 0, "parse_age", "Reformat a string containing age information."], [9, 6, 1, 0, "parse_sex", "Reformat a string containing sex information."]], "leap.data_generation.exacerbation_data.exacerbation_calibrator": [[9, 2, 2, 0, "max_age", "The maximum age for the calibration."], [9, 2, 2, 0, "max_year", "The maximum year for the calibration."], [9, 2, 2, 0, "min_age", "The minimum age for the calibration."], [9, 2, 2, 0, "prob_hosp", "The probability of a very severe exacerbation, defined as an exacerbation that requires hospitalization."], [9, 2, 2, 0, "projection_scenario", "The projection scenario for the population data."], [9, 2, 2, 0, "province", "The 2-letter abbreviation for the province."], [9, 2, 2, 0, "starting_year", "The starting year for the calibration."]], "leap.data_generation.exacerbation_data.exacerbation_prediction": [[9, 2, 2, 0, "age", "Integer age, a value in [3, 90]."], [9, 2, 2, 0, "gamma_control", "A list of three floats, the control parameters."], [9, 2, 2, 0, "sex", "One of \"M\" or \"F\"."]], "leap.data_generation.exacerbation_data.load_hospitalization_data": [[9, 2, 2, 0, "min_age", "The minimum age for to be used in the data."], [9, 2, 2, 0, "province", "The province for which to load the hospitalization data."], [9, 2, 2, 0, "starting_year", "The starting year for which to load the hospitalization data."]], "leap.data_generation.exacerbation_data.load_population_data": [[9, 2, 2, 0, "max_age", "The maximum age for the population data."], [9, 2, 2, 0, "max_year", "The maximum year for the population data."], [9, 2, 2, 0, "min_age", "The minimum age for the population data."], [9, 2, 2, 0, "projection_scenario", "The projection scenario for the population data."], [9, 2, 2, 0, "province", "The 2-letter abbreviation for the province."], [9, 2, 2, 0, "starting_year", "The starting year for the population data."]], "leap.data_generation.exacerbation_data.parse_age": [[9, 2, 2, 0, "x", "A string containing age information."]], "leap.data_generation.exacerbation_data.parse_sex": [[9, 2, 2, 0, "x", "A string containing sex information."]], "leap.data_generation.incidence_calibration": [[10, 6, 1, 0, "compute_contingency_tables", "Compute the contingency tables for the risk factors and asthma prevalence."], [10, 6, 1, 0, "compute_odds_ratio", "Compute the odds ratio for risk factor combination \u03bb."], [10, 6, 1, 0, "compute_odds_ratio_difference", "Compute difference in odds ratios between the target and the calibrated asthma incidence."], [10, 6, 1, 0, "inc_correction_calculator", "Calculate the correction for asthma incidence based on risk factors."]], "leap.data_generation.incidence_calibration.compute_contingency_tables": [[10, 2, 2, 0, "asthma_prev_calibrated", "A vector of the calibrated asthma prevalence for each risk factor combination indexed by \u03bb."], [10, 2, 2, 0, "odds_ratio_target", "A vector of odds ratios for the risk factors."], [10, 2, 2, 0, "risk_factor_prob", "A vector of the probabilities of the risk factor levels."], [10, 2, 2, 0, "sample_size", "The total population size to use for the calculations."]], "leap.data_generation.incidence_calibration.compute_odds_ratio": [[10, 2, 2, 0, "asthma_incidence_0", "The calibrated asthma incidence for the risk factor combination with no risk factors (\u03bb = 0) in the current year."], [10, 2, 2, "leap.data_generation.incidence_calibration.compute_odds_ratio.asthma_incidence_", "asthma_incidence_\u03bb", "The calibrated asthma incidence for the risk factor combination \u03bb in the current year."], [10, 2, 2, 0, "contingency_table_past", "A ContingencyTable object representing the proportions of the population for different risk factor levels in the past."], [10, 2, 2, 0, "ra_target", "The probability that an individual previously diagnosed with asthma will maintain their asthma diagnosis after reassessment in the current year. Range: [0, 1]."]], "leap.data_generation.incidence_calibration.compute_odds_ratio_difference": [[10, 2, 2, 0, "asthma_inc_calibrated", "A vector of the calibrated asthma incidence for each risk factor combination indexed by \u03bb in the current year."], [10, 2, 2, 0, "asthma_prev_calibrated_past", "A vector of the calibrated asthma prevalence for each risk factor combination indexed by \u03bb in the past."], [10, 2, 2, 0, "odds_ratio_target", "A vector of odds ratios for the risk factors."], [10, 2, 2, 0, "odds_ratio_target_past", "A vector of odds ratios for the risk factors in the past."], [10, 2, 2, 0, "ra_target", "The probability that an individual previously diagnosed with asthma will maintain their asthma diagnosis after reassessment in the current year. Range: [0, 1]."], [10, 2, 2, 0, "risk_factor_prob_past", "A vector of the probabilities of the risk factor levels in the past."]], "leap.data_generation.incidence_calibration.inc_correction_calculator": [[10, 2, 2, 0, "asthma_inc_target", "The target incidence of asthma."], [10, 2, 2, 0, "asthma_prev_target_past", "The target prevalence of asthma in the previous year."], [10, 2, 2, 0, "odds_ratio_target_past", "A vector of odds ratios for the risk factors in the previous year."], [10, 2, 2, 0, "risk_factor_prob_past", "A vector of the prevalence of the risk factors in the previous year."], [10, 2, 2, 0, "risk_set", "A data frame containing the risk factors and their corresponding odds ratios."]], "leap.data_generation.migration_data": [[11, 6, 1, 0, "generate_migration_data", ""], [11, 6, 1, 0, "get_delta_n", "Get the population change due to migration for a given age and sex in a single year."], [11, 6, 1, 0, "get_n_migrants", "Get the number of immigrants and emigrants in a single year for a given age and sex."], [11, 6, 1, 0, "get_prev_year_population", "Get the age, sex, probability of death, and population for the previous year."], [11, 6, 1, 0, "load_migration_data", "Generate migration data for the given provinces and years."]], "leap.data_generation.migration_data.get_delta_n": [[11, 2, 2, 0, "n", "The number of people living in Canada for a single age, sex, year, province, and projection scenario."], [11, 2, 2, 0, "n_prev", "The number of people living in Canada in the previous year for the same age, sex, province, and projection scenario as defined for n. So if n is the number of females aged 10 in the year 2020, n_prev is the number of females aged 9 in the year 2019."], [11, 2, 2, 0, "prob_death", "The probability that a person with a given age and sex in a given year will die between the previous year and this year."]], "leap.data_generation.migration_data.get_n_migrants": [[11, 2, 2, 0, "delta_N", "The change in population for a given year, age, sex, province, and projection scenario due to migration."]], "leap.data_generation.migration_data.get_prev_year_population": [[11, 2, 2, 0, "age", "The integer age."], [11, 2, 2, 0, "df", "A dataframe with the following columns:"], [11, 2, 2, 0, "min_age", "The minimum age in the dataframe."], [11, 2, 2, 0, "min_year", "The minimum year in the dataframe."], [11, 2, 2, 0, "sex", "One of F = female, M = male."], [11, 2, 2, 0, "year", "The calendar year."]], "leap.data_generation.occurrence_calibration_data": [[12, 1, 1, 0, "ResultsIncidence", "Bases: dict"], [12, 1, 1, 0, "ResultsPrevalence", "Bases: dict"], [12, 6, 1, 0, "beta_params_age_optimizer", "Optimize the risk factor beta parameters for the age terms."], [12, 6, 1, 0, "calculate_odds_ratio_abx", "Calculate the odds ratio for asthma prevalence based on antibiotic exposure."], [12, 6, 1, 0, "calculate_odds_ratio_fam_history", "Calculate the odds ratio for asthma prevalence based on family history."], [12, 6, 1, 0, "calculate_odds_ratio_risk_factors", "Calculate the odds ratio for asthma prevalence based on family history and antibiotic exposure."], [12, 6, 1, 0, "calibrate_asthma_incidence", "Calibrate the asthma incidence for the given year, age, and sex."], [12, 6, 1, 0, "calibrate_asthma_prevalence", "Calibrate the asthma prevalence for the given year, age, and sex."], [12, 6, 1, 0, "compute_antibiotic_dose_prob", "Compute the probability of number of courses of antibiotics during infancy."], [12, 6, 1, 0, "compute_mean_diff_log_OR", "Compute the mean difference in log odds ratio for the given model and data."], [12, 6, 1, 0, "generate_occurrence_calibration_data", "Generate the occurrence calibration data for the given province and year range."], [12, 6, 1, 0, "get_asthma_occurrence_prediction", "Predicts the asthma prevalence or incidence based on the given parameters."], [12, 6, 1, 0, "load_abx_exposure_data", "Load the antibiotic exposure data."], [12, 6, 1, 0, "load_family_history_data", "Load the family history data for the given province."], [12, 6, 1, 0, "load_occurrence_data", "Load the asthma incidence and prevalence data for the given province and year range."], [12, 6, 1, 0, "load_reassessment_data", "Load the asthma reassessment data for the given province."], [12, 6, 1, 0, "risk_factor_generator", "Compute the combined antibiotic exposure and family history odds ratio."]], "leap.data_generation.occurrence_calibration_data.ResultsIncidence": [[12, 4, 1, 0, "risk_sets", ""], [12, 4, 1, "leap.data_generation.occurrence_calibration_data.ResultsIncidence.", "\u03b1", ""], [12, 4, 1, "leap.data_generation.occurrence_calibration_data.ResultsIncidence._prev_", "\u03b6_prev_\u03bb", ""], [12, 4, 1, "leap.data_generation.occurrence_calibration_data.ResultsIncidence._", "\u03b6_\u03bb", ""]], "leap.data_generation.occurrence_calibration_data.ResultsPrevalence": [[12, 4, 1, "leap.data_generation.occurrence_calibration_data.ResultsPrevalence.", "\u03b1", ""], [12, 4, 1, "id0", "\u03b2", ""], [12, 4, 1, "id2", "\u03b6", ""], [12, 4, 1, "leap.data_generation.occurrence_calibration_data.ResultsPrevalence._", "\u03b6_\u03bb", ""]], "leap.data_generation.occurrence_calibration_data.beta_params_age_optimizer": [[12, 2, 2, 0, "baseline_year", "The baseline year for the calibration."], [12, 2, 2, 0, "df_incidence", "A dataframe with the incidence of asthma, with the following columns:"], [12, 2, 2, 0, "df_prevalence", "A dataframe with the prevalence of asthma, with the following columns:"], [12, 2, 2, 0, "df_reassessment", "A dataframe with the reassessment of asthma, with the following columns:"], [12, 2, 2, 0, "max_age", "The maximum age to consider for the calibration."], [12, 2, 2, 0, "min_year", "The minimum year to consider for the calibration."], [12, 2, 2, 0, "model_abx", "The fitted Negative Binomial model for the number of courses of antibiotics."], [12, 2, 2, 0, "stabilization_year", "The stabilization year for the calibration."], [12, 2, 2, "leap.data_generation.occurrence_calibration_data.beta_params_age_optimizer._risk_factors_age", "\u03b2_risk_factors_age", "A list of two beta parameters, \u03b2_fhx_age and \u03b2_abx_age, to be used as the initial values in the optimization."]], "leap.data_generation.occurrence_calibration_data.calculate_odds_ratio_abx": [[12, 2, 2, 0, "age", "The age of the individual in years."], [12, 2, 2, 0, "dose", "The number of antibiotic courses taken in the first year of life, an integer in [0, 5], where 5 indicates 5 or more courses."], [12, 2, 2, "leap.data_generation.occurrence_calibration_data.calculate_odds_ratio_abx._abx", "\u03b2_abx", "The parameters for the odds ratio calculation."]], "leap.data_generation.occurrence_calibration_data.calculate_odds_ratio_fam_history": [[12, 2, 2, 0, "age", "The age of the individual in years."], [12, 2, 2, 0, "fam_hist", "Whether or not there is a family history of asthma:"], [12, 2, 2, "leap.data_generation.occurrence_calibration_data.calculate_odds_ratio_fam_history._fam_hist", "\u03b2_fam_hist", "The beta parameters for the odds ratio calculation:"]], "leap.data_generation.occurrence_calibration_data.calculate_odds_ratio_risk_factors": [[12, 2, 2, 0, "age", "The age of the individual in years."], [12, 2, 2, 0, "dose", "The number of antibiotic courses taken in the first year of life, an integer in [0, 5], where 5 indicates 5 or more courses."], [12, 2, 2, 0, "fam_hist", "Whether or not there is a family history of asthma:"], [12, 2, 2, "leap.data_generation.occurrence_calibration_data.calculate_odds_ratio_risk_factors._risk_factors", "\u03b2_risk_factors", "A dictionary of beta parameters for the risk factor equations. Must contain the following keys:"]], "leap.data_generation.occurrence_calibration_data.calibrate_asthma_incidence": [[12, 2, 2, 0, "age", "The age in years."], [12, 2, 2, 0, "df_incidence", "A dataframe with the incidence of asthma, with the following columns:"], [12, 2, 2, 0, "df_prevalence", "A dataframe with the prevalence of asthma, with the following columns:"], [12, 2, 2, 0, "min_year", "The minimum year to consider for the calibration."], [12, 2, 2, 0, "model_abx", "The fitted Negative Binomial model for the number of courses of antibiotics."], [12, 2, 2, 0, "sex", "One of M = male, F = female."], [12, 2, 2, 0, "year", "The integer year."], [12, 2, 2, "leap.data_generation.occurrence_calibration_data.calibrate_asthma_incidence._risk_factors", "\u03b2_risk_factors", "A dictionary of beta parameters for the risk factor equations:"]], "leap.data_generation.occurrence_calibration_data.calibrate_asthma_prevalence": [[12, 2, 2, 0, "age", "The age in years."], [12, 2, 2, 0, "df_prevalence", "A dataframe with the prevalence of asthma, with the following columns:"], [12, 2, 2, 0, "model_abx", "The fitted Negative Binomial model for the number of courses of antibiotics."], [12, 2, 2, 0, "sex", "One of M = male, F = female."], [12, 2, 2, 0, "year", "The integer year."]], "leap.data_generation.occurrence_calibration_data.compute_antibiotic_dose_prob": [[12, 2, 2, 0, "model_abx", "The fitted Negative Binomial model for the number of courses of antibiotics. This model was fitted using BC Ministry of Health data on antibiotic prescriptions."], [12, 2, 2, 0, "sex", "The sex of the infant, one of \"M\" or \"F\"."], [12, 2, 2, 0, "year", "The birth year of the person."]], "leap.data_generation.occurrence_calibration_data.compute_mean_diff_log_OR": [[12, 2, 2, 0, "df", "A dataframe with the following columns:"], [12, 2, 2, 0, "df_incidence", "A dataframe with the incidence of asthma, with the following columns:"], [12, 2, 2, 0, "df_prevalence", "A dataframe with the prevalence of asthma, with the following columns:"], [12, 2, 2, 0, "df_reassessment", "A dataframe with the reassessment of asthma, with the following columns:"], [12, 2, 2, 0, "min_year", "The minimum year to consider for the calibration."], [12, 2, 2, 0, "model_abx", "The fitted Negative Binomial model for the number of courses of antibiotics."], [12, 2, 2, "leap.data_generation.occurrence_calibration_data.compute_mean_diff_log_OR._risk_factors_age", "\u03b2_risk_factors_age", "A list of two beta parameters, \u03b2_fhx_age and \u03b2_abx_age."]], "leap.data_generation.occurrence_calibration_data.generate_occurrence_calibration_data": [[12, 2, 2, 0, "baseline_year", "The baseline year for the calibration."], [12, 2, 2, 0, "max_age", "The maximum age to consider for the calibration."], [12, 2, 2, 0, "max_year", "The maximum year to load data for."], [12, 2, 2, 0, "min_year", "The minimum year to load data for."], [12, 2, 2, 0, "province", "The province to load data for."], [12, 2, 2, 0, "retrain_beta", "If True, re-run the fit for the \u03b2_risk_factors."], [12, 2, 2, 0, "stabilization_year", "The stabilization year for the calibration."]], "leap.data_generation.occurrence_calibration_data.get_asthma_occurrence_prediction": [[12, 2, 2, 0, "age", "Age of the individual in years."], [12, 2, 2, 0, "max_asthma_age", "The maximum age for asthma prediction (default is 62)."], [12, 2, 2, 0, "occurrence_type", "One of \"prevalence\" or \"incidence\"."], [12, 2, 2, 0, "sex", "One of \"M\" or \"F\"."], [12, 2, 2, 0, "stabilization_year", "The year when asthma stabilization occurs (default is 2025)."], [12, 2, 2, 0, "year", "Year of the prediction."]], "leap.data_generation.occurrence_calibration_data.load_abx_exposure_data": [[12, 2, 2, "leap.data_generation.occurrence_calibration_data.load_abx_exposure_data._abx", "\u03b2_abx", "A dictionary of 3 beta parameters for the odds ratio calculation:"]], "leap.data_generation.occurrence_calibration_data.load_family_history_data": [[12, 2, 2, "leap.data_generation.occurrence_calibration_data.load_family_history_data._fam_history", "\u03b2_fam_history", "A dictionary of two beta parameters for the odds ratio calculation:"]], "leap.data_generation.occurrence_calibration_data.load_occurrence_data": [[12, 2, 2, 0, "max_year", "The maximum year to load data for."], [12, 2, 2, 0, "min_year", "The minimum year to load data for."], [12, 2, 2, 0, "province", "The province to load data for."]], "leap.data_generation.occurrence_calibration_data.load_reassessment_data": [[12, 2, 2, 0, "province", "The province to load data for."]], "leap.data_generation.occurrence_calibration_data.risk_factor_generator": [[12, 2, 2, 0, "age", "The age of the person in years."], [12, 2, 2, 0, "model_abx", "The fitted Negative Binomial model for the number of courses of antibiotics."], [12, 2, 2, 0, "sex", "One of \"M\" or \"F\"."], [12, 2, 2, 0, "year", "The current year."], [12, 2, 2, "leap.data_generation.occurrence_calibration_data.risk_factor_generator._abx", "\u03b2_abx", "A dictionary of 3 beta parameters for the calculation of the odds ratio of having asthma given antibiotic exposure during infancy:"], [12, 2, 2, "leap.data_generation.occurrence_calibration_data.risk_factor_generator._fam_history", "\u03b2_fam_history", "A dictionary of 2 beta parameters for the calculation of the odds ratio of having asthma given family history:"]], "leap.data_generation.occurrence_data": [[13, 6, 1, 0, "add_beta_parameters", "Add the beta parameters to the config dictionary."], [13, 6, 1, 0, "generate_incidence_model", "Generate a GLM model for asthma incidence."], [13, 6, 1, 0, "generate_occurrence_data", "Generate the asthma incidence and prevalence data."], [13, 6, 1, 0, "generate_occurrence_model", "Generate a GLM model for asthma incidence or prevalence."], [13, 6, 1, 0, "generate_prevalence_model", "Generate a GLM model for asthma prevalence."], [13, 6, 1, 0, "get_predicted_data", "Get predicted data from a GLM model."], [13, 6, 1, 0, "load_asthma_df", "Load the asthma incidence and prevalence data."], [13, 6, 1, 0, "plot_occurrence", "Plot the incidence or prevalence of asthma."]], "leap.data_generation.occurrence_data.add_beta_parameters": [[13, 2, 2, 0, "config", "The config dictionary to add the parameters to."], [13, 2, 2, 0, "model", "The fitted GLM model."], [13, 2, 2, 0, "parameter_map", "A dictionary mapping the parameter names to their indices in the model parameters field, model.params."]], "leap.data_generation.occurrence_data.generate_incidence_model": [[13, 2, 2, 0, "df_asthma", "The asthma dataframe."], [13, 2, 2, 0, "maxiter", "The maximum number of iterations to perform while fitting the model."]], "leap.data_generation.occurrence_data.generate_occurrence_model": [[13, 2, 2, 0, "df_asthma", "The asthma dataframe."], [13, 2, 2, 0, "formula", "The formula for the GLM model."], [13, 2, 2, 0, "maxiter", "The maximum number of iterations to perform while fitting the model."], [13, 2, 2, 0, "occ_type", "The type of occurrence data to model."]], "leap.data_generation.occurrence_data.generate_prevalence_model": [[13, 2, 2, 0, "df_asthma", "The asthma dataframe."], [13, 2, 2, 0, "maxiter", "The maximum number of iterations to perform while fitting the model."]], "leap.data_generation.occurrence_data.get_predicted_data": [[13, 2, 2, 0, "max_age", "The maximum age to predict."], [13, 2, 2, 0, "max_year", "The maximum year to predict."], [13, 2, 2, 0, "min_age", "The minimum age to predict."], [13, 2, 2, 0, "min_year", "The minimum year to predict."], [13, 2, 2, 0, "model", "The fitted GLM model."], [13, 2, 2, 0, "pred_col", "The name of the column to store the predicted data."]], "leap.data_generation.occurrence_data.load_asthma_df": [[13, 2, 2, 0, "starting_year", "The starting year for the data."]], "leap.data_generation.occurrence_data.plot_occurrence": [[13, 2, 2, 0, "df", "A dataframe containing either incidence or prevalence data."], [13, 2, 2, 0, "file_path", "The path to save the plot to."], [13, 2, 2, 0, "height", "The height of the plot."], [13, 2, 2, 0, "max_age", "The maximum age to plot."], [13, 2, 2, 0, "max_year", "The maximum year to plot."], [13, 2, 2, 0, "min_year", "The minimum year to plot."], [13, 2, 2, 0, "title", "The title of the plot."], [13, 2, 2, 0, "width", "The width of the plot."], [13, 2, 2, 0, "y", "The name of the column in the dataframe which will be plotted as the y data."], [13, 2, 2, 0, "year_interval", "The interval between years."]], "leap.data_generation.prevalence_calibration": [[14, 6, 1, 0, "compute_asthma_prevalence", "Compute the asthma prevalence based on the risk factors and the parameters provided."], [14, 6, 1, 0, "compute_asthma_prevalence_difference", "Compute the absolute difference between the calibrated and target asthma prevalence."], [14, 6, 1, "leap.data_generation.prevalence_calibration.compute_asthma_prevalence_", "compute_asthma_prevalence_\u03bb", "Compute the asthma prevalence based on the risk factors and the parameters provided."], [14, 6, 1, 0, "get_asthma_prevalence_correction", "Compute the correction term for asthma prevalence."], [14, 6, 1, "leap.data_generation.prevalence_calibration.optimize_prevalence__parameters", "optimize_prevalence_\u03b2_parameters", "Calibrate asthma prevalence based on the target prevalence and odds ratios of risk factors."]], "leap.data_generation.prevalence_calibration.compute_asthma_prevalence": [[14, 2, 2, 0, "asthma_prev_risk_factor_params", "A vector of parameters for the risk factors, with shape (n - 1, 1)."], [14, 2, 2, 0, "odds_ratio_target", "A vector of odds ratios between the risk factors and asthma, with shape (n, 1)."], [14, 2, 2, 0, "risk_factor_prob", "A vector of the prevalence of the risk factor levels, with shape (n, 1)."], [14, 2, 2, "leap.data_generation.prevalence_calibration.compute_asthma_prevalence._0", "\u03b2_0", "The intercept of the logistic regression model."]], "leap.data_generation.prevalence_calibration.compute_asthma_prevalence_difference": [[14, 2, 2, 0, "asthma_prev_risk_factor_params", "A vector of parameters for the risk factors, with shape (n - 1, 1)."], [14, 2, 2, 0, "asthma_prev_target", "The target prevalence of asthma."], [14, 2, 2, 0, "odds_ratio_target", "A vector of odds ratios between the risk factors and asthma, with shape (n, 1)."], [14, 2, 2, 0, "risk_factor_prob", "A vector of the prevalence of the risk factor levels, with shape (n, 1)."], [14, 2, 2, "leap.data_generation.prevalence_calibration.compute_asthma_prevalence_difference._0", "\u03b2_0", "The intercept of the logistic regression model."]], "leap.data_generation.prevalence_calibration.compute_asthma_prevalence_\u03bb": [[14, 2, 2, "leap.data_generation.prevalence_calibration.compute_asthma_prevalence_.asthma_prev_risk_factor_params", "asthma_prev_risk_factor_params", "A vector of parameters for the risk factors, with shape (n - 1, 1)."], [14, 2, 2, "leap.data_generation.prevalence_calibration.compute_asthma_prevalence_.odds_ratio_target", "odds_ratio_target", "A vector of odds ratios between the risk factors and asthma, with shape (n, 1)."], [14, 2, 2, "leap.data_generation.prevalence_calibration.compute_asthma_prevalence_.risk_factor_prob", "risk_factor_prob", "A vector of the prevalence of the risk factor levels, with shape (n, 1)."], [14, 2, 2, "leap.data_generation.prevalence_calibration.compute_asthma_prevalence_._0", "\u03b2_0", "The intercept of the logistic regression model."]], "leap.data_generation.prevalence_calibration.get_asthma_prevalence_correction": [[14, 2, 2, 0, "asthma_prev_risk_factor_params", "A vector of parameters for the risk factors, with shape (n - 1, 1)."], [14, 2, 2, 0, "risk_factor_prob", "A vector of the prevalence of the risk factor levels, with shape (n, 1)."]], "leap.data_generation.prevalence_calibration.optimize_prevalence_\u03b2_parameters": [[14, 2, 2, "leap.data_generation.prevalence_calibration.optimize_prevalence__parameters.asthma_prev_target", "asthma_prev_target", "The target prevalence of asthma from the BC Ministry of Health model."], [14, 2, 2, "leap.data_generation.prevalence_calibration.optimize_prevalence__parameters.odds_ratio_target", "odds_ratio_target", "A vector of odds ratios for the risk factors, with shape (n, 1)."], [14, 2, 2, "leap.data_generation.prevalence_calibration.optimize_prevalence__parameters.risk_factor_prob", "risk_factor_prob", "A vector of the prevalence of the risk factors, with shape (n, 1)."], [14, 2, 2, "leap.data_generation.prevalence_calibration.optimize_prevalence__parameters.verbose", "verbose", "A boolean indicating if the trace should be printed."], [14, 2, 2, "leap.data_generation.prevalence_calibration.optimize_prevalence__parameters._0", "\u03b2_0", "The intercept of the logistic regression model."]], "leap.data_generation.reassessment_data": [[15, 6, 1, 0, "calculate_reassessment_probability", "Calculates the reassessment probability based on asthma prevalence and incidence."], [15, 6, 1, 0, "generate_reassessment_data", "Generate reassessment data for asthma prevalence and incidence across different provinces."], [15, 6, 1, 0, "get_asthma_df", "Loads the asthma prevalence / incidence predictions from Model 1."], [15, 6, 1, 0, "get_reassessment_data", "Generates reassessment data for asthma prevalence and incidence."]], "leap.data_generation.reassessment_data.calculate_reassessment_probability": [[15, 2, 2, 0, "incidence_current", "The incidence of asthma in the current year."], [15, 2, 2, 0, "prevalence_current", "The prevalence of asthma in the current year."], [15, 2, 2, 0, "prevalence_past", "The prevalence of asthma from the previous year."]], "leap.data_generation.reassessment_data.get_asthma_df": [[15, 2, 2, 0, "max_age", "The maximum age for asthma prediction."], [15, 2, 2, 0, "max_asthma_age", "The maximum age for for which the asthma prevalence / incidence model can accurately make predictions."], [15, 2, 2, 0, "max_year", "The ending year for the dataframe."], [15, 2, 2, 0, "min_age", "The minimum age for asthma prediction."], [15, 2, 2, 0, "stabilization_year", "The year when asthma stabilization occurs."], [15, 2, 2, 0, "starting_year", "The starting year for the dataframe."]], "leap.data_generation.reassessment_data.get_reassessment_data": [[15, 2, 2, 0, "df_asthma", "A dataframe containing asthma prevalence and incidence predictions from Occurrence Model 1."], [15, 2, 2, 0, "max_age", "The maximum age for asthma prediction."], [15, 2, 2, 0, "max_year", "The ending year for the data."], [15, 2, 2, 0, "province", "The 2-letter province code, e.g."], [15, 2, 2, 0, "starting_year", "The starting year for the data."]], "leap.data_generation.utility_data": [[16, 6, 1, 0, "generate_eq5d_data", "Generate EQ-5D data for ages 0 to 111."], [16, 6, 1, 0, "interpolate_eq5d", "Interpolate EQ-5D value for ages below 18 based on the EQ-5D value at 18."], [16, 6, 1, 0, "interpolate_eq5d_data", "Interpolate EQ-5D data to fill in missing ages below 18."], [16, 6, 1, 0, "load_eq5d_data", "Load EQ-5D data from the original Excel file and process it into a DataFrame."]], "leap.data_generation.utility_data.interpolate_eq5d": [[16, 2, 2, 0, "age", "Age for which to interpolate the EQ-5D value."], [16, 2, 2, 0, "age_upper", "Upper age limit for interpolation (default is 18)."], [16, 2, 2, 0, "eq5d_upper", "EQ-5D value at the upper age limit (default is 18)."]], "leap.data_generation.utility_data.interpolate_eq5d_data": [[16, 2, 2, 0, "df_utility", "DataFrame containing EQ-5D data for ages 18 and above:"]], "leap.data_generation.utility_data.load_eq5d_data": [[16, 2, 2, 0, "max_age", "The maximum age to consider in the data."]], "leap.data_generation.utils": [[17, 1, 1, 0, "ContingencyTable", "Bases: object"], [17, 6, 1, 0, "conv_2x2", "Create a 2x2 contigency table."], [17, 6, 1, 0, "format_age_group", "Convert age group to integer."], [17, 6, 1, 0, "get_province_id", "Convert full length province name to abbreviation."], [17, 6, 1, 0, "get_sex_id", "Convert full length sex to single character."], [17, 6, 1, 0, "heaviside", "Heaviside step function."], [17, 6, 1, 0, "parse_age_group", "Parse an age group string into a tuple of integers."]], "leap.data_generation.utils.ContingencyTable": [[17, 5, 1, 0, "__init__", "Initialize the contingency table with proportions. :param a: Proportion of the population with variable 1 + and variable 2 +. :param b: Proportion of the population with variable 1 + and variable 2 -. :param c: Proportion of the population with variable 1 - and variable 2 +. :param d: Proportion of the population with variable 1 - and variable 2 -."], [17, 5, 1, 0, "apply", "Apply a function to each value in the contingency table."], [17, 5, 1, 0, "to_list", "Convert the contingency table to a list of values."]], "leap.data_generation.utils.ContingencyTable.__init__": [[17, 2, 2, "leap.data_generation.utils.ContingencyTable", "a", "Bases: object"], [17, 2, 2, "leap.data_generation.utils.ContingencyTable", "b", "Bases: object"], [17, 2, 2, "leap.data_generation.utils.ContingencyTable", "c", "Bases: object"], [17, 2, 2, "leap.data_generation.utils.ContingencyTable", "d", "Bases: object"]], "leap.data_generation.utils.ContingencyTable.apply": [[17, 2, 2, "leap.data_generation.utils.ContingencyTable.apply", "func", "Apply a function to each value in the contingency table."]], "leap.data_generation.utils.conv_2x2": [[17, 2, 2, 0, "n1i", "The marginal count for the first variable."], [17, 2, 2, 0, "n2i", "The marginal count for the second variable."], [17, 2, 2, 0, "ni", "The total sample size."], [17, 2, 2, 0, "ori", "The odds ratio."], [17, 2, 2, 0, "var_names", "The names of the variables."]], "leap.data_generation.utils.format_age_group": [[17, 2, 2, 0, "age_group", "The age group string, e.g."], [17, 2, 2, 0, "upper_age_group", "The upper age group string, e.g."]], "leap.data_generation.utils.get_province_id": [[17, 2, 2, 0, "province", "The full length province name, e.g."]], "leap.data_generation.utils.get_sex_id": [[17, 2, 2, 0, "sex", "The full length string, either Female or Male"]], "leap.data_generation.utils.heaviside": [[17, 2, 2, 0, "threshold", "The threshold value."], [17, 2, 2, 0, "x", "The input value or array of values."]], "leap.data_generation.utils.parse_age_group": [[17, 2, 2, "leap.data_generation.utils.parse_age_group", "max_age", "Parse an age group string into a tuple of integers."], [17, 2, 2, 0, "x", "The age group string."]], "leap.death": [[26, 1, 1, 0, "Death", "Bases: object"]], "leap.death.Death.__init__": [[26, 2, 2, "leap.death.Death", "life_table", "Bases: object"], [26, 2, 2, "leap.death.Death", "province", "Bases: object"], [26, 2, 2, "leap.death.Death", "starting_year", "Bases: object"]], "leap.death.Death": [[26, 5, 1, 0, "agent_dies", "Determine whether or not the agent dies in a given year, based on age and sex."], [26, 3, 1, 0, "life_table", "A grouped data frame grouped by year. Each data frame contains the following columns:"], [26, 5, 1, 0, "load_life_table", "Load the life table data."]], "leap.death.Death.agent_dies": [[26, 2, 2, 0, "agent", "A person in the model."]], "leap.death.Death.load_life_table": [[26, 2, 2, 0, "province", "A string indicating the province abbreviation, e.g."], [26, 2, 2, 0, "starting_year", "The year to start the data at."]], "leap.emigration": [[27, 1, 1, 0, "Emigration", "Bases: object"]], "leap.emigration.Emigration.__init__": [[27, 2, 2, "leap.emigration.Emigration", "population_growth_type", "Bases: object"], [27, 2, 2, "leap.emigration.Emigration", "province", "Bases: object"], [27, 2, 2, "leap.emigration.Emigration", "starting_year", "Bases: object"], [27, 2, 2, "leap.emigration.Emigration", "table", "Bases: object"]], "leap.emigration.Emigration": [[27, 5, 1, 0, "compute_probability", "Determine the probability of emigration of an agent (person) in a given year."], [27, 5, 1, 0, "load_emigration_table", "Load the data from processed_data/migration/emigration_table.csv."], [27, 3, 1, 0, "table", "Grouped dataframe (by year) giving the probability of emigration for a given age, province, sex, and growth scenario:"]], "leap.emigration.Emigration.compute_probability": [[27, 2, 2, 0, "age", "Age of the person."], [27, 2, 2, 0, "sex", "Sex of the person, \"M\" = male, \"F\" = female."], [27, 2, 2, 0, "year", "The calendar year, e.g."]], "leap.emigration.Emigration.load_emigration_table": [[27, 2, 2, 0, "population_growth_type", "Population growth type, one of:"], [27, 2, 2, 0, "province", "a string indicating the province abbreviation, e.g."], [27, 2, 2, 0, "starting_year", "the year for the data to start at."]], "leap.exacerbation": [[28, 1, 1, 0, "Exacerbation", "Bases: object"], [28, 1, 1, 0, "ExacerbationHistory", "Bases: object"]], "leap.exacerbation.Exacerbation.__init__": [[28, 2, 2, "leap.exacerbation.Exacerbation", "calibration_table", "Bases: object"], [28, 2, 2, "leap.exacerbation.Exacerbation", "config", "Bases: object"], [28, 2, 2, "leap.exacerbation.Exacerbation", "hyperparameters", "Bases: object"], [28, 2, 2, "leap.exacerbation.Exacerbation", "initial_rate", "Bases: object"], [28, 2, 2, "leap.exacerbation.Exacerbation", "parameters", "Bases: object"], [28, 2, 2, "leap.exacerbation.Exacerbation", "province", "Bases: object"]], "leap.exacerbation.Exacerbation": [[28, 5, 1, "leap.exacerbation.Exacerbation.assign_random_0", "assign_random_\u03b20", "Assign the parameter \u03b20 a random value from a normal distribution."], [28, 3, 1, 0, "calibration_table", "A dataframe grouped by year and sex, with the following columns:"], [28, 5, 1, 0, "compute_num_exacerbations", "Compute the number of asthma exacerbations in a given year."], [28, 3, 1, 0, "hyperparameters", "A dictionary containing the hyperparameters used to compute \u03b20 from a normal distribution:"], [28, 5, 1, 0, "load_exacerbation_calibration", "Load the exacerbation calibration table."], [28, 3, 1, 0, "parameters", "A dictionary containing the following keys:"]], "leap.exacerbation.Exacerbation.compute_num_exacerbations": [[28, 2, 2, 0, "age", "The age of the person in years."], [28, 2, 2, 0, "agent", "A person in the model."], [28, 2, 2, 0, "control_levels", "The asthma control levels."], [28, 2, 2, 0, "initial", "If this is the initial computation."], [28, 2, 2, 0, "sex", "The sex of the agent (person), 0 = female, 1 = male."], [28, 2, 2, 0, "year", "The calendar year, e.g."]], "leap.exacerbation.Exacerbation.load_exacerbation_calibration": [[28, 2, 2, 0, "province", "A string indicating the province abbreviation, e.g."]], "leap.exacerbation.ExacerbationHistory.__init__": [[28, 2, 2, "leap.exacerbation.ExacerbationHistory", "num_current_year", "Bases: object"], [28, 2, 2, "leap.exacerbation.ExacerbationHistory", "num_prev_year", "Bases: object"]], "leap.exacerbation.ExacerbationHistory": [[28, 4, 1, 0, "num_current_year", "the number of exacerbations in the current year."], [28, 4, 1, 0, "num_prev_year", "the number of exacerbations in the previous year."]], "leap.family_history": [[29, 1, 1, 0, "FamilyHistory", "Bases: object"]], "leap.family_history.FamilyHistory.__init__": [[29, 2, 2, "leap.family_history.FamilyHistory", "config", "Bases: object"], [29, 2, 2, "leap.family_history.FamilyHistory", "probability", "Bases: object"]], "leap.family_history.FamilyHistory": [[29, 5, 1, 0, "copy", ""], [29, 5, 1, 0, "has_family_history_of_asthma", "Use Bernoulli distribution to determine whether an agent has a family history of asthma."], [29, 3, 1, 0, "probability", "The probability that an agent has a family history of asthma."]], "leap.family_history.FamilyHistory.copy": [[29, 2, 2, "leap.family_history.FamilyHistory.copy", "deep", ""]], "leap.immigration": [[30, 1, 1, 0, "Immigration", "Bases: object"]], "leap.immigration.Immigration.__init__": [[30, 2, 2, "leap.immigration.Immigration", "max_age", "Bases: object"], [30, 2, 2, "leap.immigration.Immigration", "population_growth_type", "Bases: object"], [30, 2, 2, "leap.immigration.Immigration", "province", "Bases: object"], [30, 2, 2, "leap.immigration.Immigration", "starting_year", "Bases: object"], [30, 2, 2, "leap.immigration.Immigration", "table", "Bases: object"]], "leap.immigration.Immigration": [[30, 5, 1, 0, "get_num_new_immigrants", "Get the number of new immigrants to Canada in a given year."], [30, 5, 1, 0, "load_immigration_table", "Load the data from processed_data/migration/immigration_table.csv."], [30, 3, 1, 0, "table", "Grouped dataframe (by year) giving the probability of immigration for a given age, province, sex, and growth scenario:"]], "leap.immigration.Immigration.get_num_new_immigrants": [[30, 2, 2, 0, "num_new_born", "The number of births in the given year of the simulation."], [30, 2, 2, 0, "year", "The calendar year."]], "leap.immigration.Immigration.load_immigration_table": [[30, 2, 2, "leap.immigration.Immigration.load_immigration_table", "max_age", "Load the data from processed_data/migration/immigration_table.csv."], [30, 2, 2, 0, "population_growth_type", "Population growth type, one of:"], [30, 2, 2, 0, "province", "A string indicating the province abbreviation, e.g."], [30, 2, 2, 0, "starting_year", "The year for the data to start at."]], "leap.logger": [[31, 1, 1, 0, "ColoredFormatter", "Bases: logging.Formatter"], [31, 1, 1, 0, "LogFilter", "Bases: logging.Filter"], [31, 1, 1, 0, "Logger", "Bases: logging.Logger"], [31, 6, 1, 0, "get_logger", ""], [31, 6, 1, 0, "set_logging_level", "Set the logging level for all leap loggers."]], "leap.logger.ColoredFormatter.__init__": [[31, 2, 2, "leap.logger.ColoredFormatter", "fmt_msg", "Bases: logging.Formatter"], [31, 2, 2, "leap.logger.ColoredFormatter", "fmt_prefix", "Bases: logging.Formatter"]], "leap.logger.ColoredFormatter": [[31, 5, 1, 0, "format", "Format the specified record as text."], [31, 5, 1, 0, "supports_color", "Check if the system supports ANSI color formatting."]], "leap.logger.ColoredFormatter.format": [[31, 2, 2, "leap.logger.ColoredFormatter.format", "record", "Format the specified record as text."]], "leap.logger.LogFilter.__init__": [[31, 2, 2, "leap.logger.LogFilter", "level", "Bases: logging.Filter"]], "leap.logger.LogFilter": [[31, 5, 1, 0, "filter", "Determine if the specified record is to be logged."]], "leap.logger.LogFilter.filter": [[31, 2, 2, "leap.logger.LogFilter.filter", "record", "Determine if the specified record is to be logged."]], "leap.logger.Logger.__init__": [[31, 2, 2, "leap.logger.Logger", "level", "Bases: logging.Logger"], [31, 2, 2, "leap.logger.Logger", "name", "Bases: logging.Logger"]], "leap.logger.Logger": [[31, 5, 1, 0, "message", ""]], "leap.logger.Logger.message": [[31, 2, 2, "leap.logger.Logger.message", "args", ""], [31, 2, 2, "leap.logger.Logger.message", "kwargs", ""], [31, 2, 2, "leap.logger.Logger.message", "msg", ""]], "leap.logger.get_logger": [[31, 2, 2, "leap.logger.get_logger", "level", ""], [31, 2, 2, "leap.logger.get_logger", "module_name", ""]], "leap.logger.set_logging_level": [[31, 2, 2, "leap.logger.set_logging_level", "level", "Set the logging level for all leap loggers."]], "leap.main": [[32, 6, 1, 0, "force_output_path", "Provides path for output data without user input."], [32, 6, 1, 0, "get_config", "Get the configuration settings from a json file."], [32, 6, 1, 0, "get_parser", "Get the command line interface parser."], [32, 6, 1, 0, "handle_output_path", "Provides path for output data by handling user input through CLI prompts."], [32, 6, 1, 0, "run_main", "The entry point for the command line interface."]], "leap.main.force_output_path": [[32, 2, 2, 0, "dir_name", "The name of the directory to store the outputs in"]], "leap.main.get_config": [[32, 2, 2, 0, "path_config", "The path to the configuration file."]], "leap.main.handle_output_path": [[32, 2, 2, 0, "dir_name", "The name of the directory to store the outputs in."]], "leap.occurrence": [[33, 1, 1, 0, "Incidence", "Bases: leap.occurrence.Occurrence"], [33, 1, 1, 0, "Occurrence", "Bases: object"], [33, 1, 1, 0, "Prevalence", "Bases: leap.occurrence.Occurrence"], [33, 6, 1, 0, "agent_has_asthma", "Determine whether the agent obtains a new asthma diagnosis based on age and sex."], [33, 6, 1, 0, "compute_asthma_age", "Compute the age at which the person (agent) is first diagnosed with asthma."]], "leap.occurrence.Incidence.__init__": [[33, 2, 2, "leap.occurrence.Incidence", "config", "Bases: leap.occurrence.Occurrence"], [33, 2, 2, "leap.occurrence.Incidence", "correction_table", "Bases: leap.occurrence.Occurrence"], [33, 2, 2, "leap.occurrence.Incidence", "max_age", "Bases: leap.occurrence.Occurrence"], [33, 2, 2, "leap.occurrence.Incidence", "parameters", "Bases: leap.occurrence.Occurrence"], [33, 2, 2, "leap.occurrence.Incidence", "poly_parameters", "Bases: leap.occurrence.Occurrence"]], "leap.occurrence.Incidence": [[33, 5, 1, 0, "crude_occurrence", "Calculate the crude asthma incidence."], [33, 5, 1, 0, "load_occurrence_correction_table", "Load the asthma incidence correction table."], [33, 3, 1, 0, "parameters", "A dictionary containing the following keys:"], [33, 3, 1, 0, "poly_parameters", "A dictionary containing the following keys:"]], "leap.occurrence.Incidence.crude_occurrence": [[33, 2, 2, 0, "age", "The age of the agent."], [33, 2, 2, 0, "sex", "The sex of the agent."], [33, 2, 2, 0, "year", "The calendar year."]], "leap.occurrence.Occurrence.__init__": [[33, 2, 2, "leap.occurrence.Occurrence", "config", "Bases: object"], [33, 2, 2, "leap.occurrence.Occurrence", "correction_table", "Bases: object"], [33, 2, 2, "leap.occurrence.Occurrence", "max_age", "Bases: object"], [33, 2, 2, "leap.occurrence.Occurrence", "parameters", "Bases: object"], [33, 2, 2, "leap.occurrence.Occurrence", "poly_parameters", "Bases: object"]], "leap.occurrence.Occurrence": [[33, 5, 1, 0, "calculate_odds_ratio_abx", "Calculate the odds ratio for asthma prevalence based on antibiotic exposure."], [33, 5, 1, 0, "calculate_odds_ratio_fam_history", "Calculate the odds ratio for asthma prevalence based on family history."], [33, 3, 1, 0, "correction_table", "A dataframe grouped by year, age, and sex."], [33, 5, 1, 0, "crude_occurrence", ""], [33, 5, 1, 0, "equation", "Compute the asthma incidence / prevalence for a given risk factor combination."], [33, 5, 1, 0, "load_occurrence_correction_table", "Load the asthma incidence correction table."], [33, 3, 1, 0, "max_age", "The maximum age of agents in the model."], [33, 3, 1, 0, "max_year", ""], [33, 3, 1, 0, "min_year", ""], [33, 3, 1, 0, "parameters", ""]], "leap.occurrence.Occurrence.calculate_odds_ratio_abx": [[33, 2, 2, 0, "age", "The age of the individual in years."], [33, 2, 2, 0, "dose", "The number of antibiotic courses taken in the first year of life, an integer in [0, 5], where 5 indicates 5 or more courses."]], "leap.occurrence.Occurrence.calculate_odds_ratio_fam_history": [[33, 2, 2, 0, "age", "The age of the individual in years."], [33, 2, 2, 0, "fam_hist", "The family history of asthma, an integer in [0, 1], where 1 indicates at least one parent has asthma."]], "leap.occurrence.Occurrence.crude_occurrence": [[33, 2, 2, "leap.occurrence.Occurrence.crude_occurrence", "age", ""], [33, 2, 2, "leap.occurrence.Occurrence.crude_occurrence", "sex", ""], [33, 2, 2, "leap.occurrence.Occurrence.crude_occurrence", "year", ""]], "leap.occurrence.Occurrence.equation": [[33, 2, 2, 0, "age", "The age of the agent."], [33, 2, 2, 0, "dose", "The number of courses of antibiotics taken during the first year of life."], [33, 2, 2, 0, "has_family_history", "True if one or more parents of the agent has asthma, otherwise False."], [33, 2, 2, 0, "sex", "The sex of the agent."], [33, 2, 2, 0, "year", "The calendar year."]], "leap.occurrence.Occurrence.load_occurrence_correction_table": [[33, 2, 2, "leap.occurrence.Occurrence.load_occurrence_correction_table", "occurrence_type", "Load the asthma incidence correction table."]], "leap.occurrence.Prevalence.__init__": [[33, 2, 2, "leap.occurrence.Prevalence", "config", "Bases: leap.occurrence.Occurrence"], [33, 2, 2, "leap.occurrence.Prevalence", "correction_table", "Bases: leap.occurrence.Occurrence"], [33, 2, 2, "leap.occurrence.Prevalence", "max_age", "Bases: leap.occurrence.Occurrence"], [33, 2, 2, "leap.occurrence.Prevalence", "parameters", "Bases: leap.occurrence.Occurrence"], [33, 2, 2, "leap.occurrence.Prevalence", "poly_parameters", "Bases: leap.occurrence.Occurrence"]], "leap.occurrence.Prevalence": [[33, 5, 1, 0, "crude_occurrence", "Calculate the crude asthma prevalence."], [33, 5, 1, 0, "load_occurrence_correction_table", "Load the asthma incidence correction table."], [33, 3, 1, 0, "parameters", "A dictionary containing the following keys:"], [33, 3, 1, 0, "poly_parameters", "A dictionary containing the following keys:"]], "leap.occurrence.Prevalence.crude_occurrence": [[33, 2, 2, 0, "age", "The age of the agent."], [33, 2, 2, 0, "sex", "The sex of the agent."], [33, 2, 2, 0, "year", "The calendar year."]], "leap.occurrence.agent_has_asthma": [[33, 2, 2, 0, "age", "The age of the agent."], [33, 2, 2, 0, "agent", "A person in the model."], [33, 2, 2, 0, "incidence", "Asthma incidence object."], [33, 2, 2, 0, "occurrence_type", "One of \"incidence\" or \"prevalence\"."], [33, 2, 2, 0, "prevalence", "Asthma prevalence object."], [33, 2, 2, 0, "year", "The calendar year."]], "leap.occurrence.compute_asthma_age": [[33, 2, 2, 0, "agent", "A person in the model."], [33, 2, 2, 0, "current_age", "The current age of the agent."], [33, 2, 2, 0, "incidence", "Asthma incidence."], [33, 2, 2, "leap.occurrence.compute_asthma_age", "max_asthma_age", "Compute the age at which the person (agent) is first diagnosed with asthma."], [33, 2, 2, 0, "prevalence", "Asthma prevalence."]], "leap.outcome_matrix": [[34, 1, 1, 0, "OutcomeMatrix", "A boolean indicating whether the simulation should run until all people have died."], [34, 1, 1, 0, "OutcomeTable", "The data for the table."], [34, 6, 1, 0, "combine_outcome_matrices", "Combine a list of outcome matrices into a single outcome matrix."], [34, 6, 1, 0, "combine_outcome_tables", "Combine a list of outcome tables into a single outcome table."]], "leap.outcome_matrix.OutcomeMatrix": [[34, 5, 1, 0, "__init__", "Initialize the OutcomeMatrix class."], [34, 3, 1, 0, "alive", "A table containing the number of people alive in each year, age, and sex."], [34, 3, 1, 0, "antibiotic_exposure", "A table containing the number of rounds of antibiotics for each year, age, and sex."], [34, 3, 1, 0, "asthma_incidence", "A table containing the number of new asthma diagnoses for each year, age, and sex."], [34, 3, 1, 0, "asthma_incidence_contingency_table", "TODO."], [34, 3, 1, 0, "asthma_prevalence", "A table containing the number of people with asthma for each year, age, and sex."], [34, 3, 1, 0, "asthma_prevalence_contingency_table", "TODO."], [34, 3, 1, 0, "asthma_status", "A table containing the status of asthma."], [34, 5, 1, 0, "combine", "Combine two outcome matrices via summation."], [34, 3, 1, 0, "control", "A table containing the level of asthma control for each year, age, and sex."], [34, 3, 1, 0, "cost", "A table containing the cost of asthma for each year, age, and sex."], [34, 5, 1, 0, "create_table", "Create an outcome table."], [34, 3, 1, 0, "death", "A table containing the number of people who died in a given year, age, and sex."], [34, 3, 1, 0, "emigration", "A table containing the number of people who emigrated to Canada for each year, age, and sex."], [34, 3, 1, 0, "exacerbation", "A table containing the number of asthma exacerbations for each year, age, and sex."], [34, 3, 1, 0, "exacerbation_by_severity", "A table containing the number of asthma exacerbations by severity."], [34, 3, 1, 0, "exacerbation_hospital", "A table containing the number of asthma exacerbations leading to hospitalization."], [34, 3, 1, 0, "family_history", "A table containing the number of people with a family history of asthma."], [34, 3, 1, 0, "immigration", "A table containing the number of people who immigrated to Canada for each year, age, and sex."], [34, 5, 1, 0, "save", "Save the outcome matrix to *.csv files."], [34, 3, 1, 0, "utility", "A table containing the utility due to asthma for each year, age, and sex."]], "leap.outcome_matrix.OutcomeMatrix.__init__": [[34, 2, 2, "leap.outcome_matrix.OutcomeMatrix", "max_age", "A boolean indicating whether the simulation should run until all people have died."], [34, 2, 2, "leap.outcome_matrix.OutcomeMatrix", "max_year", "A boolean indicating whether the simulation should run until all people have died."], [34, 2, 2, "leap.outcome_matrix.OutcomeMatrix", "min_year", "A boolean indicating whether the simulation should run until all people have died."], [34, 2, 2, "leap.outcome_matrix.OutcomeMatrix", "until_all_die", "A boolean indicating whether the simulation should run until all people have died."]], "leap.outcome_matrix.OutcomeMatrix.combine": [[34, 2, 2, 0, "outcome_matrix", "The outcome matrix to combine with this one."]], "leap.outcome_matrix.OutcomeMatrix.create_table": [[34, 2, 2, 0, "args", "TODO."], [34, 2, 2, 0, "columns", "The list of column names for the table."], [34, 2, 2, 0, "group_by", "The list of column names to group by."]], "leap.outcome_matrix.OutcomeMatrix.save": [[34, 2, 2, 0, "path", "The full path to the folder where the data will be saved."]], "leap.outcome_matrix.OutcomeTable": [[34, 5, 1, 0, "__init__", "Create an outcome table."], [34, 5, 1, 0, "combine", "Combine two outcome tables via summation."], [34, 5, 1, 0, "get", "Get the value of a column in the table."], [34, 5, 1, 0, "increment", "Increment the value of a column in the table."]], "leap.outcome_matrix.OutcomeTable.__init__": [[34, 2, 2, "leap.outcome_matrix.OutcomeTable", "data", "The data for the table."], [34, 2, 2, "leap.outcome_matrix.OutcomeTable", "group_by", "The data for the table."]], "leap.outcome_matrix.OutcomeTable.combine": [[34, 2, 2, 0, "columns", "The columns to combine."], [34, 2, 2, 0, "outcome_table", "The outcome table to combine with this one."]], "leap.outcome_matrix.OutcomeTable.get": [[34, 2, 2, 0, "columns", "The column(s) to get the value from."], [34, 2, 2, 0, "kwargs", "A dictionary of columns to filter by."]], "leap.outcome_matrix.OutcomeTable.increment": [[34, 2, 2, 0, "amount", "The amount to increment the column by."], [34, 2, 2, 0, "column", "The column to increment."], [34, 2, 2, 0, "filter_columns", "A dictionary of columns to filter by."]], "leap.outcome_matrix.combine_outcome_matrices": [[34, 2, 2, 0, "outcome_matrices", "A list of OutcomeMatrix instances to combine."]], "leap.outcome_matrix.combine_outcome_tables": [[34, 2, 2, 0, "column", "The column to sum across the outcome tables."], [34, 2, 2, 0, "outcome_tables", "A list of OutcomeTable instances to combine."]], "leap.pollution": [[35, 1, 1, 0, "GribData", "Bases: object"], [35, 1, 1, 0, "Pollution", "Bases: object"], [35, 1, 1, 0, "PollutionTable", "Bases: object"], [35, 6, 1, 0, "add_record_to_df", "Add a new column to the grib data frame."], [35, 6, 1, 0, "get_data_average", "Find the mean of all the value_* columns, and return a GribData object."], [35, 6, 1, 0, "invert_longitude", "Convert between + degrees East of the Prime Meridian and - degrees West of the Prime Meridian."], [35, 6, 1, 0, "load_grib_files", "Load multiple *.grib2 files and amalgamate the data by taking the mean."]], "leap.pollution.GribData.__init__": [[35, 2, 2, "leap.pollution.GribData", "day", "Bases: object"], [35, 2, 2, "leap.pollution.GribData", "file_path", "Bases: object"], [35, 2, 2, "leap.pollution.GribData", "latitudes", "Bases: object"], [35, 2, 2, "leap.pollution.GribData", "longitudes", "Bases: object"], [35, 2, 2, "leap.pollution.GribData", "month", "Bases: object"], [35, 2, 2, "leap.pollution.GribData", "projection", "Bases: object"], [35, 2, 2, "leap.pollution.GribData", "values", "Bases: object"], [35, 2, 2, "leap.pollution.GribData", "year", "Bases: object"]], "leap.pollution.GribData": [[35, 4, 1, 0, "day", "day the data was collected."], [35, 4, 1, 0, "latitudes", "a list of latitude values."], [35, 5, 1, 0, "load_file", "Load a *.grib2 file and amalgamate the data by taking the mean."], [35, 4, 1, 0, "longitudes", "a list of longitude values."], [35, 4, 1, 0, "month", "month the data was collected."], [35, 4, 1, 0, "projection", "which map projection was used. See gridType on the GRIB keys page."], [35, 5, 1, 0, "save", "Save the GribData object to a *.csv file."], [35, 4, 1, 0, "values", "a list of the values of interest at a specified longitude and latitude. For example, it could be the PM2.5 concentration."], [35, 4, 1, 0, "year", "year the data was collected."]], "leap.pollution.GribData.load_file": [[35, 2, 2, 0, "file_path", "Full file name of *.csv file to load the data from."]], "leap.pollution.GribData.save": [[35, 2, 2, 0, "file_path", "Full file name of *.csv file to save the data to."]], "leap.pollution.Pollution": [[35, 4, 1, 0, "SSP", "The Shared Socioeconomic Pathway (SSP) scenario from the IPCC, one of:"], [35, 4, 1, 0, "cduid", "the census division identifier."], [35, 4, 1, 0, "month", "the month for the pollution data projection."], [35, 4, 1, 0, "total_pm25", "the total average PM2.5 levels for a given month: wildfire_pm25_scaled + background_pm25."], [35, 4, 1, 0, "wildfire_pm25_scaled", "wildfire_pm25 * factor."], [35, 4, 1, 0, "year", "the year for the pollution data projection."]], "leap.pollution.Pollution.__init__": [[35, 2, 2, "leap.pollution.Pollution", "SSP", "Bases: object"], [35, 2, 2, "leap.pollution.Pollution", "cduid", "Bases: object"], [35, 2, 2, "leap.pollution.Pollution", "month", "Bases: object"], [35, 2, 2, "leap.pollution.Pollution", "pollution_table", "Bases: object"], [35, 2, 2, "leap.pollution.Pollution", "year", "Bases: object"]], "leap.pollution.PollutionTable.__init__": [[35, 2, 2, "leap.pollution.PollutionTable", "data", "Bases: object"]], "leap.pollution.PollutionTable": [[35, 5, 1, 0, "copy", ""], [35, 3, 1, 0, "data", "A data frame grouped by the SSP scenario, with the following columns:"], [35, 5, 1, 0, "load_pollution_data", "Load the data from the PM2.5 SSP *.csv files."]], "leap.pollution.PollutionTable.copy": [[35, 2, 2, "leap.pollution.PollutionTable.copy", "deep", ""]], "leap.pollution.PollutionTable.load_pollution_data": [[35, 2, 2, 0, "pm25_data_path", "Full directory path for the PM2.5 *.csv files."]], "leap.pollution.add_record_to_df": [[35, 2, 2, 0, "df", "A data frame with the following columns:"], [35, 2, 2, 0, "index", "The index of the iteration loop."], [35, 2, 2, 0, "latitudes", "An array of latitude values."], [35, 2, 2, 0, "longitudes", "An array of longitude values."], [35, 2, 2, 0, "values", "An array of the values of interest at a specified longitude and latitude. For example, it could be the PM2.5 concentration."]], "leap.pollution.get_data_average": [[35, 2, 2, 0, "df", "A data frame with the following columns:"]], "leap.pollution.invert_longitude": [[35, 2, 2, 0, "longitude", "a number in [0, 360) giving the degrees east or west of the Prime Meridian."]], "leap.pollution.load_grib_files": [[35, 2, 2, 0, "folder", "The folder containing the .grib2 files to open."], [35, 2, 2, 0, "recursive", "If True, iterate through all subdirectories and compute an aggregate average."]], "leap.reassessment": [[36, 1, 1, 0, "Reassessment", "Bases: object"]], "leap.reassessment.Reassessment.__init__": [[36, 2, 2, "leap.reassessment.Reassessment", "province", "Bases: object"], [36, 2, 2, "leap.reassessment.Reassessment", "starting_year", "Bases: object"], [36, 2, 2, "leap.reassessment.Reassessment", "table", "Bases: object"]], "leap.reassessment.Reassessment": [[36, 5, 1, 0, "agent_has_asthma", "If an agent has been diagnosed with asthma, determine whether the agent still has asthma."], [36, 5, 1, 0, "load_reassessment_table", "Load the asthma diagnosis reassessment table."], [36, 3, 1, 0, "table", "Grouped dataframe (by year) giving the probability of an agent still having asthma after reassessment for a given age, province, and sex:"]], "leap.reassessment.Reassessment.agent_has_asthma": [[36, 2, 2, 0, "agent", "A person in the model."]], "leap.reassessment.Reassessment.load_reassessment_table": [[36, 2, 2, 0, "province", "a string indicating the province abbreviation, e.g."], [36, 2, 2, 0, "starting_year", "the year to start the data at."]], "leap.severity": [[37, 1, 1, 0, "ExacerbationSeverity", "Bases: object"], [37, 1, 1, 0, "ExacerbationSeverityHistory", "Bases: object"], [37, 1, 1, 0, "SeverityLevels", "Bases: object"]], "leap.severity.ExacerbationSeverity.__init__": [[37, 2, 2, "leap.severity.ExacerbationSeverity", "config", "Bases: object"], [37, 2, 2, "leap.severity.ExacerbationSeverity", "hyperparameters", "Bases: object"], [37, 2, 2, "leap.severity.ExacerbationSeverity", "parameters", "Bases: object"]], "leap.severity.ExacerbationSeverity": [[37, 5, 1, 0, "assign_random_p", "Compute the probability vector p from the Dirichlet distribution."], [37, 5, 1, 0, "compute_distribution", "Compute the exacerbation severity distribution."], [37, 5, 1, 0, "compute_hospitalization_prob", "Determine whether a person has been hospitalized due to an asthma exacerbation."], [37, 3, 1, 0, "hyperparameters", "A dictionary containing the hyperparameters used in the Dirichlet-multinomial distribution."], [37, 3, 1, 0, "parameters", "A dictionary containing the following keys:"], [37, 3, 1, 0, "severity_levels", "The probability of each asthma exacerbation severity level."]], "leap.severity.ExacerbationSeverity.compute_distribution": [[37, 2, 2, 0, "age", "the age of the person in years."], [37, 2, 2, 0, "num_current_year", "the number of asthma exacerbations the patient has had this year. Will be used as the number of trials in the Multinomial distribution."], [37, 2, 2, 0, "prev_hosp", "has patient been previously hospitalized for asthma?"]], "leap.severity.ExacerbationSeverity.compute_hospitalization_prob": [[37, 2, 2, 0, "agent", "A person in the simulation."], [37, 2, 2, 0, "control", "Asthma control module."], [37, 2, 2, 0, "exacerbation", "Asthma exacerbation module."]], "leap.severity.ExacerbationSeverityHistory.__init__": [[37, 2, 2, "leap.severity.ExacerbationSeverityHistory", "current_year", "Bases: object"], [37, 2, 2, "leap.severity.ExacerbationSeverityHistory", "prev_year", "Bases: object"]], "leap.severity.ExacerbationSeverityHistory": [[37, 4, 1, 0, "current_year", "An array of 4 integers indicating the number of exacerbations for that severity level in the current year."], [37, 4, 1, 0, "prev_year", "An array of 4 integers indicating the number of exacerbations for that severity level in the previous year."]], "leap.severity.SeverityLevels.__init__": [[37, 2, 2, "leap.severity.SeverityLevels", "mild", "Bases: object"], [37, 2, 2, "leap.severity.SeverityLevels", "moderate", "Bases: object"], [37, 2, 2, "leap.severity.SeverityLevels", "severe", "Bases: object"], [37, 2, 2, "leap.severity.SeverityLevels", "very_severe", "Bases: object"]], "leap.severity.SeverityLevels": [[37, 5, 1, 0, "as_array", "Return the severity levels as an array."], [37, 4, 1, 0, "mild", "The probability of an asthma exacerbation being mild."], [37, 4, 1, 0, "moderate", "The probability of an asthma exacerbation being moderate."], [37, 4, 1, 0, "severe", "The probability of an asthma exacerbation being severe."], [37, 4, 1, 0, "very_severe", "The probability of an asthma exacerbation being very severe"]], "leap.simulation": [[38, 1, 1, 0, "Simulation", "Bases: object"]], "leap.simulation.Simulation.__init__": [[38, 2, 2, "leap.simulation.Simulation", "config", "Bases: object"], [38, 2, 2, "leap.simulation.Simulation", "ignore_pollution_flag", "Bases: object"], [38, 2, 2, "leap.simulation.Simulation", "max_age", "Bases: object"], [38, 2, 2, "leap.simulation.Simulation", "min_year", "Bases: object"], [38, 2, 2, "leap.simulation.Simulation", "num_births_initial", "Bases: object"], [38, 2, 2, "leap.simulation.Simulation", "population_growth_type", "Bases: object"], [38, 2, 2, "leap.simulation.Simulation", "province", "Bases: object"], [38, 2, 2, "leap.simulation.Simulation", "time_horizon", "Bases: object"], [38, 2, 2, "leap.simulation.Simulation", "until_all_die", "Bases: object"]], "leap.simulation.Simulation": [[38, 5, 1, 0, "check_if_agent_gets_new_asthma_diagnosis", "Check if the agent gets a new asthma diagnosis."], [38, 5, 1, 0, "generate_initial_asthma", "Generate the initial asthma status for an agent."], [38, 5, 1, 0, "get_new_agents", "Get the new agents born/immigrated in a given year."], [38, 5, 1, 0, "get_num_new_agents", "Get the number of new agents born/immigrated in a given year."], [38, 3, 1, 0, "max_age", "The maximum age of the agents in the simulation."], [38, 3, 1, 0, "max_time_horizon", "The maximum number of years the simulation will run for."], [38, 3, 1, 0, "min_year", "The starting year of the simulation."], [38, 3, 1, 0, "num_births_initial", "The number of births in the initial year of the simulation."], [38, 3, 1, 0, "population_growth_type", "Population growth type to be used in the simulation."], [38, 3, 1, 0, "province", "The 2-letter abbreviation of the province in the simulation."], [38, 5, 1, 0, "reassess_asthma_diagnosis", "Reassess if the agent has asthma."], [38, 5, 1, 0, "run", "Run the simulation."], [38, 5, 1, 0, "simulate_agent", "Simulate a new agent in the model."], [38, 3, 1, 0, "time_horizon", "The number of years the simulation will run for."], [38, 3, 1, 0, "until_all_die", "Whether to run the simulation until all agents die."], [38, 5, 1, 0, "update_asthma_effects", "Update the asthma effects for an agent."], [38, 5, 1, 0, "worker", "Worker function for multiprocessing."]], "leap.simulation.Simulation.check_if_agent_gets_new_asthma_diagnosis": [[38, 2, 2, 0, "agent", "An agent (person) in the model."], [38, 2, 2, 0, "outcome_matrix", "The outcome matrix."]], "leap.simulation.Simulation.generate_initial_asthma": [[38, 2, 2, 0, "agent", "A person in the model."]], "leap.simulation.Simulation.get_new_agents": [[38, 2, 2, 0, "year", "The calendar year."]], "leap.simulation.Simulation.get_num_new_agents": [[38, 2, 2, 0, "min_year", "The calendar year of the initial iteration, e.g."], [38, 2, 2, 0, "num_immigrants", "The number of immigrants who moved to Canada in the specified year."], [38, 2, 2, 0, "num_new_born", "The number of babies born in the specified year."], [38, 2, 2, 0, "year", "The calendar year of the current iteration, e.g."]], "leap.simulation.Simulation.reassess_asthma_diagnosis": [[38, 2, 2, 0, "agent", "An agent (person) in the model."], [38, 2, 2, 0, "outcome_matrix", "The outcome matrix."]], "leap.simulation.Simulation.run": [[38, 2, 2, 0, "min_agents_mp", "The minimum number of agents to use multiprocessing for."], [38, 2, 2, 0, "n_cpu", "The number of CPUs to use for multiprocessing."], [38, 2, 2, 0, "seed", "The random seed to use for the simulation."], [38, 2, 2, 0, "until_all_die", "Whether to run the simulation until all agents die."]], "leap.simulation.Simulation.simulate_agent": [[38, 2, 2, 0, "age", "The age of the agent."], [38, 2, 2, 0, "is_immigrant", "Whether or not the agent (person) is an immigrant."], [38, 2, 2, 0, "month", "The month of the year when the agent is born/immigrates."], [38, 2, 2, 0, "sex", "One of \"M\" or \"F\"."], [38, 2, 2, 0, "year", "The current year of the simulation."], [38, 2, 2, 0, "year_index", "The index of the current year in the simulation."]], "leap.simulation.Simulation.update_asthma_effects": [[38, 2, 2, 0, "agent", "An agent (person) in the model."], [38, 2, 2, 0, "outcome_matrix", "The outcome matrix."]], "leap.simulation.Simulation.worker": [[38, 2, 2, 0, "indices", "A list of indices of the new agents to simulate."], [38, 2, 2, 0, "month", "The month of the year when the agent is born/immigrates."], [38, 2, 2, 0, "new_agents_df", "A dataframe containing the new agents to simulate."], [38, 2, 2, 0, "process_id", "The ID for the process."], [38, 2, 2, 0, "queue", "A queue for returning the results and updating the progress bar."], [38, 2, 2, 0, "year", "The current year of the simulation."], [38, 2, 2, 0, "year_index", "The index of the current year in the simulation."]], "leap.utility": [[39, 1, 1, 0, "Utility", "Bases: object"]], "leap.utility.Utility.__init__": [[39, 2, 2, "leap.utility.Utility", "config", "Bases: object"], [39, 2, 2, "leap.utility.Utility", "parameters", "Bases: object"], [39, 2, 2, "leap.utility.Utility", "table", "Bases: object"]], "leap.utility.Utility": [[39, 5, 1, 0, "compute_utility", "Compute the utility for the current year due to asthma exacerbations and control."], [39, 5, 1, 0, "load_eq5d", ""], [39, 3, 1, "id0", "parameters", "A dictionary containing the following keys:"], [39, 4, 1, 0, "table", "A grouped data frame grouped by age and sex, containing information about EuroQol Group's quality of life metric called the EQ-5D. Each data frame contains the following columns:"]], "leap.utility.Utility.compute_utility": [[39, 2, 2, 0, "agent", "A person in the model."]], "leap.utils": [[40, 1, 1, 0, "Sex", "The value of the sex variable."], [40, 1, 1, 0, "UUID4", "Bases: object"], [40, 6, 1, 0, "check_cduid", "Check if the CDUID is valid."], [40, 6, 1, 0, "check_file", "Check if file is a valid file with correct extension."], [40, 6, 1, 0, "check_projection_scenario", "Check if the projection scenario is valid."], [40, 6, 1, 0, "check_province", "Check if the province is valid."], [40, 6, 1, 0, "check_year", "Check if the year is valid."], [40, 6, 1, 0, "compute_ordinal_regression", "Compute the probability that y = k for each value of k."], [40, 6, 1, 0, "convert_non_serializable", "Convert non-serializable objects into JSON-friendly formats."], [40, 6, 1, 0, "create_process_bars", "Create a list of tqdm progress bars for each process."], [40, 6, 1, 0, "get_chunk_indices", "Get the indices for chunks of size chunk_size from a total of n items."], [40, 6, 1, 0, "get_data_path", "Get the full path to a data file or folder in the LEAP package."], [40, 6, 1, 0, "poly", "Generate a polynomial basis for a vector."], [40, 6, 1, 0, "round_number", "Rounds a number to number of significant figures or digits."], [40, 6, 1, 0, "timer", ""]], "leap.utils.Sex": [[40, 5, 1, 0, "__init__", "Initialize the Sex class."]], "leap.utils.Sex.__init__": [[40, 2, 2, "leap.utils.Sex", "value", "The value of the sex variable."]], "leap.utils.UUID4.__init__": [[40, 2, 2, "leap.utils.UUID4", "short", "Bases: object"], [40, 2, 2, "leap.utils.UUID4", "uuid4", "Bases: object"]], "leap.utils.check_cduid": [[40, 2, 2, 0, "cduid", "The census division unique identifier."], [40, 2, 2, 0, "df", "The DataFrame to check."]], "leap.utils.check_file": [[40, 2, 2, 0, "ext", "A file extension, including the \".\", e.g."], [40, 2, 2, 0, "file_path", "The full path to the file."]], "leap.utils.check_projection_scenario": [[40, 2, 2, 0, "projection_scenario", "The projection scenario abbreviation."]], "leap.utils.check_province": [[40, 2, 2, 0, "province", "The province abbreviation."]], "leap.utils.check_year": [[40, 2, 2, 0, "df", "The DataFrame to check."], [40, 2, 2, 0, "year", "The minimum year."]], "leap.utils.convert_non_serializable": [[40, 2, 2, 0, "obj", "The object to be converted."]], "leap.utils.create_process_bars": [[40, 2, 2, 0, "chunk_indices", "A list of tuples containing the start and end indices for each chunk."], [40, 2, 2, 0, "position_offset", "The position offset for the progress bars in the tqdm display."]], "leap.utils.get_chunk_indices": [[40, 2, 2, 0, "chunk_size", "The size of each chunk."], [40, 2, 2, 0, "n", "The total number of items."]], "leap.utils.get_data_path": [[40, 2, 2, 0, "data_path", "The path to the file or folder."]], "leap.utils.poly": [[40, 2, 2, "leap.utils.poly", "alpha", "Generate a polynomial basis for a vector."], [40, 2, 2, 0, "degree", "The degree of the polynomial."], [40, 2, 2, "leap.utils.poly", "norm2", "Generate a polynomial basis for a vector."], [40, 2, 2, 0, "orthogonal", "Whether to generate an orthogonal polynomial basis."], [40, 2, 2, 0, "x", "The vector to generate the polynomial basis for."]], "leap.utils.round_number": [[40, 2, 2, 0, "digits", "The number of decimal places to round to."], [40, 2, 2, 0, "sigdigits", "The number of significant figures to round to."], [40, 2, 2, 0, "x", "The number to be rounded."]], "leap.utils.timer": [[40, 2, 2, "leap.utils.timer", "log_level", ""]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:property", "4": "py:attribute", "5": "py:method", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "method", "Python method"], "6": ["py", "function", "Python function"]}, "titleterms": {"1": [0, 42, 47, 51, 52], "run": [0, 2, 3], "simul": [0, 3, 38], "argument": 0, "exampl": [0, 51, 52], "config": 1, "json": 1, "leap": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 47], "model": [3, 48, 49, 50, 51, 52, 53], "valid": 3, "notebook": 3, "setup": [3, 47], "environ": [3, 47], "obtain": 3, "data": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 44, 50], "constant": 3, "paramet": [3, 52], "popul": 3, "pyramid": 3, "figur": 3, "load": 3, "process": [3, 50], "visual": 3, "mortal": 3, "immigr": [3, 30], "emigr": [3, 27], "infant": 3, "antibiot": [3, 5, 49, 52], "exposur": [3, 46, 49], "asthma": [3, 46, 50, 52], "control": [3, 7, 24, 50], "level": 3, "exacerb": [3, 9, 28], "sever": [3, 37], "veri": 3, "hospit": 3, "gener": [4, 49, 51, 52], "data_gener": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "antibiotic_data": 5, "modul": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "birth": [6, 22], "birth_data": 6, "control_data": 7, "death": [8, 26], "death_data": 8, "calibr": [9, 10, 12, 14], "exacerbation_data": 9, "incid": [10, 52], "incidence_calibr": 10, "migrat": 11, "migration_data": 11, "import": 11, "occurr": [12, 13, 33, 52], "warn": 12, "occurrence_calibration_data": 12, "occurrence_data": 13, "preval": [14, 52], "prevalence_calibr": 14, "reassess": [15, 36, 52], "reassessment_data": 15, "util": [16, 17, 39, 40, 53], "utility_data": 16, "api": 18, "agent": 20, "antibiotic_exposur": 21, "census_divis": 23, "cost": 25, "family_histori": 29, "logger": 31, "main": 32, "outcome_matrix": 34, "pollut": 35, "note": [37, 44], "sphinx": 41, "document": 41, "autodoc": 41, "immateri": 41, "theme": 41, "github": [41, 44], "page": 41, "instal": [42, 47], "r": 42, "maco": [42, 47], "linux": 42, "ubuntu": 42, "debian": 42, "window": 42, "2": [42, 47, 52], "pandoc": 42, "3": [42, 47], "git": [42, 47], "lf": [42, 44], "releas": 43, "creat": [43, 47], "test": 44, "doctest": 44, "action": 44, "entir": 44, "suit": 44, "test_workflow_lf": 44, "yml": 44, "ad": 44, "new": [44, 52], "workflow": 44, "file": 44, "develop": [45, 47], "lifetim": 46, "outcom": 46, "project": 46, "get": 46, "start": 46, "step": 47, "python": 47, "choos": 47, "folder": 47, "virtual": 47, "4": 47, "option": 47, "token": 47, "5": 47, "6": 47, "success": 47, "dataset": [49, 52, 53], "linear": [49, 51, 52], "neg": 49, "binomi": 49, "probabl": [49, 52], "distribut": [49, 51, 52], "link": [49, 51, 52], "function": [49, 51, 52], "formula": [49, 52], "raw": 50, "ordin": 50, "regress": [50, 51], "random": 50, "effect": 50, "fit": 50, "eba": 50, "predict": 50, "background": 51, "ordinari": 51, "glm": 51, "predictor": 51, "invalid": 51, "exponenti": 51, "ident": 51, "crude": 52, "poisson": 52, "risk": 52, "factor": 52, "famili": 52, "histori": 52, "solv": 52, "correct": 52, "term": 52, "optim": 52, "initi": 52, "beta": 52, "equat": 52, "past": 52, "conting": 52, "tabl": 52, "current": 52, "diagnosi": 52, "eq5d": 53, "calcul": 53, "refer": 54}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"1. Run the Simulation": [[0, "run-the-simulation"]], "Simulation Arguments": [[0, "simulation-arguments"]], "Examples": [[0, "examples"], [51, "Examples"]], "config.json": [[1, "config-json"]], "Running LEAP": [[2, "running-leap"]], "LEAP Model Validation": [[3, "LEAP-Model-Validation"]], "Notebook setup": [[3, "Notebook-setup"]], "Environment setup": [[3, "Environment-setup"]], "Running Simulation to Obtain Data": [[3, "Running-Simulation-to-Obtain-Data"]], "Constants and Parameters": [[3, "Constants-and-Parameters"]], "Population Pyramid Figure": [[3, "Population-Pyramid-Figure"]], "Load Data": [[3, "Load-Data"], [3, "id1"], [3, "id4"], [3, "id6"], [3, "id9"], [3, "id12"], [3, "id15"]], "Process Data": [[3, "Process-Data"], [3, "id2"], [3, "id7"], [3, "id10"], [3, "id13"], [3, "id16"]], "Visualize Data": [[3, "Visualize-Data"], [3, "id3"], [3, "id5"], [3, "id8"], [3, "id11"], [3, "id14"], [3, "id17"]], "Mortality Figure": [[3, "Mortality-Figure"]], "Immigration / Emigration Figure": [[3, "Immigration-/-Emigration-Figure"]], "Infant Antibiotic Exposure Figure": [[3, "Infant-Antibiotic-Exposure-Figure"]], "Asthma Control Level Figure": [[3, "Asthma-Control-Level-Figure"]], "Asthma Exacerbation Severity Figure": [[3, "Asthma-Exacerbation-Severity-Figure"]], "Very Severe (Hospitalizations) Figure": [[3, "Very-Severe-(Hospitalizations)-Figure"]], "Data Generation": [[4, "data-generation"]], "Antibiotic Data": [[5, "antibiotic-data"]], "leap.data_generation.antibiotic_data module": [[5, "module-leap.data_generation.antibiotic_data"]], "Birth Data": [[6, "birth-data"]], "leap.data_generation.birth_data module": [[6, "module-leap.data_generation.birth_data"]], "Control Data": [[7, "control-data"]], "leap.data_generation.control_data module": [[7, "leap-data-generation-control-data-module"]], "Death Data": [[8, "death-data"]], "leap.data_generation.death_data module": [[8, "module-leap.data_generation.death_data"]], "Exacerbation Calibration Data": [[9, "exacerbation-calibration-data"]], "leap.data_generation.exacerbation_data module": [[9, "module-leap.data_generation.exacerbation_data"]], "Incidence Calibration": [[10, "incidence-calibration"]], "leap.data_generation.incidence_calibration module": [[10, "module-leap.data_generation.incidence_calibration"]], "Migration Data": [[11, "migration-data"]], "leap.data_generation.migration_data module": [[11, "module-leap.data_generation.migration_data"]], "Important": [[11, null]], "Occurrence Calibration Data": [[12, "occurrence-calibration-data"]], "Warning": [[12, null]], "leap.data_generation.occurrence_calibration_data module": [[12, "module-leap.data_generation.occurrence_calibration_data"]], "Occurrence Data": [[13, "occurrence-data"]], "leap.data_generation.occurrence_data module": [[13, "module-leap.data_generation.occurrence_data"]], "Prevalence Calibration": [[14, "prevalence-calibration"]], "leap.data_generation.prevalence_calibration module": [[14, "module-leap.data_generation.prevalence_calibration"]], "Reassessment Data": [[15, "reassessment-data"]], "leap.data_generation.reassessment_data module": [[15, "module-leap.data_generation.reassessment_data"]], "Utility Data": [[16, "utility-data"]], "leap.data_generation.utility_data module": [[16, "module-leap.data_generation.utility_data"]], "leap.data_generation.utils module": [[17, "module-leap.data_generation.utils"]], "API": [[18, "api"]], "LEAP": [[19, "leap"]], "leap.agent module": [[20, "module-leap.agent"]], "leap.antibiotic_exposure module": [[21, "module-leap.antibiotic_exposure"]], "leap.birth module": [[22, "module-leap.birth"]], "leap.census_division module": [[23, "module-leap.census_division"]], "leap.control module": [[24, "module-leap.control"]], "leap.cost module": [[25, "module-leap.cost"]], "leap.death module": [[26, "module-leap.death"]], "leap.emigration module": [[27, "module-leap.emigration"]], "leap.exacerbation module": [[28, "module-leap.exacerbation"]], "leap.family_history module": [[29, "module-leap.family_history"]], "leap.immigration module": [[30, "module-leap.immigration"]], "leap.logger module": [[31, "module-leap.logger"]], "leap.main module": [[32, "module-leap.main"]], "leap.occurrence module": [[33, "module-leap.occurrence"]], "leap.outcome_matrix module": [[34, "module-leap.outcome_matrix"]], "leap.pollution module": [[35, "module-leap.pollution"]], "leap.reassessment module": [[36, "module-leap.reassessment"]], "leap.severity module": [[37, "module-leap.severity"]], "Note": [[37, null], [44, null], [44, null]], "leap.simulation module": [[38, "module-leap.simulation"]], "leap.utility module": [[39, "module-leap.utility"]], "leap.utils module": [[40, "module-leap.utils"]], "Sphinx Documentation": [[41, "sphinx-documentation"]], "autodoc": [[41, "autodoc"]], "Sphinx-Immaterial Theme": [[41, "sphinx-immaterial-theme"]], "GitHub Pages": [[41, "github-pages"]], "Installation": [[42, "installation"], [47, "installation"]], "1. Install R": [[42, "install-r"]], "MacOS": [[42, "macos"], [42, "id1"], [42, "id4"], [47, "macos"]], "Linux (Ubuntu/Debian)": [[42, "linux-ubuntu-debian"], [42, "id2"], [42, "id5"]], "Windows": [[42, "windows"], [42, "id3"], [42, "id6"]], "2. Install pandoc": [[42, "install-pandoc"]], "3. Install git-lfs": [[42, "install-git-lfs"]], "1. Install LEAP": [[42, "install-leap"]], "Releases": [[43, "releases"]], "Creating a Release": [[43, "creating-a-release"]], "Testing": [[44, "testing"]], "Doctests": [[44, "doctests"]], "Test Data": [[44, "test-data"]], "GitHub Actions": [[44, "github-actions"]], "Entire Test Suite with LFS (test_workflow_lfs.yml)": [[44, "entire-test-suite-with-lfs-test-workflow-lfs-yml"]], "Adding New Tests": [[44, "adding-new-tests"]], "Test Workflow Files": [[44, "test-workflow-files"]], "Developers": [[45, "developers"], [47, "developers"]], "LEAP: Lifetime Exposures and Asthma outcomes Projection": [[46, "leap-lifetime-exposures-and-asthma-outcomes-projection"]], "Getting Started": [[46, "getting-started"]], "Step 1: Install Python": [[47, "step-1-install-python"]], "Step 2: Choose Install Folder": [[47, "step-2-choose-install-folder"]], "Step 3: Create a Virtual Environment": [[47, "step-3-create-a-virtual-environment"]], "Step 4: (Optional) Setup Git Token": [[47, "step-4-optional-setup-git-token"]], "Step 5: Install LEAP": [[47, "step-5-install-leap"]], "Step 6: Install Success!": [[47, "step-6-install-success"]], "Model": [[48, "model"], [50, "model"]], "Antibiotic Exposure Model": [[49, "antibiotic-exposure-model"]], "Datasets": [[49, "datasets"], [52, "datasets"], [52, "id1"], [53, "datasets"]], "Model: Generalized Linear Model - Negative Binomial": [[49, "model-generalized-linear-model-negative-binomial"]], "Probability Distribution": [[49, "probability-distribution"], [52, "probability-distribution"]], "Link Function": [[49, "link-function"], [52, "link-function"]], "Formula": [[49, "formula"], [52, "formula"], [52, "id2"]], "Asthma Control Model": [[50, "asthma-control-model"]], "Data": [[50, "data"]], "Raw Data": [[50, "raw-data"]], "Processed Data": [[50, "processed-data"]], "Ordinal Regression": [[50, "ordinal-regression"]], "Random Effects": [[50, "random-effects"]], "Fitting the Model with EBA Data": [[50, "fitting-the-model-with-eba-data"]], "Predictions": [[50, "predictions"]], "Generalized Linear Models": [[51, "Generalized-Linear-Models"]], "Background: Ordinary Linear Regression": [[51, "Background:-Ordinary-Linear-Regression"]], "GLM: Linear Predictor": [[51, "GLM:-Linear-Predictor"]], "Invalid Examples": [[51, "Invalid-Examples"]], "GLM: Exponential Distribution": [[51, "GLM:-Exponential-Distribution"]], "GLM: Link Function": [[51, "GLM:-Link-Function"]], "Example 1: Identity Link Function, Ordinary Linear Regression": [[51, "Example-1:-Identity-Link-Function,-Ordinary-Linear-Regression"]], "Asthma Occurrence Model": [[52, "asthma-occurrence-model"]], "Occurrence Model 1: Crude Occurrence": [[52, "occurrence-model-1-crude-occurrence"]], "Model: Generalized Linear Model - Poisson": [[52, "model-generalized-linear-model-poisson"]], "Occurrence Model 2: Risk Factors": [[52, "occurrence-model-2-risk-factors"]], "Model: Risk Factors": [[52, "model-risk-factors"]], "Antibiotic Risk Factors": [[52, "antibiotic-risk-factors"]], "Family History Risk Factors": [[52, "family-history-risk-factors"]], "Solving for the Correction Term: Prevalence": [[52, "solving-for-the-correction-term-prevalence"]], "Solving for the Correction Term: Incidence": [[52, "solving-for-the-correction-term-incidence"]], "Optimizing the Initial Beta Parameters for the Incidence Equation": [[52, "optimizing-the-initial-beta-parameters-for-the-incidence-equation"]], "Example": [[52, "example"]], "Past Contingency Table": [[52, "past-contingency-table"]], "Current Contingency Table: Reassessment": [[52, "current-contingency-table-reassessment"]], "Current Contingency Table: New Diagnosis": [[52, "current-contingency-table-new-diagnosis"]], "Current Contingency Table": [[52, "current-contingency-table"]], "Optimization": [[52, "optimization"]], "Utility Model": [[53, "utility-model"]], "EQ5D": [[53, "eq5d"]], "Calculating Utility": [[53, "calculating-utility"]], "References": [[54, "references"]]}, "indexentries": {"estimate_alpha() (in module leap.data_generation.antibiotic_data)": [[5, "leap.data_generation.antibiotic_data.estimate_alpha"]], "generate_antibiotic_data() (in module leap.data_generation.antibiotic_data)": [[5, "leap.data_generation.antibiotic_data.generate_antibiotic_data"]], "generate_antibiotic_model() (in module leap.data_generation.antibiotic_data)": [[5, "leap.data_generation.antibiotic_data.generate_antibiotic_model"]], "get_predicted_abx_data() (in module leap.data_generation.antibiotic_data)": [[5, "leap.data_generation.antibiotic_data.get_predicted_abx_data"]], "leap.data_generation.antibiotic_data": [[5, "module-leap.data_generation.antibiotic_data"]], "load_antibiotic_data() (in module leap.data_generation.antibiotic_data)": [[5, "leap.data_generation.antibiotic_data.load_antibiotic_data"]], "load_birth_data() (in module leap.data_generation.antibiotic_data)": [[5, "leap.data_generation.antibiotic_data.load_birth_data"]], "module": [[5, "module-leap.data_generation.antibiotic_data"], [6, "module-leap.data_generation.birth_data"], [8, "module-leap.data_generation.death_data"], [9, "module-leap.data_generation.exacerbation_data"], [10, "module-leap.data_generation.incidence_calibration"], [11, "module-leap.data_generation.migration_data"], [12, "module-leap.data_generation.occurrence_calibration_data"], [13, "module-leap.data_generation.occurrence_data"], [14, "module-leap.data_generation.prevalence_calibration"], [15, "module-leap.data_generation.reassessment_data"], [16, "module-leap.data_generation.utility_data"], [17, "module-leap.data_generation.utils"], [20, "module-leap.agent"], [21, "module-leap.antibiotic_exposure"], [22, "module-leap.birth"], [23, "module-leap.census_division"], [24, "module-leap.control"], [25, "module-leap.cost"], [26, "module-leap.death"], [27, "module-leap.emigration"], [28, "module-leap.exacerbation"], [29, "module-leap.family_history"], [30, "module-leap.immigration"], [31, "module-leap.logger"], [32, "module-leap.main"], [33, "module-leap.occurrence"], [34, "module-leap.outcome_matrix"], [35, "module-leap.pollution"], [36, "module-leap.reassessment"], [37, "module-leap.severity"], [38, "module-leap.simulation"], [39, "module-leap.utility"], [40, "module-leap.utils"]], "filter_age_group() (in module leap.data_generation.birth_data)": [[6, "leap.data_generation.birth_data.filter_age_group"]], "generate_birth_estimate_data() (in module leap.data_generation.birth_data)": [[6, "leap.data_generation.birth_data.generate_birth_estimate_data"]], "generate_initial_population_data() (in module leap.data_generation.birth_data)": [[6, "leap.data_generation.birth_data.generate_initial_population_data"]], "get_projection_scenario_id() (in module leap.data_generation.birth_data)": [[6, "leap.data_generation.birth_data.get_projection_scenario_id"]], "leap.data_generation.birth_data": [[6, "module-leap.data_generation.birth_data"]], "load_past_births_population_data() (in module leap.data_generation.birth_data)": [[6, "leap.data_generation.birth_data.load_past_births_population_data"]], "load_past_initial_population_data() (in module leap.data_generation.birth_data)": [[6, "leap.data_generation.birth_data.load_past_initial_population_data"]], "load_projected_births_population_data() (in module leap.data_generation.birth_data)": [[6, "leap.data_generation.birth_data.load_projected_births_population_data"]], "load_projected_initial_population_data() (in module leap.data_generation.birth_data)": [[6, "leap.data_generation.birth_data.load_projected_initial_population_data"]], "beta_year_optimizer() (in module leap.data_generation.death_data)": [[8, "leap.data_generation.death_data.beta_year_optimizer"]], "calculate_life_expectancy() (in module leap.data_generation.death_data)": [[8, "leap.data_generation.death_data.calculate_life_expectancy"]], "generate_death_data() (in module leap.data_generation.death_data)": [[8, "leap.data_generation.death_data.generate_death_data"]], "get_prob_death_projected() (in module leap.data_generation.death_data)": [[8, "leap.data_generation.death_data.get_prob_death_projected"]], "get_projected_death_data() (in module leap.data_generation.death_data)": [[8, "leap.data_generation.death_data.get_projected_death_data"]], "get_projected_life_table_single_year() (in module leap.data_generation.death_data)": [[8, "leap.data_generation.death_data.get_projected_life_table_single_year"]], "leap.data_generation.death_data": [[8, "module-leap.data_generation.death_data"]], "load_past_death_data() (in module leap.data_generation.death_data)": [[8, "leap.data_generation.death_data.load_past_death_data"]], "load_projected_death_data() (in module leap.data_generation.death_data)": [[8, "leap.data_generation.death_data.load_projected_death_data"]], "exacerbation_calibrator() (in module leap.data_generation.exacerbation_data)": [[9, "leap.data_generation.exacerbation_data.exacerbation_calibrator"]], "exacerbation_prediction() (in module leap.data_generation.exacerbation_data)": [[9, "leap.data_generation.exacerbation_data.exacerbation_prediction"]], "generate_exacerbation_calibration_data() (in module leap.data_generation.exacerbation_data)": [[9, "leap.data_generation.exacerbation_data.generate_exacerbation_calibration_data"]], "leap.data_generation.exacerbation_data": [[9, "module-leap.data_generation.exacerbation_data"]], "load_hospitalization_data() (in module leap.data_generation.exacerbation_data)": [[9, "leap.data_generation.exacerbation_data.load_hospitalization_data"]], "load_population_data() (in module leap.data_generation.exacerbation_data)": [[9, "leap.data_generation.exacerbation_data.load_population_data"]], "parse_age() (in module leap.data_generation.exacerbation_data)": [[9, "leap.data_generation.exacerbation_data.parse_age"]], "parse_sex() (in module leap.data_generation.exacerbation_data)": [[9, "leap.data_generation.exacerbation_data.parse_sex"]], "compute_contingency_tables() (in module leap.data_generation.incidence_calibration)": [[10, "leap.data_generation.incidence_calibration.compute_contingency_tables"]], "compute_odds_ratio() (in module leap.data_generation.incidence_calibration)": [[10, "leap.data_generation.incidence_calibration.compute_odds_ratio"]], "compute_odds_ratio_difference() (in module leap.data_generation.incidence_calibration)": [[10, "leap.data_generation.incidence_calibration.compute_odds_ratio_difference"]], "inc_correction_calculator() (in module leap.data_generation.incidence_calibration)": [[10, "leap.data_generation.incidence_calibration.inc_correction_calculator"]], "leap.data_generation.incidence_calibration": [[10, "module-leap.data_generation.incidence_calibration"]], "generate_migration_data() (in module leap.data_generation.migration_data)": [[11, "leap.data_generation.migration_data.generate_migration_data"]], "get_delta_n() (in module leap.data_generation.migration_data)": [[11, "leap.data_generation.migration_data.get_delta_n"]], "get_n_migrants() (in module leap.data_generation.migration_data)": [[11, "leap.data_generation.migration_data.get_n_migrants"]], "get_prev_year_population() (in module leap.data_generation.migration_data)": [[11, "leap.data_generation.migration_data.get_prev_year_population"]], "leap.data_generation.migration_data": [[11, "module-leap.data_generation.migration_data"]], "load_migration_data() (in module leap.data_generation.migration_data)": [[11, "leap.data_generation.migration_data.load_migration_data"]], "resultsincidence (class in leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.ResultsIncidence"]], "resultsprevalence (class in leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.ResultsPrevalence"]], "beta_params_age_optimizer() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.beta_params_age_optimizer"]], "calculate_odds_ratio_abx() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.calculate_odds_ratio_abx"]], "calculate_odds_ratio_fam_history() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.calculate_odds_ratio_fam_history"]], "calculate_odds_ratio_risk_factors() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.calculate_odds_ratio_risk_factors"]], "calibrate_asthma_incidence() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.calibrate_asthma_incidence"]], "calibrate_asthma_prevalence() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.calibrate_asthma_prevalence"]], "compute_antibiotic_dose_prob() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.compute_antibiotic_dose_prob"]], "compute_mean_diff_log_or() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.compute_mean_diff_log_OR"]], "generate_occurrence_calibration_data() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.generate_occurrence_calibration_data"]], "get_asthma_occurrence_prediction() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.get_asthma_occurrence_prediction"]], "leap.data_generation.occurrence_calibration_data": [[12, "module-leap.data_generation.occurrence_calibration_data"]], "load_abx_exposure_data() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.load_abx_exposure_data"]], "load_family_history_data() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.load_family_history_data"]], "load_occurrence_data() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.load_occurrence_data"]], "load_reassessment_data() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.load_reassessment_data"]], "risk_factor_generator() (in module leap.data_generation.occurrence_calibration_data)": [[12, "leap.data_generation.occurrence_calibration_data.risk_factor_generator"]], "risk_sets (leap.data_generation.occurrence_calibration_data.resultsincidence attribute)": [[12, "leap.data_generation.occurrence_calibration_data.ResultsIncidence.risk_sets"]], "\u03b1 (leap.data_generation.occurrence_calibration_data.resultsincidence attribute)": [[12, "leap.data_generation.occurrence_calibration_data.ResultsIncidence."]], "\u03b1 (leap.data_generation.occurrence_calibration_data.resultsprevalence attribute)": [[12, "leap.data_generation.occurrence_calibration_data.ResultsPrevalence."]], "\u03b2 (leap.data_generation.occurrence_calibration_data.resultsprevalence attribute)": [[12, "id0"]], "\u03b6 (leap.data_generation.occurrence_calibration_data.resultsprevalence attribute)": [[12, "id2"]], "\u03b6_prev_\u03bb (leap.data_generation.occurrence_calibration_data.resultsincidence attribute)": [[12, "leap.data_generation.occurrence_calibration_data.ResultsIncidence._prev_"]], "\u03b6_\u03bb (leap.data_generation.occurrence_calibration_data.resultsincidence attribute)": [[12, "leap.data_generation.occurrence_calibration_data.ResultsIncidence._"]], "\u03b6_\u03bb (leap.data_generation.occurrence_calibration_data.resultsprevalence attribute)": [[12, "leap.data_generation.occurrence_calibration_data.ResultsPrevalence._"]], "add_beta_parameters() (in module leap.data_generation.occurrence_data)": [[13, "leap.data_generation.occurrence_data.add_beta_parameters"]], "generate_incidence_model() (in module leap.data_generation.occurrence_data)": [[13, "leap.data_generation.occurrence_data.generate_incidence_model"]], "generate_occurrence_data() (in module leap.data_generation.occurrence_data)": [[13, "leap.data_generation.occurrence_data.generate_occurrence_data"]], "generate_occurrence_model() (in module leap.data_generation.occurrence_data)": [[13, "leap.data_generation.occurrence_data.generate_occurrence_model"]], "generate_prevalence_model() (in module leap.data_generation.occurrence_data)": [[13, "leap.data_generation.occurrence_data.generate_prevalence_model"]], "get_predicted_data() (in module leap.data_generation.occurrence_data)": [[13, "leap.data_generation.occurrence_data.get_predicted_data"]], "leap.data_generation.occurrence_data": [[13, "module-leap.data_generation.occurrence_data"]], "load_asthma_df() (in module leap.data_generation.occurrence_data)": [[13, "leap.data_generation.occurrence_data.load_asthma_df"]], "plot_occurrence() (in module leap.data_generation.occurrence_data)": [[13, "leap.data_generation.occurrence_data.plot_occurrence"]], "compute_asthma_prevalence() (in module leap.data_generation.prevalence_calibration)": [[14, "leap.data_generation.prevalence_calibration.compute_asthma_prevalence"]], "compute_asthma_prevalence_difference() (in module leap.data_generation.prevalence_calibration)": [[14, "leap.data_generation.prevalence_calibration.compute_asthma_prevalence_difference"]], "compute_asthma_prevalence_\u03bb() (in module leap.data_generation.prevalence_calibration)": [[14, "leap.data_generation.prevalence_calibration.compute_asthma_prevalence_"]], "get_asthma_prevalence_correction() (in module leap.data_generation.prevalence_calibration)": [[14, "leap.data_generation.prevalence_calibration.get_asthma_prevalence_correction"]], "leap.data_generation.prevalence_calibration": [[14, "module-leap.data_generation.prevalence_calibration"]], "optimize_prevalence_\u03b2_parameters() (in module leap.data_generation.prevalence_calibration)": [[14, "leap.data_generation.prevalence_calibration.optimize_prevalence__parameters"]], "calculate_reassessment_probability() (in module leap.data_generation.reassessment_data)": [[15, "leap.data_generation.reassessment_data.calculate_reassessment_probability"]], "generate_reassessment_data() (in module leap.data_generation.reassessment_data)": [[15, "leap.data_generation.reassessment_data.generate_reassessment_data"]], "get_asthma_df() (in module leap.data_generation.reassessment_data)": [[15, "leap.data_generation.reassessment_data.get_asthma_df"]], "get_reassessment_data() (in module leap.data_generation.reassessment_data)": [[15, "leap.data_generation.reassessment_data.get_reassessment_data"]], "leap.data_generation.reassessment_data": [[15, "module-leap.data_generation.reassessment_data"]], "generate_eq5d_data() (in module leap.data_generation.utility_data)": [[16, "leap.data_generation.utility_data.generate_eq5d_data"]], "interpolate_eq5d() (in module leap.data_generation.utility_data)": [[16, "leap.data_generation.utility_data.interpolate_eq5d"]], "interpolate_eq5d_data() (in module leap.data_generation.utility_data)": [[16, "leap.data_generation.utility_data.interpolate_eq5d_data"]], "leap.data_generation.utility_data": [[16, "module-leap.data_generation.utility_data"]], "load_eq5d_data() (in module leap.data_generation.utility_data)": [[16, "leap.data_generation.utility_data.load_eq5d_data"]], "contingencytable (class in leap.data_generation.utils)": [[17, "leap.data_generation.utils.ContingencyTable"]], "__init__() (leap.data_generation.utils.contingencytable method)": [[17, "leap.data_generation.utils.ContingencyTable.__init__"]], "apply() (leap.data_generation.utils.contingencytable method)": [[17, "leap.data_generation.utils.ContingencyTable.apply"]], "conv_2x2() (in module leap.data_generation.utils)": [[17, "leap.data_generation.utils.conv_2x2"]], "format_age_group() (in module leap.data_generation.utils)": [[17, "leap.data_generation.utils.format_age_group"]], "get_province_id() (in module leap.data_generation.utils)": [[17, "leap.data_generation.utils.get_province_id"]], "get_sex_id() (in module leap.data_generation.utils)": [[17, "leap.data_generation.utils.get_sex_id"]], "heaviside() (in module leap.data_generation.utils)": [[17, "leap.data_generation.utils.heaviside"]], "leap.data_generation.utils": [[17, "module-leap.data_generation.utils"]], "parse_age_group() (in module leap.data_generation.utils)": [[17, "leap.data_generation.utils.parse_age_group"]], "to_list() (leap.data_generation.utils.contingencytable method)": [[17, "leap.data_generation.utils.ContingencyTable.to_list"]], "agent (class in leap.agent)": [[20, "leap.agent.Agent"]], "age (leap.agent.agent property)": [[20, "leap.agent.Agent.age"]], "alive (leap.agent.agent property)": [[20, "leap.agent.Agent.alive"]], "asthma_age (leap.agent.agent property)": [[20, "leap.agent.Agent.asthma_age"]], "asthma_status (leap.agent.agent property)": [[20, "leap.agent.Agent.asthma_status"]], "census_division (leap.agent.agent property)": [[20, "leap.agent.Agent.census_division"]], "control_levels (leap.agent.agent property)": [[20, "leap.agent.Agent.control_levels"]], "exacerbation_history (leap.agent.agent property)": [[20, "leap.agent.Agent.exacerbation_history"]], "exacerbation_severity_history (leap.agent.agent property)": [[20, "leap.agent.Agent.exacerbation_severity_history"]], "has_asthma (leap.agent.agent property)": [[20, "leap.agent.Agent.has_asthma"]], "has_family_history (leap.agent.agent property)": [[20, "leap.agent.Agent.has_family_history"]], "leap.agent": [[20, "module-leap.agent"]], "num_antibiotic_use (leap.agent.agent property)": [[20, "leap.agent.Agent.num_antibiotic_use"]], "pollution (leap.agent.agent property)": [[20, "leap.agent.Agent.pollution"]], "province (leap.agent.agent property)": [[20, "leap.agent.Agent.province"]], "sex (leap.agent.agent property)": [[20, "leap.agent.Agent.sex"]], "ssp (leap.agent.agent property)": [[20, "leap.agent.Agent.ssp"]], "total_hosp (leap.agent.agent property)": [[20, "leap.agent.Agent.total_hosp"]], "uuid (leap.agent.agent property)": [[20, "leap.agent.Agent.uuid"]], "year (leap.agent.agent attribute)": [[20, "leap.agent.Agent.year"]], "year_index (leap.agent.agent attribute)": [[20, "leap.agent.Agent.year_index"]], "antibioticexposure (class in leap.antibiotic_exposure)": [[21, "leap.antibiotic_exposure.AntibioticExposure"]], "compute_num_antibiotic_use() (leap.antibiotic_exposure.antibioticexposure method)": [[21, "leap.antibiotic_exposure.AntibioticExposure.compute_num_antibiotic_use"]], "compute_probability() (leap.antibiotic_exposure.antibioticexposure method)": [[21, "leap.antibiotic_exposure.AntibioticExposure.compute_probability"]], "copy() (leap.antibiotic_exposure.antibioticexposure method)": [[21, "leap.antibiotic_exposure.AntibioticExposure.copy"]], "leap.antibiotic_exposure": [[21, "module-leap.antibiotic_exposure"]], "load_abx_mid_trends() (leap.antibiotic_exposure.antibioticexposure method)": [[21, "leap.antibiotic_exposure.AntibioticExposure.load_abx_mid_trends"]], "mid_trends (leap.antibiotic_exposure.antibioticexposure property)": [[21, "leap.antibiotic_exposure.AntibioticExposure.mid_trends"]], "parameters (leap.antibiotic_exposure.antibioticexposure property)": [[21, "leap.antibiotic_exposure.AntibioticExposure.parameters"]], "birth (class in leap.birth)": [[22, "leap.birth.Birth"]], "estimate (leap.birth.birth property)": [[22, "leap.birth.Birth.estimate"]], "get_initial_population_indices() (leap.birth.birth method)": [[22, "leap.birth.Birth.get_initial_population_indices"]], "get_num_newborn() (leap.birth.birth method)": [[22, "leap.birth.Birth.get_num_newborn"]], "initial_population (leap.birth.birth property)": [[22, "leap.birth.Birth.initial_population"]], "leap.birth": [[22, "module-leap.birth"]], "load_birth_estimate() (leap.birth.birth method)": [[22, "leap.birth.Birth.load_birth_estimate"]], "load_population_initial_distribution() (leap.birth.birth method)": [[22, "leap.birth.Birth.load_population_initial_distribution"]], "censusboundaries (class in leap.census_division)": [[23, "leap.census_division.CensusBoundaries"]], "censusdivision (class in leap.census_division)": [[23, "leap.census_division.CensusDivision"]], "censustable (class in leap.census_division)": [[23, "leap.census_division.CensusTable"]], "cduid (leap.census_division.censusdivision property)": [[23, "leap.census_division.CensusDivision.cduid"]], "copy() (leap.census_division.censustable method)": [[23, "leap.census_division.CensusTable.copy"]], "data (leap.census_division.censustable property)": [[23, "leap.census_division.CensusTable.data"]], "false_easting (leap.census_division.censusboundaries attribute)": [[23, "leap.census_division.CensusBoundaries.false_easting"]], "false_northing (leap.census_division.censusboundaries attribute)": [[23, "leap.census_division.CensusBoundaries.false_northing"]], "first_standard_parallel (leap.census_division.censusboundaries attribute)": [[23, "leap.census_division.CensusBoundaries.first_standard_parallel"]], "get_census_division_from_lat_lon() (leap.census_division.censusboundaries method)": [[23, "leap.census_division.CensusBoundaries.get_census_division_from_lat_lon"]], "get_lambert_conformal_from_lat_lon() (leap.census_division.censusboundaries method)": [[23, "leap.census_division.CensusBoundaries.get_lambert_conformal_from_lat_lon"]], "leap.census_division": [[23, "module-leap.census_division"]], "load_census_boundaries() (leap.census_division.censusboundaries method)": [[23, "leap.census_division.CensusBoundaries.load_census_boundaries"]], "load_census_data() (leap.census_division.censustable method)": [[23, "leap.census_division.CensusTable.load_census_data"]], "name (leap.census_division.censusdivision property)": [[23, "leap.census_division.CensusDivision.name"]], "point_in_polygon() (leap.census_division.censusboundaries method)": [[23, "leap.census_division.CensusBoundaries.point_in_polygon"]], "reference_latitude (leap.census_division.censusboundaries attribute)": [[23, "leap.census_division.CensusBoundaries.reference_latitude"]], "reference_longitude (leap.census_division.censusboundaries attribute)": [[23, "leap.census_division.CensusBoundaries.reference_longitude"]], "second_standard_parallel (leap.census_division.censusboundaries attribute)": [[23, "leap.census_division.CensusBoundaries.second_standard_parallel"]], "shapefile_data (leap.census_division.censusboundaries attribute)": [[23, "leap.census_division.CensusBoundaries.shapefile_data"]], "year (leap.census_division.censusboundaries attribute)": [[23, "leap.census_division.CensusBoundaries.year"]], "year (leap.census_division.censusdivision property)": [[23, "leap.census_division.CensusDivision.year"]], "year (leap.census_division.censustable property)": [[23, "leap.census_division.CensusTable.year"]], "control (class in leap.control)": [[24, "leap.control.Control"]], "controllevels (class in leap.control)": [[24, "leap.control.ControlLevels"]], "as_array() (leap.control.controllevels method)": [[24, "leap.control.ControlLevels.as_array"]], "assign_random_\u03b20() (leap.control.control method)": [[24, "leap.control.Control.assign_random_0"]], "compute_control_levels() (leap.control.control method)": [[24, "leap.control.Control.compute_control_levels"]], "fully_controlled (leap.control.controllevels attribute)": [[24, "leap.control.ControlLevels.fully_controlled"]], "hyperparameters (leap.control.control property)": [[24, "leap.control.Control.hyperparameters"]], "leap.control": [[24, "module-leap.control"]], "parameters (leap.control.control property)": [[24, "leap.control.Control.parameters"]], "partially_controlled (leap.control.controllevels attribute)": [[24, "leap.control.ControlLevels.partially_controlled"]], "uncontrolled (leap.control.controllevels attribute)": [[24, "leap.control.ControlLevels.uncontrolled"]], "asthmacost (class in leap.cost)": [[25, "leap.cost.AsthmaCost"]], "compute_cost() (leap.cost.asthmacost method)": [[25, "leap.cost.AsthmaCost.compute_cost"]], "control_probs (leap.cost.asthmacost property)": [[25, "leap.cost.AsthmaCost.control_probs"]], "exac (leap.cost.asthmacost property)": [[25, "leap.cost.AsthmaCost.exac"]], "exchange_rate_usd_cad (leap.cost.asthmacost property)": [[25, "leap.cost.AsthmaCost.exchange_rate_usd_cad"]], "leap.cost": [[25, "module-leap.cost"]], "death (class in leap.death)": [[26, "leap.death.Death"]], "agent_dies() (leap.death.death method)": [[26, "leap.death.Death.agent_dies"]], "leap.death": [[26, "module-leap.death"]], "life_table (leap.death.death property)": [[26, "leap.death.Death.life_table"]], "load_life_table() (leap.death.death method)": [[26, "leap.death.Death.load_life_table"]], "emigration (class in leap.emigration)": [[27, "leap.emigration.Emigration"]], "compute_probability() (leap.emigration.emigration method)": [[27, "leap.emigration.Emigration.compute_probability"]], "leap.emigration": [[27, "module-leap.emigration"]], "load_emigration_table() (leap.emigration.emigration method)": [[27, "leap.emigration.Emigration.load_emigration_table"]], "table (leap.emigration.emigration property)": [[27, "leap.emigration.Emigration.table"]], "exacerbation (class in leap.exacerbation)": [[28, "leap.exacerbation.Exacerbation"]], "exacerbationhistory (class in leap.exacerbation)": [[28, "leap.exacerbation.ExacerbationHistory"]], "assign_random_\u03b20() (leap.exacerbation.exacerbation method)": [[28, "leap.exacerbation.Exacerbation.assign_random_0"]], "calibration_table (leap.exacerbation.exacerbation property)": [[28, "leap.exacerbation.Exacerbation.calibration_table"]], "compute_num_exacerbations() (leap.exacerbation.exacerbation method)": [[28, "leap.exacerbation.Exacerbation.compute_num_exacerbations"]], "hyperparameters (leap.exacerbation.exacerbation property)": [[28, "leap.exacerbation.Exacerbation.hyperparameters"]], "leap.exacerbation": [[28, "module-leap.exacerbation"]], "load_exacerbation_calibration() (leap.exacerbation.exacerbation method)": [[28, "leap.exacerbation.Exacerbation.load_exacerbation_calibration"]], "num_current_year (leap.exacerbation.exacerbationhistory attribute)": [[28, "leap.exacerbation.ExacerbationHistory.num_current_year"]], "num_prev_year (leap.exacerbation.exacerbationhistory attribute)": [[28, "leap.exacerbation.ExacerbationHistory.num_prev_year"]], "parameters (leap.exacerbation.exacerbation property)": [[28, "leap.exacerbation.Exacerbation.parameters"]], "familyhistory (class in leap.family_history)": [[29, "leap.family_history.FamilyHistory"]], "copy() (leap.family_history.familyhistory method)": [[29, "leap.family_history.FamilyHistory.copy"]], "has_family_history_of_asthma() (leap.family_history.familyhistory method)": [[29, "leap.family_history.FamilyHistory.has_family_history_of_asthma"]], "leap.family_history": [[29, "module-leap.family_history"]], "probability (leap.family_history.familyhistory property)": [[29, "leap.family_history.FamilyHistory.probability"]], "immigration (class in leap.immigration)": [[30, "leap.immigration.Immigration"]], "get_num_new_immigrants() (leap.immigration.immigration method)": [[30, "leap.immigration.Immigration.get_num_new_immigrants"]], "leap.immigration": [[30, "module-leap.immigration"]], "load_immigration_table() (leap.immigration.immigration method)": [[30, "leap.immigration.Immigration.load_immigration_table"]], "table (leap.immigration.immigration property)": [[30, "leap.immigration.Immigration.table"]], "coloredformatter (class in leap.logger)": [[31, "leap.logger.ColoredFormatter"]], "logfilter (class in leap.logger)": [[31, "leap.logger.LogFilter"]], "logger (class in leap.logger)": [[31, "leap.logger.Logger"]], "filter() (leap.logger.logfilter method)": [[31, "leap.logger.LogFilter.filter"]], "format() (leap.logger.coloredformatter method)": [[31, "leap.logger.ColoredFormatter.format"]], "get_logger() (in module leap.logger)": [[31, "leap.logger.get_logger"]], "leap.logger": [[31, "module-leap.logger"]], "message() (leap.logger.logger method)": [[31, "leap.logger.Logger.message"]], "set_logging_level() (in module leap.logger)": [[31, "leap.logger.set_logging_level"]], "supports_color() (leap.logger.coloredformatter method)": [[31, "leap.logger.ColoredFormatter.supports_color"]], "force_output_path() (in module leap.main)": [[32, "leap.main.force_output_path"]], "get_config() (in module leap.main)": [[32, "leap.main.get_config"]], "get_parser() (in module leap.main)": [[32, "leap.main.get_parser"]], "handle_output_path() (in module leap.main)": [[32, "leap.main.handle_output_path"]], "leap.main": [[32, "module-leap.main"]], "run_main() (in module leap.main)": [[32, "leap.main.run_main"]], "incidence (class in leap.occurrence)": [[33, "leap.occurrence.Incidence"]], "occurrence (class in leap.occurrence)": [[33, "leap.occurrence.Occurrence"]], "prevalence (class in leap.occurrence)": [[33, "leap.occurrence.Prevalence"]], "agent_has_asthma() (in module leap.occurrence)": [[33, "leap.occurrence.agent_has_asthma"]], "calculate_odds_ratio_abx() (leap.occurrence.occurrence method)": [[33, "leap.occurrence.Occurrence.calculate_odds_ratio_abx"]], "calculate_odds_ratio_fam_history() (leap.occurrence.occurrence method)": [[33, "leap.occurrence.Occurrence.calculate_odds_ratio_fam_history"]], "compute_asthma_age() (in module leap.occurrence)": [[33, "leap.occurrence.compute_asthma_age"]], "correction_table (leap.occurrence.occurrence property)": [[33, "leap.occurrence.Occurrence.correction_table"]], "crude_occurrence() (leap.occurrence.incidence method)": [[33, "leap.occurrence.Incidence.crude_occurrence"]], "crude_occurrence() (leap.occurrence.occurrence method)": [[33, "leap.occurrence.Occurrence.crude_occurrence"]], "crude_occurrence() (leap.occurrence.prevalence method)": [[33, "leap.occurrence.Prevalence.crude_occurrence"]], "equation() (leap.occurrence.occurrence method)": [[33, "leap.occurrence.Occurrence.equation"]], "leap.occurrence": [[33, "module-leap.occurrence"]], "load_occurrence_correction_table() (leap.occurrence.incidence method)": [[33, "leap.occurrence.Incidence.load_occurrence_correction_table"]], "load_occurrence_correction_table() (leap.occurrence.occurrence method)": [[33, "leap.occurrence.Occurrence.load_occurrence_correction_table"]], "load_occurrence_correction_table() (leap.occurrence.prevalence method)": [[33, "leap.occurrence.Prevalence.load_occurrence_correction_table"]], "max_age (leap.occurrence.occurrence property)": [[33, "leap.occurrence.Occurrence.max_age"]], "max_year (leap.occurrence.occurrence property)": [[33, "leap.occurrence.Occurrence.max_year"]], "min_year (leap.occurrence.occurrence property)": [[33, "leap.occurrence.Occurrence.min_year"]], "parameters (leap.occurrence.incidence property)": [[33, "leap.occurrence.Incidence.parameters"]], "parameters (leap.occurrence.occurrence property)": [[33, "leap.occurrence.Occurrence.parameters"]], "parameters (leap.occurrence.prevalence property)": [[33, "leap.occurrence.Prevalence.parameters"]], "poly_parameters (leap.occurrence.incidence property)": [[33, "leap.occurrence.Incidence.poly_parameters"]], "poly_parameters (leap.occurrence.prevalence property)": [[33, "leap.occurrence.Prevalence.poly_parameters"]], "outcomematrix (class in leap.outcome_matrix)": [[34, "leap.outcome_matrix.OutcomeMatrix"]], "outcometable (class in leap.outcome_matrix)": [[34, "leap.outcome_matrix.OutcomeTable"]], "__init__() (leap.outcome_matrix.outcomematrix method)": [[34, "leap.outcome_matrix.OutcomeMatrix.__init__"]], "__init__() (leap.outcome_matrix.outcometable method)": [[34, "leap.outcome_matrix.OutcomeTable.__init__"]], "alive (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.alive"]], "antibiotic_exposure (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.antibiotic_exposure"]], "asthma_incidence (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.asthma_incidence"]], "asthma_incidence_contingency_table (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.asthma_incidence_contingency_table"]], "asthma_prevalence (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.asthma_prevalence"]], "asthma_prevalence_contingency_table (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.asthma_prevalence_contingency_table"]], "asthma_status (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.asthma_status"]], "combine() (leap.outcome_matrix.outcomematrix method)": [[34, "leap.outcome_matrix.OutcomeMatrix.combine"]], "combine() (leap.outcome_matrix.outcometable method)": [[34, "leap.outcome_matrix.OutcomeTable.combine"]], "combine_outcome_matrices() (in module leap.outcome_matrix)": [[34, "leap.outcome_matrix.combine_outcome_matrices"]], "combine_outcome_tables() (in module leap.outcome_matrix)": [[34, "leap.outcome_matrix.combine_outcome_tables"]], "control (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.control"]], "cost (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.cost"]], "create_table() (leap.outcome_matrix.outcomematrix method)": [[34, "leap.outcome_matrix.OutcomeMatrix.create_table"]], "death (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.death"]], "emigration (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.emigration"]], "exacerbation (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.exacerbation"]], "exacerbation_by_severity (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.exacerbation_by_severity"]], "exacerbation_hospital (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.exacerbation_hospital"]], "family_history (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.family_history"]], "get() (leap.outcome_matrix.outcometable method)": [[34, "leap.outcome_matrix.OutcomeTable.get"]], "immigration (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.immigration"]], "increment() (leap.outcome_matrix.outcometable method)": [[34, "leap.outcome_matrix.OutcomeTable.increment"]], "leap.outcome_matrix": [[34, "module-leap.outcome_matrix"]], "save() (leap.outcome_matrix.outcomematrix method)": [[34, "leap.outcome_matrix.OutcomeMatrix.save"]], "utility (leap.outcome_matrix.outcomematrix property)": [[34, "leap.outcome_matrix.OutcomeMatrix.utility"]], "gribdata (class in leap.pollution)": [[35, "leap.pollution.GribData"]], "pollution (class in leap.pollution)": [[35, "leap.pollution.Pollution"]], "pollutiontable (class in leap.pollution)": [[35, "leap.pollution.PollutionTable"]], "ssp (leap.pollution.pollution attribute)": [[35, "leap.pollution.Pollution.SSP"]], "add_record_to_df() (in module leap.pollution)": [[35, "leap.pollution.add_record_to_df"]], "cduid (leap.pollution.pollution attribute)": [[35, "leap.pollution.Pollution.cduid"]], "copy() (leap.pollution.pollutiontable method)": [[35, "leap.pollution.PollutionTable.copy"]], "data (leap.pollution.pollutiontable property)": [[35, "leap.pollution.PollutionTable.data"]], "day (leap.pollution.gribdata attribute)": [[35, "leap.pollution.GribData.day"]], "get_data_average() (in module leap.pollution)": [[35, "leap.pollution.get_data_average"]], "invert_longitude() (in module leap.pollution)": [[35, "leap.pollution.invert_longitude"]], "latitudes (leap.pollution.gribdata attribute)": [[35, "leap.pollution.GribData.latitudes"]], "leap.pollution": [[35, "module-leap.pollution"]], "load_file() (leap.pollution.gribdata method)": [[35, "leap.pollution.GribData.load_file"]], "load_grib_files() (in module leap.pollution)": [[35, "leap.pollution.load_grib_files"]], "load_pollution_data() (leap.pollution.pollutiontable method)": [[35, "leap.pollution.PollutionTable.load_pollution_data"]], "longitudes (leap.pollution.gribdata attribute)": [[35, "leap.pollution.GribData.longitudes"]], "month (leap.pollution.gribdata attribute)": [[35, "leap.pollution.GribData.month"]], "month (leap.pollution.pollution attribute)": [[35, "leap.pollution.Pollution.month"]], "projection (leap.pollution.gribdata attribute)": [[35, "leap.pollution.GribData.projection"]], "save() (leap.pollution.gribdata method)": [[35, "leap.pollution.GribData.save"]], "total_pm25 (leap.pollution.pollution attribute)": [[35, "leap.pollution.Pollution.total_pm25"]], "values (leap.pollution.gribdata attribute)": [[35, "leap.pollution.GribData.values"]], "wildfire_pm25_scaled (leap.pollution.pollution attribute)": [[35, "leap.pollution.Pollution.wildfire_pm25_scaled"]], "year (leap.pollution.gribdata attribute)": [[35, "leap.pollution.GribData.year"]], "year (leap.pollution.pollution attribute)": [[35, "leap.pollution.Pollution.year"]], "reassessment (class in leap.reassessment)": [[36, "leap.reassessment.Reassessment"]], "agent_has_asthma() (leap.reassessment.reassessment method)": [[36, "leap.reassessment.Reassessment.agent_has_asthma"]], "leap.reassessment": [[36, "module-leap.reassessment"]], "load_reassessment_table() (leap.reassessment.reassessment method)": [[36, "leap.reassessment.Reassessment.load_reassessment_table"]], "table (leap.reassessment.reassessment property)": [[36, "leap.reassessment.Reassessment.table"]], "exacerbationseverity (class in leap.severity)": [[37, "leap.severity.ExacerbationSeverity"]], "exacerbationseverityhistory (class in leap.severity)": [[37, "leap.severity.ExacerbationSeverityHistory"]], "severitylevels (class in leap.severity)": [[37, "leap.severity.SeverityLevels"]], "as_array() (leap.severity.severitylevels method)": [[37, "leap.severity.SeverityLevels.as_array"]], "assign_random_p() (leap.severity.exacerbationseverity method)": [[37, "leap.severity.ExacerbationSeverity.assign_random_p"]], "compute_distribution() (leap.severity.exacerbationseverity method)": [[37, "leap.severity.ExacerbationSeverity.compute_distribution"]], "compute_hospitalization_prob() (leap.severity.exacerbationseverity method)": [[37, "leap.severity.ExacerbationSeverity.compute_hospitalization_prob"]], "current_year (leap.severity.exacerbationseverityhistory attribute)": [[37, "leap.severity.ExacerbationSeverityHistory.current_year"]], "hyperparameters (leap.severity.exacerbationseverity property)": [[37, "leap.severity.ExacerbationSeverity.hyperparameters"]], "leap.severity": [[37, "module-leap.severity"]], "mild (leap.severity.severitylevels attribute)": [[37, "leap.severity.SeverityLevels.mild"]], "moderate (leap.severity.severitylevels attribute)": [[37, "leap.severity.SeverityLevels.moderate"]], "parameters (leap.severity.exacerbationseverity property)": [[37, "leap.severity.ExacerbationSeverity.parameters"]], "prev_year (leap.severity.exacerbationseverityhistory attribute)": [[37, "leap.severity.ExacerbationSeverityHistory.prev_year"]], "severe (leap.severity.severitylevels attribute)": [[37, "leap.severity.SeverityLevels.severe"]], "severity_levels (leap.severity.exacerbationseverity property)": [[37, "leap.severity.ExacerbationSeverity.severity_levels"]], "very_severe (leap.severity.severitylevels attribute)": [[37, "leap.severity.SeverityLevels.very_severe"]], "simulation (class in leap.simulation)": [[38, "leap.simulation.Simulation"]], "check_if_agent_gets_new_asthma_diagnosis() (leap.simulation.simulation method)": [[38, "leap.simulation.Simulation.check_if_agent_gets_new_asthma_diagnosis"]], "generate_initial_asthma() (leap.simulation.simulation method)": [[38, "leap.simulation.Simulation.generate_initial_asthma"]], "get_new_agents() (leap.simulation.simulation method)": [[38, "leap.simulation.Simulation.get_new_agents"]], "get_num_new_agents() (leap.simulation.simulation method)": [[38, "leap.simulation.Simulation.get_num_new_agents"]], "leap.simulation": [[38, "module-leap.simulation"]], "max_age (leap.simulation.simulation property)": [[38, "leap.simulation.Simulation.max_age"]], "max_time_horizon (leap.simulation.simulation property)": [[38, "leap.simulation.Simulation.max_time_horizon"]], "min_year (leap.simulation.simulation property)": [[38, "leap.simulation.Simulation.min_year"]], "num_births_initial (leap.simulation.simulation property)": [[38, "leap.simulation.Simulation.num_births_initial"]], "population_growth_type (leap.simulation.simulation property)": [[38, "leap.simulation.Simulation.population_growth_type"]], "province (leap.simulation.simulation property)": [[38, "leap.simulation.Simulation.province"]], "reassess_asthma_diagnosis() (leap.simulation.simulation method)": [[38, "leap.simulation.Simulation.reassess_asthma_diagnosis"]], "run() (leap.simulation.simulation method)": [[38, "leap.simulation.Simulation.run"]], "simulate_agent() (leap.simulation.simulation method)": [[38, "leap.simulation.Simulation.simulate_agent"]], "time_horizon (leap.simulation.simulation property)": [[38, "leap.simulation.Simulation.time_horizon"]], "until_all_die (leap.simulation.simulation property)": [[38, "leap.simulation.Simulation.until_all_die"]], "update_asthma_effects() (leap.simulation.simulation method)": [[38, "leap.simulation.Simulation.update_asthma_effects"]], "worker() (leap.simulation.simulation method)": [[38, "leap.simulation.Simulation.worker"]], "utility (class in leap.utility)": [[39, "leap.utility.Utility"]], "compute_utility() (leap.utility.utility method)": [[39, "leap.utility.Utility.compute_utility"]], "leap.utility": [[39, "module-leap.utility"]], "load_eq5d() (leap.utility.utility method)": [[39, "leap.utility.Utility.load_eq5d"]], "parameters (leap.utility.utility attribute)": [[39, "leap.utility.Utility.parameters"]], "parameters (leap.utility.utility property)": [[39, "id0"]], "table (leap.utility.utility attribute)": [[39, "leap.utility.Utility.table"]], "sex (class in leap.utils)": [[40, "leap.utils.Sex"]], "uuid4 (class in leap.utils)": [[40, "leap.utils.UUID4"]], "__init__() (leap.utils.sex method)": [[40, "leap.utils.Sex.__init__"]], "check_cduid() (in module leap.utils)": [[40, "leap.utils.check_cduid"]], "check_file() (in module leap.utils)": [[40, "leap.utils.check_file"]], "check_projection_scenario() (in module leap.utils)": [[40, "leap.utils.check_projection_scenario"]], "check_province() (in module leap.utils)": [[40, "leap.utils.check_province"]], "check_year() (in module leap.utils)": [[40, "leap.utils.check_year"]], "compute_ordinal_regression() (in module leap.utils)": [[40, "leap.utils.compute_ordinal_regression"]], "convert_non_serializable() (in module leap.utils)": [[40, "leap.utils.convert_non_serializable"]], "create_process_bars() (in module leap.utils)": [[40, "leap.utils.create_process_bars"]], "get_chunk_indices() (in module leap.utils)": [[40, "leap.utils.get_chunk_indices"]], "get_data_path() (in module leap.utils)": [[40, "leap.utils.get_data_path"]], "leap.utils": [[40, "module-leap.utils"]], "poly() (in module leap.utils)": [[40, "leap.utils.poly"]], "round_number() (in module leap.utils)": [[40, "leap.utils.round_number"]], "timer() (in module leap.utils)": [[40, "leap.utils.timer"]]}, "docurls": ["cli/cli-run-simulation.html", "cli/config.html", "cli/index.html", "cli/validation.html", "dev/api/data_generation/index.html", "dev/api/data_generation/leap.data_generation.antibiotic_data.html", "dev/api/data_generation/leap.data_generation.birth_data.html", "dev/api/data_generation/leap.data_generation.control_data.html", "dev/api/data_generation/leap.data_generation.death_data.html", "dev/api/data_generation/leap.data_generation.exacerbation_data.html", "dev/api/data_generation/leap.data_generation.incidence_calibration.html", "dev/api/data_generation/leap.data_generation.migration_data.html", "dev/api/data_generation/leap.data_generation.occurrence_calibration_data.html", "dev/api/data_generation/leap.data_generation.occurrence_data.html", "dev/api/data_generation/leap.data_generation.prevalence_calibration.html", "dev/api/data_generation/leap.data_generation.reassessment_data.html", "dev/api/data_generation/leap.data_generation.utility_data.html", "dev/api/data_generation/leap.data_generation.utils.html", "dev/api/index.html", "dev/api/leap/index.html", "dev/api/leap/leap.agent.html", "dev/api/leap/leap.antibiotic_exposure.html", "dev/api/leap/leap.birth.html", "dev/api/leap/leap.census_division.html", "dev/api/leap/leap.control.html", "dev/api/leap/leap.cost.html", "dev/api/leap/leap.death.html", "dev/api/leap/leap.emigration.html", "dev/api/leap/leap.exacerbation.html", "dev/api/leap/leap.family_history.html", "dev/api/leap/leap.immigration.html", "dev/api/leap/leap.logger.html", "dev/api/leap/leap.main.html", "dev/api/leap/leap.occurrence.html", "dev/api/leap/leap.outcome_matrix.html", "dev/api/leap/leap.pollution.html", "dev/api/leap/leap.reassessment.html", "dev/api/leap/leap.severity.html", "dev/api/leap/leap.simulation.html", "dev/api/leap/leap.utility.html", "dev/api/leap/leap.utils.html", "dev/dev-docs.html", "dev/dev-installation.html", "dev/dev-releases.html", "dev/dev-testing.html", "dev/index.html", "index.html", "installation.html", "model/index.html", "model/model-antibiotics.html", "model/model-control.html", "model/model-glm.html", "model/model-occurrence.html", "model/model-utility.html", "references.html"]})